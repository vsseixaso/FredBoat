
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test001"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = simpleTrackProvider0.getRepeatMode();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext4 = simpleTrackProvider0.getTracksInRange(10000, (int)(short)10);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider5 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext6 = null;
    simpleTrackProvider5.setLastTrack(audioTrackContext6);
    fredboat.audio.queue.AudioTrackContext audioTrackContext8 = null;
    simpleTrackProvider5.setLastTrack(audioTrackContext8);
    boolean b10 = simpleTrackProvider5.isEmpty();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider11 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider11.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext13 = simpleTrackProvider11.getAsListOrdered();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext14 = simpleTrackProvider11.getAsList();
    simpleTrackProvider5.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext14);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext16 = simpleTrackProvider5.getAsListOrdered();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider17 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext18 = simpleTrackProvider17.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext19 = null;
    simpleTrackProvider17.setLastTrack(audioTrackContext19);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext23 = simpleTrackProvider17.getTracksInRange((int)(byte)10, 10000);
    fredboat.audio.queue.AudioTrackContext audioTrackContext24 = simpleTrackProvider17.peek();
    boolean b25 = simpleTrackProvider17.isEmpty();
    fredboat.audio.queue.AudioTrackContext audioTrackContext26 = simpleTrackProvider17.peek();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext27 = simpleTrackProvider17.getAsListOrdered();
    simpleTrackProvider5.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext27);
    simpleTrackProvider0.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext27);
    fredboat.audio.queue.AudioTrackContext audioTrackContext30 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext30);
    // The following exception was thrown during execution in test generation
    try {
    simpleTrackProvider0.reshuffle();
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext27);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test002"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.fun.TextCommand textCommand11 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array8);
    fredboat.command.music.seeking.RestartCommand restartCommand12 = new fredboat.command.music.seeking.RestartCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.music.seeking.RestartCommand restartCommand13 = new fredboat.command.music.seeking.RestartCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.perms.PermissionLevel permissionLevel14 = restartCommand13.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext15 = null;
    // The following exception was thrown during execution in test generation
    try {
    restartCommand13.onInvoke(commandContext15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel14 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel14.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test003"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.fun.TextCommand textCommand18 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array15);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand19 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand20 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array15);
    fredboat.command.moderation.ConfigCommand configCommand21 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.fun.HugCommand hugCommand22 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array15);
    fredboat.command.music.control.DestroyCommand destroyCommand23 = new fredboat.command.music.control.DestroyCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.music.control.StopCommand stopCommand24 = new fredboat.command.music.control.StopCommand("fredboat.util.BrainfuckException: hi!", str_array15);
    fredboat.command.fun.PatCommand patCommand25 = new fredboat.command.fun.PatCommand("User", "\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array15);
    fredboat.commandmeta.abs.CommandContext commandContext26 = null;
    // The following exception was thrown during execution in test generation
    try {
    patCommand25.onInvoke(commandContext26);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test004"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry0 = new fredboat.db.entity.BlacklistEntry();
    blacklistEntry0.setRateLimitReached(1);
    blacklistEntry0.setRateLimitReached(100);
    int i5 = blacklistEntry0.getLevel();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test005"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.maintenance.GetIdCommand getIdCommand12 = new fredboat.command.maintenance.GetIdCommand("Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.fun.FacedeskCommand facedeskCommand13 = new fredboat.command.fun.FacedeskCommand("Provided by OpenWeatherMap.org", "Bot Owner", str_array9);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand14 = new fredboat.command.admin.SetAvatarCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand15 = new fredboat.command.music.control.RepeatCommand("http://i.imgur.com/NqyOqnj.gif", str_array9);
    fredboat.messaging.internal.Context context16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = repeatCommand15.help(context16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test006"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.admin.UpdateCommand updateCommand12 = new fredboat.command.admin.UpdateCommand("", str_array10);
    fredboat.command.fun.CatgirlCommand catgirlCommand13 = new fredboat.command.fun.CatgirlCommand("Bot Admin", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand("\u2705", str_array10);
    fredboat.command.util.MathCommand mathCommand15 = new fredboat.command.util.MathCommand("", str_array10);
    fredboat.command.fun.RollCommand rollCommand16 = new fredboat.command.fun.RollCommand("Base", "fredboat.util.BrainfuckException: hi!", str_array10);
    fredboat.command.music.control.LeaveCommand leaveCommand17 = new fredboat.command.music.control.LeaveCommand("fredboat.util.rest.APILimitException: en_US", str_array10);
    fredboat.perms.PermissionLevel permissionLevel18 = leaveCommand17.getMinimumPerms();
    fredboat.messaging.internal.Context context19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = leaveCommand17.help(context19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test007"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand15 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand16 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.VersionCommand versionCommand17 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.fun.RollCommand rollCommand18 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\u2705", str_array12);
    fredboat.command.fun.CatgirlCommand catgirlCommand19 = new fredboat.command.fun.CatgirlCommand("hi!", str_array12);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand20 = new fredboat.command.music.control.PlaySplitCommand("User", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand21 = new fredboat.command.util.ServerInfoCommand("", str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test008"); }

    java.lang.String[] str_array14 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array14);
    fredboat.command.music.control.ShuffleCommand shuffleCommand16 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.fun.TextCommand textCommand17 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array14);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand18 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array14);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand19 = new fredboat.command.moderation.EnableCommandsCommand("\u2705", str_array14);
    fredboat.command.fun.RandomImageCommand randomImageCommand20 = new fredboat.command.fun.RandomImageCommand("qua, 31 dez 1969, 09:00 PM", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array14);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand21 = new fredboat.command.music.control.PlaySplitCommand("\uD83D\uDCDD", str_array14);
    fredboat.command.maintenance.GetIdCommand getIdCommand22 = new fredboat.command.maintenance.GetIdCommand("\u2757", str_array14);
    fredboat.command.fun.PatCommand patCommand23 = new fredboat.command.fun.PatCommand("en_US", "hi!", str_array14);
    java.lang.String str24 = patCommand23.getRandomImageUrl();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "http://i.imgur.com/NqyOqnj.gif"+ "'", str24.equals("http://i.imgur.com/NqyOqnj.gif"));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test009"); }

    fredboat.util.rest.Weather weather0 = null;
    java.lang.String[] str_array19 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand20 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array19);
    fredboat.command.util.MathCommand mathCommand21 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array19);
    fredboat.command.music.control.UnpauseCommand unpauseCommand22 = new fredboat.command.music.control.UnpauseCommand("", str_array19);
    fredboat.command.admin.ExitCommand exitCommand23 = new fredboat.command.admin.ExitCommand("hi!", str_array19);
    fredboat.command.admin.BotRestartCommand botRestartCommand24 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array19);
    fredboat.command.admin.ReviveCommand reviveCommand25 = new fredboat.command.admin.ReviveCommand("", str_array19);
    fredboat.command.fun.FacedeskCommand facedeskCommand26 = new fredboat.command.fun.FacedeskCommand("\u2757", "DJ", str_array19);
    fredboat.command.fun.CatgirlCommand catgirlCommand27 = new fredboat.command.fun.CatgirlCommand("fredboat.util.BrainfuckException: ", str_array19);
    fredboat.command.fun.HugCommand hugCommand28 = new fredboat.command.fun.HugCommand("http://i.imgur.com/NqyOqnj.gif", "\u2705", str_array19);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand29 = new fredboat.command.fun.RemoteFileCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array19);
    fredboat.command.fun.PatCommand patCommand30 = new fredboat.command.fun.PatCommand("DJ", "fredboat.util.BrainfuckException: ", str_array19);
    fredboat.command.util.WeatherCommand weatherCommand31 = new fredboat.command.util.WeatherCommand(weather0, "DJ", str_array19);
    fredboat.messaging.internal.Context context32 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str33 = weatherCommand31.help(context32);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test010"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.util.MathCommand mathCommand10 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.music.control.UnpauseCommand unpauseCommand11 = new fredboat.command.music.control.UnpauseCommand("", str_array8);
    fredboat.command.fun.TextCommand textCommand12 = new fredboat.command.fun.TextCommand("qua, 31 dez 1969, 09:00 PM", "\u274C", str_array8);
    fredboat.command.music.control.DestroyCommand destroyCommand13 = new fredboat.command.music.control.DestroyCommand("fredboat.util.BrainfuckException: ", str_array8);
    fredboat.messaging.internal.Context context14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = destroyCommand13.help(context14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test011"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    weatherOpenWeather0.setMain(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    weatherOpenWeather0.setMain("Provided by OpenWeatherMap.org");
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand12 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand14 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array11);
    fredboat.command.moderation.LanguageCommand languageCommand15 = new fredboat.command.moderation.LanguageCommand("\u2757", str_array11);
    fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand> tuple2_weatherOpenWeather_languageCommand16 = new fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand>(weatherOpenWeather0, languageCommand15);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider17 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode18 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider17.setRepeatMode(repeatMode18);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider20 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext21 = simpleTrackProvider20.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext22 = null;
    simpleTrackProvider20.setLastTrack(audioTrackContext22);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext24 = simpleTrackProvider20.getAsListOrdered();
    simpleTrackProvider17.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext24);
    fredboat.audio.queue.AudioTrackContext audioTrackContext26 = null;
    boolean b27 = simpleTrackProvider17.remove(audioTrackContext26);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext28 = simpleTrackProvider17.getAsList();
    fredboat.util.Tuple2<fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand>,fredboat.audio.queue.ITrackProvider> tuple2_tuple2_weatherOpenWeather_languageCommand_iTrackProvider29 = new fredboat.util.Tuple2<fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand>,fredboat.audio.queue.ITrackProvider>(tuple2_weatherOpenWeather_languageCommand16, (fredboat.audio.queue.ITrackProvider)simpleTrackProvider17);
    fredboat.audio.queue.RepeatMode repeatMode30 = simpleTrackProvider17.getRepeatMode();
    simpleTrackProvider17.setShuffle(true);
    boolean b33 = simpleTrackProvider17.isShuffle();
    boolean b34 = simpleTrackProvider17.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    org.junit.Assert.assertTrue("'" + repeatMode18 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode18.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext28);
    org.junit.Assert.assertTrue("'" + repeatMode30 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode30.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test012"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    int i1 = weatherSystemOpenWeather0.getId();
    weatherSystemOpenWeather0.setType((int)'a');
    int i4 = weatherSystemOpenWeather0.getId();
    weatherSystemOpenWeather0.setCountry("\u2757");
    int i7 = weatherSystemOpenWeather0.getSunrise();
    int i8 = weatherSystemOpenWeather0.getSunrise();
    int i9 = weatherSystemOpenWeather0.getSunset();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test013"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array7);
    fredboat.command.music.seeking.RestartCommand restartCommand10 = new fredboat.command.music.seeking.RestartCommand("", str_array7);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand("hi!", str_array7);
    fredboat.command.music.control.LeaveCommand leaveCommand12 = new fredboat.command.music.control.LeaveCommand("Bot Admin", str_array7);
    fredboat.command.util.CommandsCommand commandsCommand13 = new fredboat.command.util.CommandsCommand("Bot Owner", str_array7);
    fredboat.commandmeta.abs.CommandContext commandContext14 = null;
    // The following exception was thrown during execution in test generation
    try {
    commandsCommand13.onInvoke(commandContext14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test014"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.fun.TextCommand textCommand16 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.command.fun.FacedeskCommand facedeskCommand18 = new fredboat.command.fun.FacedeskCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array13);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand19 = new fredboat.command.moderation.EnableCommandsCommand("Provided by OpenWeatherMap.org", str_array13);
    fredboat.command.music.info.ListCommand listCommand20 = new fredboat.command.music.info.ListCommand("hi!", str_array13);
    fredboat.command.music.seeking.RewindCommand rewindCommand21 = new fredboat.command.music.seeking.RewindCommand("\u2705", str_array13);
    fredboat.command.util.ServerInfoCommand serverInfoCommand22 = new fredboat.command.util.ServerInfoCommand("DJ", str_array13);
    fredboat.messaging.internal.Context context23 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str24 = serverInfoCommand22.help(context23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test015"); }

    fredboat.db.DatabaseManager databaseManager0 = null;
    fredboat.agent.DBConnectionWatchdogAgent dBConnectionWatchdogAgent1 = new fredboat.agent.DBConnectionWatchdogAgent(databaseManager0);
    dBConnectionWatchdogAgent1.doRun();
    dBConnectionWatchdogAgent1.doRun();
    dBConnectionWatchdogAgent1.doRun();
    dBConnectionWatchdogAgent1.run();
    dBConnectionWatchdogAgent1.doRun();
    dBConnectionWatchdogAgent1.doRun();

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test016"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange((int)(byte)10, 10000);
    simpleTrackProvider0.clear();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider8 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = simpleTrackProvider8.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext10 = null;
    simpleTrackProvider8.setLastTrack(audioTrackContext10);
    java.lang.Long[] long_array15 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long16 = new java.util.ArrayList<java.lang.Long>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long16, long_array15);
    simpleTrackProvider8.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long16);
    java.lang.String[] str_array23 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand24 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array23);
    fredboat.command.admin.ExitCommand exitCommand25 = new fredboat.command.admin.ExitCommand("hi!", str_array23);
    java.util.List<java.lang.String> list_str26 = exitCommand25.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand27 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long16, exitCommand25);
    java.util.ArrayList<java.lang.Long> arraylist_long28 = tuple2_arraylist_long_exitCommand27.a;
    simpleTrackProvider0.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long28);
    fredboat.audio.queue.AudioTrackContext audioTrackContext30 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext30);
    fredboat.audio.queue.AudioTrackContext audioTrackContext32 = simpleTrackProvider0.provideAudioTrack();
    boolean b33 = simpleTrackProvider0.isEmpty();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext36 = simpleTrackProvider0.getTracksInRange((int)'a', (int)(byte)100);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext37 = simpleTrackProvider0.getAsListOrdered();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext37);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test017"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    java.lang.String str1 = weatherOpenWeather0.getDescription();
    weatherOpenWeather0.setDescription(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    java.lang.String str4 = weatherOpenWeather0.getMain();
    weatherOpenWeather0.setDescription("http://i.imgur.com/NqyOqnj.gif");
    java.lang.String str7 = weatherOpenWeather0.getDescription();
    java.lang.String str8 = weatherOpenWeather0.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "http://i.imgur.com/NqyOqnj.gif"+ "'", str7.equals("http://i.imgur.com/NqyOqnj.gif"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "http://i.imgur.com/NqyOqnj.gif"+ "'", str8.equals("http://i.imgur.com/NqyOqnj.gif"));

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test018"); }

    fredboat.audio.queue.PlaylistInfo.Source source2 = null;
    fredboat.audio.queue.PlaylistInfo playlistInfo3 = new fredboat.audio.queue.PlaylistInfo(2, "DJ", source2);
    fredboat.audio.queue.PlaylistInfo.Source source4 = playlistInfo3.getSource();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(source4);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test019"); }

    fredboat.util.rest.Weather weather0 = null;
    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.util.ServerInfoCommand serverInfoCommand13 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array10);
    fredboat.command.music.seeking.ForwardCommand forwardCommand14 = new fredboat.command.music.seeking.ForwardCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.LeaveCommand leaveCommand15 = new fredboat.command.music.control.LeaveCommand("Bot Admin", str_array10);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand16 = new fredboat.command.music.control.PlaySplitCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.util.WeatherCommand weatherCommand17 = new fredboat.command.util.WeatherCommand(weather0, "Bot Owner", str_array10);
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = weatherCommand17.help(context18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test020"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext1);
    fredboat.audio.queue.AudioTrackContext audioTrackContext3 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext3);
    boolean b5 = simpleTrackProvider0.isEmpty();
    fredboat.audio.queue.RepeatMode repeatMode6 = simpleTrackProvider0.getRepeatMode();
    fredboat.audio.queue.RepeatMode repeatMode7 = simpleTrackProvider0.getRepeatMode();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider8 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = simpleTrackProvider8.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext10 = null;
    boolean b11 = simpleTrackProvider8.remove(audioTrackContext10);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext12 = simpleTrackProvider8.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext12);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider14 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext15 = null;
    simpleTrackProvider14.setLastTrack(audioTrackContext15);
    int i17 = simpleTrackProvider14.size();
    fredboat.audio.queue.AudioTrackContext audioTrackContext18 = simpleTrackProvider14.peek();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider19 = new fredboat.audio.queue.SimpleTrackProvider();
    boolean b20 = simpleTrackProvider19.isEmpty();
    simpleTrackProvider19.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider22 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider22.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext24 = simpleTrackProvider22.getAsListOrdered();
    simpleTrackProvider19.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext24);
    simpleTrackProvider14.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext24);
    simpleTrackProvider0.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext24);
    simpleTrackProvider0.clear();
    fredboat.audio.queue.RepeatMode repeatMode29 = simpleTrackProvider0.getRepeatMode();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    org.junit.Assert.assertTrue("'" + repeatMode6 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode6.equals(fredboat.audio.queue.RepeatMode.OFF));
    org.junit.Assert.assertTrue("'" + repeatMode7 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode7.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext24);
    org.junit.Assert.assertTrue("'" + repeatMode29 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode29.equals(fredboat.audio.queue.RepeatMode.OFF));

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test021"); }

    fredboat.db.entity.UConfig uConfig1 = new fredboat.db.entity.UConfig("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test022"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    int i1 = weatherSystemOpenWeather0.getType();
    weatherSystemOpenWeather0.setMessage((double)(-1L));
    java.lang.String str4 = weatherSystemOpenWeather0.getCountry();
    int i5 = weatherSystemOpenWeather0.getId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test023"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.fun.TextCommand textCommand16 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.command.music.seeking.RewindCommand rewindCommand18 = new fredboat.command.music.seeking.RewindCommand("", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand19 = new fredboat.command.admin.NodeAdminCommand("\u2705", str_array13);
    fredboat.command.fun.FacedeskCommand facedeskCommand20 = new fredboat.command.fun.FacedeskCommand("", "fredboat.util.BrainfuckException: \u2705", str_array13);
    fredboat.command.moderation.ConfigCommand configCommand21 = new fredboat.command.moderation.ConfigCommand("", str_array13);
    fredboat.command.admin.ReviveCommand reviveCommand22 = new fredboat.command.admin.ReviveCommand("Bot Admin", str_array13);
    fredboat.messaging.internal.Context context23 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str24 = reviveCommand22.help(context23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test024"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    weatherSystemOpenWeather0.setId((int)(short)100);
    int i3 = weatherSystemOpenWeather0.getType();
    int i4 = weatherSystemOpenWeather0.getId();
    weatherSystemOpenWeather0.setSunrise(1);
    int i7 = weatherSystemOpenWeather0.getSunset();
    weatherSystemOpenWeather0.setSunset((-1));
    weatherSystemOpenWeather0.setId((int)' ');
    weatherSystemOpenWeather0.setMessage((double)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test025"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.util.MathCommand mathCommand12 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.UnpauseCommand unpauseCommand13 = new fredboat.command.music.control.UnpauseCommand("", str_array10);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand15 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array10);
    fredboat.command.admin.ReviveCommand reviveCommand16 = new fredboat.command.admin.ReviveCommand("Bot Admin", str_array10);
    fredboat.command.util.BrainfuckCommand brainfuckCommand17 = new fredboat.command.util.BrainfuckCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand18 = new fredboat.command.admin.UnblacklistCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.perms.PermissionLevel permissionLevel19 = unblacklistCommand18.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext20 = null;
    // The following exception was thrown during execution in test generation
    try {
    unblacklistCommand18.onInvoke(commandContext20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test026"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    int i5 = blacklistEntry1.getLevel();
    long long6 = blacklistEntry1.getBlacklistedTimestamp();
    blacklistEntry1.setLevel((int)(short)10);
    long long9 = blacklistEntry1.blacklistedTimestamp;
    int i10 = blacklistEntry1.level;
    int i11 = blacklistEntry1.level;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1531610555128L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1531610555128L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test027"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.util.MathCommand mathCommand10 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.music.control.UnpauseCommand unpauseCommand11 = new fredboat.command.music.control.UnpauseCommand("", str_array8);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand12 = new fredboat.command.moderation.EnableCommandsCommand("", str_array8);
    fredboat.command.music.seeking.RewindCommand rewindCommand13 = new fredboat.command.music.seeking.RewindCommand("", str_array8);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array8);
    fredboat.perms.PermissionLevel permissionLevel15 = exitCommand14.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel16 = exitCommand14.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel15 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel15.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test028"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider3 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = simpleTrackProvider3.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = null;
    simpleTrackProvider3.setLastTrack(audioTrackContext5);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext7 = simpleTrackProvider3.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext7);
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = null;
    boolean b10 = simpleTrackProvider0.remove(audioTrackContext9);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider12 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext13 = simpleTrackProvider12.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext14 = null;
    simpleTrackProvider12.setLastTrack(audioTrackContext14);
    java.lang.Long[] long_array19 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long20 = new java.util.ArrayList<java.lang.Long>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long20, long_array19);
    simpleTrackProvider12.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long20);
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand28 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array27);
    fredboat.command.admin.ExitCommand exitCommand29 = new fredboat.command.admin.ExitCommand("hi!", str_array27);
    java.util.List<java.lang.String> list_str30 = exitCommand29.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand31 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long20, exitCommand29);
    boolean b32 = simpleTrackProvider0.isUserTrackOwner(1531609933098L, (java.util.Collection<java.lang.Long>)arraylist_long20);
    long long33 = simpleTrackProvider0.getDurationMillis();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext36 = simpleTrackProvider0.getTracksInRange((int)'#', (int)(byte)0);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext37 = simpleTrackProvider0.getAsList();
    fredboat.audio.queue.AudioTrackContext audioTrackContext38 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext38);
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext37);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test029"); }

    fredboat.util.GitRepoState gitRepoState0 = fredboat.util.GitRepoState.getGitRepositoryState();
    java.lang.String str1 = gitRepoState0.commitMessageShort;
    java.lang.String str2 = gitRepoState0.commitUserName;
    java.lang.String str3 = gitRepoState0.commitMessageFull;
    java.lang.String str4 = gitRepoState0.commitTime;
    java.lang.String str5 = gitRepoState0.commitUserName;
    java.lang.String str6 = gitRepoState0.commitTime;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test030"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.util.ServerInfoCommand serverInfoCommand12 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array9);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand13 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array9);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("en_US", str_array9);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand16 = new fredboat.command.music.control.ReshuffleCommand("\u2757", str_array9);
    fredboat.perms.PermissionLevel permissionLevel17 = reshuffleCommand16.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel18 = reshuffleCommand16.getMinimumPerms();
    fredboat.messaging.internal.Context context19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = reshuffleCommand16.help(context19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    org.junit.Assert.assertTrue("'" + permissionLevel17 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel17.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test031"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.util.AvatarCommand avatarCommand12 = new fredboat.command.util.AvatarCommand("\uD83D\uDEAA", str_array9);
    fredboat.command.fun.CatgirlCommand catgirlCommand13 = new fredboat.command.fun.CatgirlCommand("hi!", str_array9);
    fredboat.command.moderation.LanguageCommand languageCommand14 = new fredboat.command.moderation.LanguageCommand("en_US", str_array9);
    fredboat.command.music.info.ListCommand listCommand15 = new fredboat.command.music.info.ListCommand("\uD83D\uDEAA", str_array9);
    fredboat.command.admin.ReviveCommand reviveCommand16 = new fredboat.command.admin.ReviveCommand("en_US", str_array9);
    fredboat.perms.PermissionLevel permissionLevel17 = reviveCommand16.getMinimumPerms();
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = reviveCommand16.help(context18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    org.junit.Assert.assertTrue("'" + permissionLevel17 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel17.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test032"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.fun.TextCommand textCommand14 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array11);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("\u2705", str_array11);
    fredboat.command.maintenance.GetIdCommand getIdCommand17 = new fredboat.command.maintenance.GetIdCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand18 = new fredboat.command.moderation.EnableCommandsCommand("fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand19 = new fredboat.command.music.control.RepeatCommand("fredboat.util.BrainfuckException: hi!", str_array11);
    fredboat.commandmeta.abs.CommandContext commandContext20 = null;
    // The following exception was thrown during execution in test generation
    try {
    repeatCommand19.onInvoke(commandContext20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test033"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    int i1 = weatherOpenWeather0.getId();
    weatherOpenWeather0.setId((int)(byte)100);
    weatherOpenWeather0.setIcon("");
    weatherOpenWeather0.setId((int)(short)-1);
    java.lang.String str8 = weatherOpenWeather0.getMain();
    java.lang.String str9 = weatherOpenWeather0.getDescription();
    java.lang.String str10 = weatherOpenWeather0.getDescription();
    weatherOpenWeather0.setDescription("fredboat.util.BrainfuckException: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test034"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("", str_array10);
    fredboat.command.music.control.LeaveCommand leaveCommand12 = new fredboat.command.music.control.LeaveCommand("hi!", str_array10);
    fredboat.command.moderation.LanguageCommand languageCommand13 = new fredboat.command.moderation.LanguageCommand("DJ", str_array10);
    fredboat.command.admin.BotRestartCommand botRestartCommand14 = new fredboat.command.admin.BotRestartCommand("en_US", str_array10);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand15 = new fredboat.command.fun.RemoteFileCommand("fredboat.util.BrainfuckException: hi!", "User", str_array10);
    fredboat.command.util.ServerInfoCommand serverInfoCommand16 = new fredboat.command.util.ServerInfoCommand("Bot Admin", str_array10);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand17 = new fredboat.command.music.control.PlaySplitCommand("fredboat.util.rest.APILimitException: en_US", str_array10);
    fredboat.perms.PermissionLevel permissionLevel18 = playSplitCommand17.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.USER + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.USER));

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test035"); }

    fredboat.audio.queue.PlaylistInfo.Source source4 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo5 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source4);
    fredboat.audio.queue.PlaylistInfo playlistInfo6 = new fredboat.audio.queue.PlaylistInfo(0, "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", source4);
    int i7 = playlistInfo6.getTotalTracks();
    java.lang.String str8 = playlistInfo6.getName();
    playlistInfo6.setName("fredboat.util.BrainfuckException: \u2705");
    java.lang.String str11 = playlistInfo6.getName();
    org.junit.Assert.assertTrue("'" + source4 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source4.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org"+ "'", str8.equals("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "fredboat.util.BrainfuckException: \u2705"+ "'", str11.equals("fredboat.util.BrainfuckException: \u2705"));

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test036"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.fun.TextCommand textCommand18 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array15);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand19 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand20 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array15);
    fredboat.command.moderation.ConfigCommand configCommand21 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.fun.HugCommand hugCommand22 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array15);
    fredboat.command.admin.EvalCommand evalCommand23 = new fredboat.command.admin.EvalCommand("qua, 31 dez 1969, 09:00 PM", str_array15);
    fredboat.command.maintenance.NodesCommand nodesCommand24 = new fredboat.command.maintenance.NodesCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array15);
    fredboat.command.admin.TestCommand testCommand25 = new fredboat.command.admin.TestCommand("DJ", str_array15);
    // The following exception was thrown during execution in test generation
    try {
    fredboat.command.fun.DanceCommand danceCommand26 = new fredboat.command.fun.DanceCommand("\u274C", str_array15);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test037"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.util.MathCommand mathCommand11 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.UnpauseCommand unpauseCommand12 = new fredboat.command.music.control.UnpauseCommand("", str_array9);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand13 = new fredboat.command.moderation.EnableCommandsCommand("", str_array9);
    fredboat.command.music.seeking.RewindCommand rewindCommand14 = new fredboat.command.music.seeking.RewindCommand("", str_array9);
    fredboat.command.music.seeking.RewindCommand rewindCommand15 = new fredboat.command.music.seeking.RewindCommand("en_US", str_array9);
    fredboat.perms.PermissionLevel permissionLevel16 = rewindCommand15.getMinimumPerms();
    java.util.List<java.lang.String> list_str17 = guildPermissions0.getFromEnum(permissionLevel16);
    java.util.List<java.lang.String> list_str18 = guildPermissions0.getUserList();
    java.util.List<java.lang.String> list_str19 = guildPermissions0.getDjList();
    java.lang.String[] str_array24 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand25 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array24);
    fredboat.command.maintenance.PingCommand pingCommand26 = new fredboat.command.maintenance.PingCommand("\u274C", str_array24);
    fredboat.command.music.info.HistoryCommand historyCommand27 = new fredboat.command.music.info.HistoryCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array24);
    java.util.List<java.lang.String> list_str28 = historyCommand27.aliases;
    guildPermissions0.setDjList(list_str28);
    java.util.List<java.lang.String> list_str30 = guildPermissions0.getDjList();
    fredboat.db.entity.GuildPermissions guildPermissions31 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions32 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str33 = guildPermissions32.getDjList();
    guildPermissions31.setUserList(list_str33);
    java.lang.String[] str_array39 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand40 = new fredboat.command.music.control.RepeatCommand("", str_array39);
    fredboat.command.music.control.LeaveCommand leaveCommand41 = new fredboat.command.music.control.LeaveCommand("hi!", str_array39);
    fredboat.perms.PermissionLevel permissionLevel42 = leaveCommand41.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel43 = leaveCommand41.getMinimumPerms();
    java.util.List<java.lang.String> list_str44 = guildPermissions31.getFromEnum(permissionLevel43);
    java.util.List<java.lang.String> list_str45 = guildPermissions31.getAdminList();
    java.lang.String[] str_array53 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand54 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array53);
    fredboat.command.util.MathCommand mathCommand55 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array53);
    fredboat.command.music.control.UnpauseCommand unpauseCommand56 = new fredboat.command.music.control.UnpauseCommand("", str_array53);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand57 = new fredboat.command.moderation.EnableCommandsCommand("", str_array53);
    fredboat.command.music.seeking.RewindCommand rewindCommand58 = new fredboat.command.music.seeking.RewindCommand("", str_array53);
    fredboat.perms.PermissionLevel permissionLevel59 = rewindCommand58.getMinimumPerms();
    fredboat.db.entity.GuildPermissions guildPermissions60 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions61 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str62 = guildPermissions61.getDjList();
    guildPermissions60.setUserList(list_str62);
    guildPermissions31.setFromEnum(permissionLevel59, list_str62);
    java.util.List<java.lang.String> list_str65 = guildPermissions31.getUserList();
    fredboat.db.entity.GuildPermissions guildPermissions66 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions67 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str68 = guildPermissions67.getDjList();
    guildPermissions66.setUserList(list_str68);
    java.lang.String[] str_array74 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand75 = new fredboat.command.music.control.RepeatCommand("", str_array74);
    fredboat.command.music.control.LeaveCommand leaveCommand76 = new fredboat.command.music.control.LeaveCommand("hi!", str_array74);
    fredboat.perms.PermissionLevel permissionLevel77 = leaveCommand76.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel78 = leaveCommand76.getMinimumPerms();
    java.util.List<java.lang.String> list_str79 = guildPermissions66.getFromEnum(permissionLevel78);
    java.util.List<java.lang.String> list_str80 = guildPermissions66.getAdminList();
    guildPermissions31.setUserList(list_str80);
    guildPermissions0.setUserList(list_str80);
    guildPermissions0.setId("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array39);
    org.junit.Assert.assertTrue("'" + permissionLevel42 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel42.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel43 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel43.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    org.junit.Assert.assertTrue("'" + permissionLevel59 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel59.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array74);
    org.junit.Assert.assertTrue("'" + permissionLevel77 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel77.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel78 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel78.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str80);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test038"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand8 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array7);
    fredboat.command.admin.ExitCommand exitCommand9 = new fredboat.command.admin.ExitCommand("hi!", str_array7);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand10 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array7);
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand("\uD83D\uDEAA", str_array7);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand12 = new fredboat.command.music.control.ReshuffleCommand("\u2757", str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test039"); }

    fredboat.util.rest.Weather weather0 = null;
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!", "Provided by OpenWeatherMap.org" };
    fredboat.command.music.control.PauseCommand pauseCommand12 = new fredboat.command.music.control.PauseCommand("\uD83D\uDCDD", str_array11);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array11);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand15 = new fredboat.command.music.control.ReshuffleCommand("\u2757", str_array11);
    fredboat.command.fun.HugCommand hugCommand16 = new fredboat.command.fun.HugCommand("en_US", "Bot Owner", str_array11);
    fredboat.command.util.WeatherCommand weatherCommand17 = new fredboat.command.util.WeatherCommand(weather0, "\u2757", str_array11);
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = weatherCommand17.help(context18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test040"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand12 = new fredboat.command.music.control.RepeatCommand("", str_array9);
    fredboat.command.util.BrainfuckCommand brainfuckCommand13 = new fredboat.command.util.BrainfuckCommand("", str_array9);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("fredboat.util.BrainfuckException: \u2705", str_array9);
    fredboat.command.util.WeatherCommand weatherCommand15 = new fredboat.command.util.WeatherCommand(weather1, "en_US", str_array9);
    fredboat.command.music.info.ListCommand listCommand16 = new fredboat.command.music.info.ListCommand("Base", str_array9);
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    listCommand16.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test041"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.lang.Long[] long_array5 = new java.lang.Long[] { 1531609931147L };
    java.util.ArrayList<java.lang.Long> arraylist_long6 = new java.util.ArrayList<java.lang.Long>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long6, long_array5);
    simpleTrackProvider0.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long6);
    simpleTrackProvider0.clear();
    boolean b10 = simpleTrackProvider0.isShuffle();
    simpleTrackProvider0.clear();
    fredboat.audio.queue.AudioTrackContext audioTrackContext12 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test042"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather1 = openWeatherCurrent0.getSys();
    openWeatherCurrent0.setId((int)(short)1);
    java.util.List<fredboat.util.rest.models.weather.WeatherOpenWeather> list_weatherOpenWeather4 = openWeatherCurrent0.getWeather();
    java.lang.String str5 = openWeatherCurrent0.getDataProviderString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_weatherOpenWeather4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str5.equals("Provided by OpenWeatherMap.org"));

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test043"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.control.RepeatCommand repeatCommand8 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array6);
    fredboat.command.music.seeking.RestartCommand restartCommand9 = new fredboat.command.music.seeking.RestartCommand("", str_array6);
    fredboat.command.music.control.JoinCommand joinCommand10 = new fredboat.command.music.control.JoinCommand("https://i.imgur.com/YqZuqEB.jpg", str_array6);
    fredboat.command.maintenance.NodesCommand nodesCommand11 = new fredboat.command.maintenance.NodesCommand("fredboat.util.BrainfuckException: ", str_array6);
    fredboat.commandmeta.abs.CommandContext commandContext12 = null;
    // The following exception was thrown during execution in test generation
    try {
    nodesCommand11.onInvoke(commandContext12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test044"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.fun.TextCommand textCommand14 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array11);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array11);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand16 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array11);
    fredboat.command.moderation.ConfigCommand configCommand17 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array11);
    fredboat.command.fun.HugCommand hugCommand18 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array11);
    java.io.File file19 = hugCommand18.getRandomFile();
    java.io.File file20 = hugCommand18.getRandomFile();
    java.io.File file21 = hugCommand18.getRandomFile();
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = hugCommand18.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file21);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test045"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array11);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.fun.RollCommand rollCommand17 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\u2705", str_array11);
    fredboat.command.fun.CatgirlCommand catgirlCommand18 = new fredboat.command.fun.CatgirlCommand("hi!", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand19 = new fredboat.command.music.info.HistoryCommand("Provided by OpenWeatherMap.org", str_array11);
    fredboat.messaging.internal.Context context20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = historyCommand19.help(context20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test046"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array8);
    fredboat.command.util.CommandsCommand commandsCommand11 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.PingCommand pingCommand12 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array8);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand("https://i.imgur.com/YqZuqEB.jpg", str_array8);
    fredboat.command.music.seeking.RewindCommand rewindCommand15 = new fredboat.command.music.seeking.RewindCommand("DJ", str_array8);
    fredboat.perms.PermissionLevel permissionLevel16 = rewindCommand15.getMinimumPerms();
    int i17 = permissionLevel16.getLevel();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test047"); }

    fredboat.util.GitRepoState gitRepoState0 = fredboat.util.GitRepoState.getGitRepositoryState();
    java.lang.String str1 = gitRepoState0.commitMessageShort;
    java.lang.String str2 = gitRepoState0.commitUserName;
    java.lang.String str3 = gitRepoState0.commitMessageFull;
    java.lang.String str4 = gitRepoState0.commitTime;
    java.lang.String str5 = gitRepoState0.commitUserName;
    java.lang.String str6 = gitRepoState0.commitUserEmail;
    java.lang.String str7 = gitRepoState0.commitMessageFull;
    java.lang.String str8 = gitRepoState0.commitMessageShort;
    java.lang.String str9 = gitRepoState0.commitTime;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test048"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    java.lang.String str3 = openWeatherCurrent0.getLocation();
    java.lang.String str4 = openWeatherCurrent0.getFormattedDate();
    java.lang.String str5 = openWeatherCurrent0.getFormattedDate();
    java.lang.String str6 = openWeatherCurrent0.getDataProviderIcon();
    java.lang.String str7 = openWeatherCurrent0.getDataProviderIcon();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str4.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str5.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str6.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str7.equals("https://i.imgur.com/YqZuqEB.jpg"));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test049"); }

    fredboat.util.BrainfuckException brainfuckException2 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    java.lang.Throwable[] throwable_array3 = brainfuckException2.getSuppressed();
    fredboat.commandmeta.MessagingException messagingException4 = new fredboat.commandmeta.MessagingException("DJ", (java.lang.Throwable)brainfuckException2);
    java.lang.String str5 = brainfuckException2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org"+ "'", str5.equals("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org"));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test050"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather1 = openWeatherCurrent0.getSys();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderIcon();
    int i3 = openWeatherCurrent0.getDatetime();
    java.lang.String str4 = openWeatherCurrent0.getDataProviderIcon();
    java.lang.String str5 = openWeatherCurrent0.getWeatherDescription();
    java.lang.String str6 = openWeatherCurrent0.getDataProviderIcon();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str2.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str4.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str6.equals("https://i.imgur.com/YqZuqEB.jpg"));

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test051"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry(1531609962822L);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test052"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.music.info.ListCommand listCommand7 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array5);
    java.util.List<java.lang.String> list_str8 = listCommand7.aliases;
    guildPermissions1.setDjList(list_str8);
    guildPermissions0.setUserList(list_str8);
    java.util.List<java.lang.String> list_str11 = guildPermissions0.getDjList();
    java.util.List<java.lang.String> list_str12 = guildPermissions0.getUserList();
    java.util.List<java.lang.String> list_str13 = guildPermissions0.getDjList();
    java.util.List<java.lang.String> list_str14 = guildPermissions0.getAdminList();
    java.util.List<java.lang.String> list_str15 = guildPermissions0.getAdminList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str15);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test053"); }

    java.lang.String[] str_array14 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand15 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.admin.ExitCommand exitCommand16 = new fredboat.command.admin.ExitCommand("hi!", str_array14);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand17 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array14);
    fredboat.command.maintenance.VersionCommand versionCommand18 = new fredboat.command.maintenance.VersionCommand("\uD83D\uDEAA", str_array14);
    fredboat.command.fun.FacedeskCommand facedeskCommand19 = new fredboat.command.fun.FacedeskCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", "", str_array14);
    fredboat.command.admin.UpdateCommand updateCommand20 = new fredboat.command.admin.UpdateCommand("\uD83D\uDCDD", str_array14);
    fredboat.command.fun.TextCommand textCommand21 = new fredboat.command.fun.TextCommand("fredboat.util.rest.APILimitException: en_US", "en_US", str_array14);
    fredboat.command.music.control.ShuffleCommand shuffleCommand22 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.fun.TextCommand textCommand23 = new fredboat.command.fun.TextCommand("", "en_US", str_array14);
    textCommand23.msg = "";
    fredboat.messaging.internal.Context context26 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str27 = textCommand23.help(context26);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test054"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.util.AvatarCommand avatarCommand12 = new fredboat.command.util.AvatarCommand("\uD83D\uDEAA", str_array9);
    fredboat.command.util.BrainfuckCommand brainfuckCommand13 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.maintenance.GetIdCommand getIdCommand14 = new fredboat.command.maintenance.GetIdCommand("\uD83D\uDEAA", str_array9);
    fredboat.command.music.seeking.RewindCommand rewindCommand15 = new fredboat.command.music.seeking.RewindCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.maintenance.GetIdCommand getIdCommand16 = new fredboat.command.maintenance.GetIdCommand("qua, 31 dez 1969, 09:00 PM", str_array9);
    fredboat.messaging.internal.Context context17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = getIdCommand16.help(context17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test055"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    boolean b2 = guildConfig0.isTrackAnnounce();
    java.lang.String str3 = guildConfig0.getLang();
    guildConfig0.setLang("Bot Admin");
    boolean b6 = guildConfig0.isAutoResume();
    boolean b7 = guildConfig0.isTrackAnnounce();
    boolean b8 = guildConfig0.isAutoResume();
    guildConfig0.setLang("fredboat.util.BrainfuckException: \uD83D\uDEAA");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "en_US"+ "'", str3.equals("en_US"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test056"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    openWeatherCurrent0.setId((int)(byte)100);
    int i3 = openWeatherCurrent0.getVisibility();
    openWeatherCurrent0.setId(10000);
    java.lang.String str6 = openWeatherCurrent0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test057"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    boolean b2 = guildConfig0.isTrackAnnounce();
    guildConfig0.setAutoResume(false);
    guildConfig0.setId("https://i.imgur.com/YqZuqEB.jpg");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test058"); }

    fredboat.util.GitRepoState gitRepoState1 = new fredboat.util.GitRepoState("fredboat.commandmeta.MessagingException: \uD83D\uDEAA");
    java.lang.String str2 = gitRepoState1.commitUserEmail;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test059"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider3 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = simpleTrackProvider3.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = null;
    simpleTrackProvider3.setLastTrack(audioTrackContext5);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext7 = simpleTrackProvider3.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext7);
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = null;
    boolean b10 = simpleTrackProvider0.remove(audioTrackContext9);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider12 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext13 = simpleTrackProvider12.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext14 = null;
    simpleTrackProvider12.setLastTrack(audioTrackContext14);
    java.lang.Long[] long_array19 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long20 = new java.util.ArrayList<java.lang.Long>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long20, long_array19);
    simpleTrackProvider12.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long20);
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand28 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array27);
    fredboat.command.admin.ExitCommand exitCommand29 = new fredboat.command.admin.ExitCommand("hi!", str_array27);
    java.util.List<java.lang.String> list_str30 = exitCommand29.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand31 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long20, exitCommand29);
    boolean b32 = simpleTrackProvider0.isUserTrackOwner(1531609933098L, (java.util.Collection<java.lang.Long>)arraylist_long20);
    long long33 = simpleTrackProvider0.getDurationMillis();
    fredboat.audio.queue.AudioTrackContext audioTrackContext34 = simpleTrackProvider0.peek();
    fredboat.audio.queue.RepeatMode repeatMode35 = simpleTrackProvider0.getRepeatMode();
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long33 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext34);
    org.junit.Assert.assertTrue("'" + repeatMode35 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode35.equals(fredboat.audio.queue.RepeatMode.SINGLE));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test060"); }

    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode0 = fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG;
    fredboat.util.rest.models.weather.WeatherError weatherError1 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    java.lang.String str2 = weatherError1.getFormattedDate();
    java.lang.String str3 = weatherError1.getFormattedDate();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode4 = weatherError1.errorType();
    java.lang.String str5 = weatherError1.getLocation();
    java.lang.String str6 = weatherError1.getDataProviderString();
    java.lang.String str7 = weatherError1.getThumbnailUrl();
    boolean b8 = weatherError1.isError();
    org.junit.Assert.assertTrue("'" + errorCode0 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode0.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    org.junit.Assert.assertTrue("'" + errorCode4 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode4.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test061"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)'4');
    blacklistEntry1.setRateLimitReached((-1));

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test062"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.moderation.LanguageCommand languageCommand7 = new fredboat.command.moderation.LanguageCommand("", str_array5);
    fredboat.command.music.control.UnpauseCommand unpauseCommand8 = new fredboat.command.music.control.UnpauseCommand("qua, 31 dez 1969, 09:00 PM", str_array5);
    fredboat.command.util.MathCommand mathCommand9 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array5);
    fredboat.messaging.internal.Context context10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = mathCommand9.help(context10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test063"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand13 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.music.seeking.RestartCommand restartCommand14 = new fredboat.command.music.seeking.RestartCommand("", str_array11);
    fredboat.command.music.control.JoinCommand joinCommand15 = new fredboat.command.music.control.JoinCommand("https://i.imgur.com/YqZuqEB.jpg", str_array11);
    fredboat.command.maintenance.NodesCommand nodesCommand16 = new fredboat.command.maintenance.NodesCommand("fredboat.util.BrainfuckException: ", str_array11);
    fredboat.command.music.control.JoinCommand joinCommand17 = new fredboat.command.music.control.JoinCommand("qua, 31 dez 1969, 09:00 PM", str_array11);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand18 = new fredboat.command.music.control.PlaySplitCommand("DJ", str_array11);
    fredboat.command.fun.PatCommand patCommand19 = new fredboat.command.fun.PatCommand("http://i.imgur.com/NqyOqnj.gif", "https://i.imgur.com/YqZuqEB.jpg", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand20 = new fredboat.command.util.ServerInfoCommand("\u274C", str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test064"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.id;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    long long8 = blacklistEntry1.rateLimitReachedTimestamp;
    blacklistEntry1.id = (byte)1;
    long long11 = blacklistEntry1.id;
    blacklistEntry1.level = '#';
    // The following exception was thrown during execution in test generation
    try {
    blacklistEntry1.setId("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: \u2705");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 1L);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test065"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand8 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array7);
    fredboat.command.admin.ExitCommand exitCommand9 = new fredboat.command.admin.ExitCommand("hi!", str_array7);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand10 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array7);
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand("\uD83D\uDEAA", str_array7);
    fredboat.command.music.control.JoinCommand joinCommand12 = new fredboat.command.music.control.JoinCommand("\u2705", str_array7);
    fredboat.perms.PermissionLevel permissionLevel13 = joinCommand12.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext14 = null;
    // The following exception was thrown during execution in test generation
    try {
    joinCommand12.onInvoke(commandContext14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    org.junit.Assert.assertTrue("'" + permissionLevel13 + "' != '" + fredboat.perms.PermissionLevel.USER + "'", permissionLevel13.equals(fredboat.perms.PermissionLevel.USER));

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test066"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand7 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.admin.ExitCommand exitCommand8 = new fredboat.command.admin.ExitCommand("hi!", str_array6);
    fredboat.command.music.info.ListCommand listCommand9 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array6);
    fredboat.command.music.control.PauseCommand pauseCommand10 = new fredboat.command.music.control.PauseCommand("fredboat.util.BrainfuckException: hi!", str_array6);
    fredboat.perms.PermissionLevel permissionLevel11 = pauseCommand10.getMinimumPerms();
    fredboat.messaging.internal.Context context12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str13 = pauseCommand10.help(context12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    org.junit.Assert.assertTrue("'" + permissionLevel11 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel11.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test067"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    boolean b3 = simpleTrackProvider0.isEmpty();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange(5, (int)' ');
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext9 = simpleTrackProvider0.getTracksInRange(2, (-1));
    fredboat.audio.queue.AudioTrackContext audioTrackContext10 = null;
    boolean b11 = simpleTrackProvider0.remove(audioTrackContext10);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext12 = simpleTrackProvider0.getAsList();
    java.util.Collection<fredboat.audio.queue.AudioTrackContext> collection_audioTrackContext13 = null;
    // The following exception was thrown during execution in test generation
    try {
    simpleTrackProvider0.addAll(collection_audioTrackContext13);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext12);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test068"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.fun.TextCommand textCommand12 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array9);
    fredboat.command.util.WeatherCommand weatherCommand13 = new fredboat.command.util.WeatherCommand(weather1, "Bot Admin", str_array9);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    java.lang.String str15 = nodeAdminCommand14.name;
    fredboat.commandmeta.abs.CommandContext commandContext16 = null;
    // The following exception was thrown during execution in test generation
    try {
    nodeAdminCommand14.onInvoke(commandContext16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..."+ "'", str15.equals("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..."));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test069"); }

    java.lang.String[] str_array1 = null;
    // The following exception was thrown during execution in test generation
    try {
    fredboat.command.music.control.UnpauseCommand unpauseCommand2 = new fredboat.command.music.control.UnpauseCommand("fredboat.util.BrainfuckException: \u2705", str_array1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test070"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array12);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array12);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand17 = new fredboat.command.moderation.EnableCommandsCommand("\u2705", str_array12);
    fredboat.command.fun.RandomImageCommand randomImageCommand18 = new fredboat.command.fun.RandomImageCommand("qua, 31 dez 1969, 09:00 PM", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand19 = new fredboat.command.music.control.PlaySplitCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.maintenance.GetIdCommand getIdCommand20 = new fredboat.command.maintenance.GetIdCommand("\u2757", str_array12);
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    getIdCommand20.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test071"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array10);
    fredboat.command.music.control.RepeatCommand repeatCommand12 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.util.CommandsCommand commandsCommand13 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.maintenance.PingCommand pingCommand14 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array10);
    fredboat.command.music.info.ListCommand listCommand15 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand("https://i.imgur.com/YqZuqEB.jpg", str_array10);
    fredboat.command.music.seeking.RestartCommand restartCommand17 = new fredboat.command.music.seeking.RestartCommand("Base", str_array10);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand18 = new fredboat.command.music.control.ReshuffleCommand("fredboat.util.rest.APILimitException: en_US", str_array10);
    fredboat.command.util.ServerInfoCommand serverInfoCommand19 = new fredboat.command.util.ServerInfoCommand("", str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test072"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array11);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.ExitCommand exitCommand17 = new fredboat.command.admin.ExitCommand("\u274C", str_array11);
    fredboat.command.util.WeatherCommand weatherCommand18 = new fredboat.command.util.WeatherCommand(weather1, "https://i.imgur.com/YqZuqEB.jpg", str_array11);
    fredboat.command.admin.ExitCommand exitCommand19 = new fredboat.command.admin.ExitCommand("fredboat.util.BrainfuckException: :\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test073"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    weatherOpenWeather0.setId((int)(byte)0);
    weatherOpenWeather0.setMain("hi!");
    java.lang.String str5 = weatherOpenWeather0.getMain();
    java.lang.String str6 = weatherOpenWeather0.getIcon();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!"+ "'", str5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test074"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    boolean b1 = openWeatherCurrent0.isError();
    int i2 = openWeatherCurrent0.getId();
    java.lang.String str3 = openWeatherCurrent0.getThumbnailUrl();
    java.lang.String str4 = openWeatherCurrent0.getDataProviderIcon();
    boolean b5 = openWeatherCurrent0.isError();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str4.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test075"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("fredboat.util.BrainfuckException: \uD83D\uDEAA");
    guildConfig1.setAutoResume(false);
    java.lang.String str4 = guildConfig1.getGuildId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "fredboat.util.BrainfuckException: \uD83D\uDEAA"+ "'", str4.equals("fredboat.util.BrainfuckException: \uD83D\uDEAA"));

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test076"); }

    java.lang.String[] str_array9 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand10 = new fredboat.command.fun.HugCommand("", "\u274C", str_array9);
    fredboat.command.admin.ReviveCommand reviveCommand11 = new fredboat.command.admin.ReviveCommand("Bot Admin", str_array9);
    fredboat.command.music.seeking.RewindCommand rewindCommand12 = new fredboat.command.music.seeking.RewindCommand("", str_array9);
    fredboat.messaging.internal.Context context13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = rewindCommand12.help(context13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test077"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand15 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand16 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.VersionCommand versionCommand17 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand18 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.music.control.JoinCommand joinCommand19 = new fredboat.command.music.control.JoinCommand("\uD83D\uDEAA", str_array12);
    fredboat.command.moderation.ConfigCommand configCommand20 = new fredboat.command.moderation.ConfigCommand("\u2757", str_array12);
    fredboat.command.music.control.JoinCommand joinCommand21 = new fredboat.command.music.control.JoinCommand("fredboat.util.BrainfuckException: \u2705", str_array12);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand22 = new fredboat.command.admin.NodeAdminCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.messaging.internal.Context context23 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str24 = nodeAdminCommand22.help(context23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test078"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    openWeatherCurrent0.setId((int)(byte)100);
    int i3 = openWeatherCurrent0.getVisibility();
    java.lang.String str4 = openWeatherCurrent0.getThumbnailUrl();
    int i5 = openWeatherCurrent0.getDatetime();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather6 = openWeatherCurrent0.getClouds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather6);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test079"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "hi!", "Provided by OpenWeatherMap.org" };
    fredboat.command.music.control.PauseCommand pauseCommand7 = new fredboat.command.music.control.PauseCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand8 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array6);
    fredboat.command.util.CommandsCommand commandsCommand9 = new fredboat.command.util.CommandsCommand("\u2757", str_array6);
    fredboat.messaging.internal.Context context10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = commandsCommand9.help(context10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test080"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array11);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.info.ListCommand listCommand17 = new fredboat.command.music.info.ListCommand("\u2705", str_array11);
    fredboat.command.util.MathCommand mathCommand18 = new fredboat.command.util.MathCommand("", str_array11);
    fredboat.command.util.CommandsCommand commandsCommand19 = new fredboat.command.util.CommandsCommand("Base", str_array11);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand20 = new fredboat.command.music.control.ReshuffleCommand("fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array11);
    fredboat.messaging.internal.Context context21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str22 = reshuffleCommand20.help(context21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test081"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.maintenance.PingCommand pingCommand9 = new fredboat.command.maintenance.PingCommand("\u274C", str_array7);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array7);
    fredboat.command.admin.ExitCommand exitCommand11 = new fredboat.command.admin.ExitCommand("", str_array7);
    fredboat.command.moderation.ConfigCommand configCommand12 = new fredboat.command.moderation.ConfigCommand("\u274C", str_array7);
    fredboat.command.maintenance.GetIdCommand getIdCommand13 = new fredboat.command.maintenance.GetIdCommand("fredboat.util.BrainfuckException: hi!", str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test082"); }

    fredboat.util.rest.APILimitException aPILimitException1 = new fredboat.util.rest.APILimitException("fredboat.commandmeta.MessagingException: ");

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test083"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array7);
    fredboat.command.music.control.ShuffleCommand shuffleCommand9 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array7);
    fredboat.command.maintenance.GetIdCommand getIdCommand10 = new fredboat.command.maintenance.GetIdCommand("Provided by OpenWeatherMap.org", str_array7);
    fredboat.command.fun.FacedeskCommand facedeskCommand11 = new fredboat.command.fun.FacedeskCommand("Provided by OpenWeatherMap.org", "Bot Owner", str_array7);
    java.io.File file12 = facedeskCommand11.getRandomFile();
    java.lang.String str13 = facedeskCommand11.getRandomImageUrl();
    fredboat.commandmeta.abs.CommandContext commandContext14 = null;
    // The following exception was thrown during execution in test generation
    try {
    facedeskCommand11.onInvoke(commandContext14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "http://i.imgur.com/NqyOqnj.gif"+ "'", str13.equals("http://i.imgur.com/NqyOqnj.gif"));

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test084"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    double d3 = weatherMainOpenWeather0.getTempMin();
    double d4 = weatherMainOpenWeather0.getTempMin();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d4 == 10.0d);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test085"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand12 = new fredboat.command.music.control.RepeatCommand("", str_array9);
    fredboat.command.util.BrainfuckCommand brainfuckCommand13 = new fredboat.command.util.BrainfuckCommand("", str_array9);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("fredboat.util.BrainfuckException: \u2705", str_array9);
    fredboat.command.util.WeatherCommand weatherCommand15 = new fredboat.command.util.WeatherCommand(weather1, "en_US", str_array9);
    fredboat.command.music.info.ListCommand listCommand16 = new fredboat.command.music.info.ListCommand("Base", str_array9);
    fredboat.messaging.internal.Context context17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = listCommand16.help(context17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test086"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("hi!", str_array13);
    fredboat.command.music.info.ListCommand listCommand16 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand17 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array13);
    fredboat.command.fun.PatCommand patCommand18 = new fredboat.command.fun.PatCommand("", "", str_array13);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand19 = new fredboat.command.admin.UnblacklistCommand("hi!", str_array13);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand20 = new fredboat.command.music.control.ReshuffleCommand("\uD83D\uDEAA", str_array13);
    fredboat.command.admin.ReviveCommand reviveCommand21 = new fredboat.command.admin.ReviveCommand("\uD83D\uDEAA", str_array13);
    fredboat.command.admin.EvalCommand evalCommand22 = new fredboat.command.admin.EvalCommand("DJ", str_array13);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand23 = new fredboat.command.moderation.EnableCommandsCommand("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test087"); }

    java.lang.String[] str_array1 = null;
    // The following exception was thrown during execution in test generation
    try {
    fredboat.command.admin.UpdateCommand updateCommand2 = new fredboat.command.admin.UpdateCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test088"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.id;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    long long8 = blacklistEntry1.rateLimitReachedTimestamp;
    long long9 = blacklistEntry1.rateLimitReachedTimestamp;
    // The following exception was thrown during execution in test generation
    try {
    blacklistEntry1.setId("Admin");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 100L);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test089"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    weatherSystemOpenWeather0.setId((int)(short)100);
    int i3 = weatherSystemOpenWeather0.getType();
    weatherSystemOpenWeather0.setSunrise(100);
    java.lang.String str6 = weatherSystemOpenWeather0.getCountry();
    int i7 = weatherSystemOpenWeather0.getSunrise();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test090"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.util.MathCommand mathCommand12 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.UnpauseCommand unpauseCommand13 = new fredboat.command.music.control.UnpauseCommand("", str_array10);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand15 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array10);
    fredboat.command.music.control.RepeatCommand repeatCommand16 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array10);
    fredboat.command.admin.TestCommand testCommand17 = new fredboat.command.admin.TestCommand("", str_array10);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand18 = new fredboat.command.admin.UnblacklistCommand("", str_array10);
    fredboat.perms.PermissionLevel permissionLevel19 = unblacklistCommand18.getMinimumPerms();
    fredboat.messaging.internal.Context context20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = unblacklistCommand18.help(context20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test091"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array12 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand13 = new fredboat.command.fun.HugCommand("", "\u274C", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("qua, 31 dez 1969, 09:00 PM", str_array12);
    fredboat.command.maintenance.NodesCommand nodesCommand15 = new fredboat.command.maintenance.NodesCommand("", str_array12);
    fredboat.command.util.WeatherCommand weatherCommand16 = new fredboat.command.util.WeatherCommand(weather1, "https://i.imgur.com/YqZuqEB.jpg", str_array12);
    fredboat.command.music.seeking.RestartCommand restartCommand17 = new fredboat.command.music.seeking.RestartCommand("fredboat.util.BrainfuckException: \u2705", str_array12);
    fredboat.commandmeta.abs.CommandContext commandContext18 = null;
    // The following exception was thrown during execution in test generation
    try {
    restartCommand17.onInvoke(commandContext18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test092"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand12 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array11);
    fredboat.command.admin.BotRestartCommand botRestartCommand13 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand("fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.command.util.BrainfuckCommand brainfuckCommand15 = new fredboat.command.util.BrainfuckCommand("http://i.imgur.com/NqyOqnj.gif", str_array11);
    fredboat.commandmeta.abs.CommandContext commandContext16 = null;
    // The following exception was thrown during execution in test generation
    try {
    brainfuckCommand15.onInvoke(commandContext16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test093"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand7 = new fredboat.command.music.control.RepeatCommand("", str_array6);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array6);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand9 = new fredboat.command.fun.RemoteFileCommand("\u274C", "Bot Admin", str_array6);
    remoteFileCommand9.url = "\u274C";
    remoteFileCommand9.url = "fredboat.util.BrainfuckException: ";
    remoteFileCommand9.url = "\u2757";
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test094"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider2 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode3 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider2.setRepeatMode(repeatMode3);
    boolean b5 = simpleTrackProvider2.isEmpty();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext8 = simpleTrackProvider2.getTracksInRange(5, (int)' ');
    simpleTrackProvider0.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext8);
    simpleTrackProvider0.skipped();
    fredboat.audio.queue.RepeatMode repeatMode11 = fredboat.audio.queue.RepeatMode.ALL;
    simpleTrackProvider0.setRepeatMode(repeatMode11);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext13 = simpleTrackProvider0.getAsList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    org.junit.Assert.assertTrue("'" + repeatMode3 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode3.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext8);
    org.junit.Assert.assertTrue("'" + repeatMode11 + "' != '" + fredboat.audio.queue.RepeatMode.ALL + "'", repeatMode11.equals(fredboat.audio.queue.RepeatMode.ALL));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext13);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test095"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.getId();
    blacklistEntry1.setLevel(0);
    blacklistEntry1.setRateLimitReached((int)(byte)-1);
    blacklistEntry1.rateLimitReachedTimestamp = 1531610018747L;
    int i12 = blacklistEntry1.getLevel();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test096"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.rateLimitReachedTimestamp;
    blacklistEntry1.setRateLimitReached(97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 100L);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test097"); }

    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode0 = fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG;
    fredboat.util.rest.models.weather.WeatherError weatherError1 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    java.lang.String str2 = weatherError1.getFormattedDate();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode3 = weatherError1.errorType();
    java.lang.String str4 = weatherError1.getDataProviderIcon();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode5 = weatherError1.errorType();
    java.lang.String str6 = weatherError1.getWeatherDescription();
    java.lang.String str7 = weatherError1.getLocation();
    org.junit.Assert.assertTrue("'" + errorCode0 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode0.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    org.junit.Assert.assertTrue("'" + errorCode3 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode3.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    org.junit.Assert.assertTrue("'" + errorCode5 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode5.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test098"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array7);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("", str_array7);
    fredboat.command.fun.TextCommand textCommand11 = new fredboat.command.fun.TextCommand("hi!", "fredboat.util.BrainfuckException: \u2705", str_array7);
    fredboat.command.maintenance.NodesCommand nodesCommand12 = new fredboat.command.maintenance.NodesCommand("\uD83D\uDEAA", str_array7);
    fredboat.messaging.internal.Context context13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = nodesCommand12.help(context13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test099"); }

    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather0 = new fredboat.util.rest.models.weather.CloudsOpenWeather();
    int i1 = cloudsOpenWeather0.getAll();
    cloudsOpenWeather0.setAll(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test100"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("Base");
    boolean b2 = guildConfig1.isAutoResume();
    boolean b3 = guildConfig1.isAutoResume();
    guildConfig1.setId("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test101"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array7);
    fredboat.command.util.MathCommand mathCommand9 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array7);
    fredboat.command.music.control.UnpauseCommand unpauseCommand10 = new fredboat.command.music.control.UnpauseCommand("", str_array7);
    fredboat.command.music.control.UnpauseCommand unpauseCommand11 = new fredboat.command.music.control.UnpauseCommand("Bot Owner", str_array7);
    fredboat.command.admin.EvalCommand evalCommand12 = new fredboat.command.admin.EvalCommand("http://i.imgur.com/NqyOqnj.gif", str_array7);
    fredboat.perms.PermissionLevel permissionLevel13 = evalCommand12.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    org.junit.Assert.assertTrue("'" + permissionLevel13 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel13.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test102"); }

    fredboat.util.GitRepoState gitRepoState0 = fredboat.util.GitRepoState.getGitRepositoryState();
    java.lang.String str1 = gitRepoState0.commitId;
    java.lang.String str2 = gitRepoState0.commitTime;
    java.lang.String str3 = gitRepoState0.branch;
    java.lang.String str4 = gitRepoState0.commitUserName;
    java.lang.String str5 = gitRepoState0.commitTime;
    java.lang.String str6 = gitRepoState0.commitMessageShort;
    java.lang.String str7 = gitRepoState0.commitIdAbbrev;
    java.lang.String str8 = gitRepoState0.commitMessageFull;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test103"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand9 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array8);
    fredboat.messaging.internal.Context context10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = rollCommand9.help(context10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test104"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.admin.UpdateCommand updateCommand11 = new fredboat.command.admin.UpdateCommand("", str_array9);
    fredboat.command.fun.CatgirlCommand catgirlCommand12 = new fredboat.command.fun.CatgirlCommand("Bot Admin", str_array9);
    fredboat.command.maintenance.VersionCommand versionCommand13 = new fredboat.command.maintenance.VersionCommand("\u2705", str_array9);
    fredboat.command.fun.CatgirlCommand catgirlCommand14 = new fredboat.command.fun.CatgirlCommand("qua, 31 dez 1969, 09:00 PM", str_array9);
    fredboat.command.maintenance.PingCommand pingCommand15 = new fredboat.command.maintenance.PingCommand("User", str_array9);
    fredboat.command.music.info.ListCommand listCommand16 = new fredboat.command.music.info.ListCommand("User", str_array9);
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    listCommand16.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test105"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.music.info.ListCommand listCommand10 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.NodesCommand nodesCommand11 = new fredboat.command.maintenance.NodesCommand("", str_array8);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand12 = new fredboat.command.moderation.EnableCommandsCommand("qua, 31 dez 1969, 09:00 PM", str_array8);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand13 = new fredboat.command.admin.UnblacklistCommand("Bot Owner", str_array8);
    fredboat.command.maintenance.PingCommand pingCommand14 = new fredboat.command.maintenance.PingCommand("http://i.imgur.com/NqyOqnj.gif", str_array8);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("fredboat.commandmeta.MessagingException: ", str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test106"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.fun.TextCommand textCommand16 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand18 = new fredboat.command.moderation.EnableCommandsCommand("\u2705", str_array13);
    fredboat.command.fun.RandomImageCommand randomImageCommand19 = new fredboat.command.fun.RandomImageCommand("qua, 31 dez 1969, 09:00 PM", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.command.fun.FacedeskCommand facedeskCommand20 = new fredboat.command.fun.FacedeskCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array13);
    fredboat.command.music.seeking.RewindCommand rewindCommand21 = new fredboat.command.music.seeking.RewindCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = rewindCommand21.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test107"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange((int)(byte)10, 10000);
    fredboat.audio.queue.AudioTrackContext audioTrackContext7 = simpleTrackProvider0.peek();
    boolean b8 = simpleTrackProvider0.isEmpty();
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = simpleTrackProvider0.provideAudioTrack();
    simpleTrackProvider0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext9);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test108"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext1);
    fredboat.audio.queue.AudioTrackContext audioTrackContext3 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext3);
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = simpleTrackProvider0.provideAudioTrack();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getAsList();
    simpleTrackProvider0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test109"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.getId();
    blacklistEntry1.setLevel(0);
    blacklistEntry1.setRateLimitReached((int)(byte)100);
    long long10 = blacklistEntry1.id;
    blacklistEntry1.id = 5;
    blacklistEntry1.setRateLimitReached(4);
    blacklistEntry1.level = 100;
    long long17 = blacklistEntry1.blacklistedTimestamp;
    long long18 = blacklistEntry1.rateLimitReachedTimestamp;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long17 == 1531610563124L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 100L);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test110"); }

    java.lang.String[] str_array4 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand5 = new fredboat.command.music.control.RepeatCommand("", str_array4);
    fredboat.command.music.control.UnpauseCommand unpauseCommand6 = new fredboat.command.music.control.UnpauseCommand("http://i.imgur.com/NqyOqnj.gif", str_array4);
    // The following exception was thrown during execution in test generation
    try {
    fredboat.util.rest.Http.Params params7 = fredboat.util.rest.Http.Params.of(str_array4);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test111"); }

    fredboat.util.rest.Weather weather5 = null;
    java.lang.String[] str_array15 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.util.ServerInfoCommand serverInfoCommand18 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array15);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand19 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array15);
    fredboat.command.maintenance.VersionCommand versionCommand20 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.admin.ExitCommand exitCommand21 = new fredboat.command.admin.ExitCommand("\u274C", str_array15);
    fredboat.command.util.WeatherCommand weatherCommand22 = new fredboat.command.util.WeatherCommand(weather5, "https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.fun.RandomImageCommand randomImageCommand23 = new fredboat.command.fun.RandomImageCommand("User", "https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.util.BrainfuckCommand brainfuckCommand24 = new fredboat.command.util.BrainfuckCommand("https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.moderation.LanguageCommand languageCommand25 = new fredboat.command.moderation.LanguageCommand("\u274C", str_array15);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand26 = new fredboat.command.admin.SetAvatarCommand("fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test112"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.info.ListCommand listCommand8 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array6);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand("fredboat.util.BrainfuckException: \u2705", str_array6);
    fredboat.command.util.MathCommand mathCommand11 = new fredboat.command.util.MathCommand("qua, 31 dez 1969, 09:00 PM", str_array6);
    java.util.List<java.lang.String> list_str12 = mathCommand11.aliases;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str12);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test113"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    java.lang.String str4 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig6 = uConfig0.setRefresh("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    fredboat.util.GitRepoState gitRepoState7 = fredboat.util.GitRepoState.getGitRepositoryState();
    java.lang.String str8 = gitRepoState7.commitMessageShort;
    java.lang.String str9 = gitRepoState7.commitUserName;
    fredboat.util.Tuple2<fredboat.db.entity.UConfig,fredboat.util.GitRepoState> tuple2_uConfig_gitRepoState10 = new fredboat.util.Tuple2<fredboat.db.entity.UConfig,fredboat.util.GitRepoState>(uConfig6, gitRepoState7);
    fredboat.util.GitRepoState gitRepoState11 = tuple2_uConfig_gitRepoState10.b;
    java.lang.String str12 = gitRepoState11.commitIdAbbrev;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u2705"+ "'", str4.equals("\u2705"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test114"); }

    java.lang.String[] str_array4 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand5 = new fredboat.command.music.control.RepeatCommand("", str_array4);
    fredboat.command.music.control.LeaveCommand leaveCommand6 = new fredboat.command.music.control.LeaveCommand("Provided by OpenWeatherMap.org", str_array4);
    fredboat.commandmeta.abs.CommandContext commandContext7 = null;
    // The following exception was thrown during execution in test generation
    try {
    leaveCommand6.onInvoke(commandContext7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test115"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.id;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    blacklistEntry1.setRateLimitReached((int)(short)0);
    blacklistEntry1.id = 97L;
    blacklistEntry1.level = 10000;
    blacklistEntry1.setLevel(3000);
    blacklistEntry1.level = 2;
    long long18 = blacklistEntry1.getId();
    blacklistEntry1.blacklistedTimestamp = 1531609958152L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 97L);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test116"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    weatherOpenWeather0.setMain(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    weatherOpenWeather0.setId((int)(short)10);
    int i5 = weatherOpenWeather0.getId();
    weatherOpenWeather0.setMain("");
    java.lang.String str8 = weatherOpenWeather0.getMain();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test117"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    int i1 = weatherSystemOpenWeather0.getType();
    int i2 = weatherSystemOpenWeather0.getSunrise();
    weatherSystemOpenWeather0.setId((int)(short)100);
    weatherSystemOpenWeather0.setType((int)(short)-1);
    java.lang.String str7 = weatherSystemOpenWeather0.getCountry();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test118"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.util.MathCommand mathCommand11 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.UnpauseCommand unpauseCommand12 = new fredboat.command.music.control.UnpauseCommand("", str_array9);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand13 = new fredboat.command.moderation.EnableCommandsCommand("", str_array9);
    fredboat.command.music.seeking.SeekCommand seekCommand14 = new fredboat.command.music.seeking.SeekCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.moderation.ConfigCommand configCommand15 = new fredboat.command.moderation.ConfigCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.util.CommandsCommand commandsCommand16 = new fredboat.command.util.CommandsCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array9);
    fredboat.messaging.internal.Context context17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = commandsCommand16.help(context17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test119"); }

    fredboat.util.BrainfuckException brainfuckException2 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    java.lang.Throwable[] throwable_array3 = brainfuckException2.getSuppressed();
    java.lang.String str4 = brainfuckException2.toString();
    fredboat.util.BrainfuckException brainfuckException5 = new fredboat.util.BrainfuckException("https://i.imgur.com/YqZuqEB.jpg", (java.lang.Throwable)brainfuckException2);
    fredboat.util.BrainfuckException brainfuckException9 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException10 = new fredboat.util.BrainfuckException("", (java.lang.Throwable)brainfuckException9);
    java.lang.Throwable[] throwable_array11 = brainfuckException10.getSuppressed();
    fredboat.util.BrainfuckException brainfuckException13 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    java.lang.Throwable[] throwable_array14 = brainfuckException13.getSuppressed();
    brainfuckException10.addSuppressed((java.lang.Throwable)brainfuckException13);
    fredboat.util.BrainfuckException brainfuckException20 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException21 = new fredboat.util.BrainfuckException("", (java.lang.Throwable)brainfuckException20);
    fredboat.util.BrainfuckException brainfuckException22 = new fredboat.util.BrainfuckException("\uD83D\uDEAA", (java.lang.Throwable)brainfuckException20);
    fredboat.commandmeta.MessagingException messagingException23 = new fredboat.commandmeta.MessagingException("", (java.lang.Throwable)brainfuckException22);
    brainfuckException10.addSuppressed((java.lang.Throwable)brainfuckException22);
    fredboat.util.rest.APILimitException aPILimitException26 = new fredboat.util.rest.APILimitException("qua, 31 dez 1969, 09:00 PM");
    fredboat.util.BrainfuckException brainfuckException29 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    fredboat.util.BrainfuckException brainfuckException30 = new fredboat.util.BrainfuckException("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", (java.lang.Throwable)brainfuckException29);
    aPILimitException26.addSuppressed((java.lang.Throwable)brainfuckException29);
    brainfuckException22.addSuppressed((java.lang.Throwable)brainfuckException29);
    fredboat.commandmeta.MessagingException messagingException33 = new fredboat.commandmeta.MessagingException("\uD83D\uDCDD", (java.lang.Throwable)brainfuckException22);
    brainfuckException5.addSuppressed((java.lang.Throwable)messagingException33);
    fredboat.util.BrainfuckException brainfuckException37 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    fredboat.util.BrainfuckException brainfuckException38 = new fredboat.util.BrainfuckException("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", (java.lang.Throwable)brainfuckException37);
    java.lang.Throwable[] throwable_array39 = brainfuckException37.getSuppressed();
    brainfuckException5.addSuppressed((java.lang.Throwable)brainfuckException37);
    java.lang.String str41 = brainfuckException5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org"+ "'", str4.equals("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "fredboat.util.BrainfuckException: https://i.imgur.com/YqZuqEB.jpg"+ "'", str41.equals("fredboat.util.BrainfuckException: https://i.imgur.com/YqZuqEB.jpg"));

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test120"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode2 = openWeatherCurrent0.errorType();
    int i3 = openWeatherCurrent0.getId();
    java.util.List<fredboat.util.rest.models.weather.WeatherOpenWeather> list_weatherOpenWeather4 = openWeatherCurrent0.getWeather();
    int i5 = openWeatherCurrent0.getId();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather6 = openWeatherCurrent0.getSys();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode7 = openWeatherCurrent0.errorType();
    java.lang.String str8 = openWeatherCurrent0.getWeatherDescription();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    org.junit.Assert.assertTrue("'" + errorCode2 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode2.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_weatherOpenWeather4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather6);
    org.junit.Assert.assertTrue("'" + errorCode7 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode7.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test121"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("", str_array10);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array10);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand13 = new fredboat.command.fun.RemoteFileCommand("\u274C", "Bot Admin", str_array10);
    fredboat.command.fun.RollCommand rollCommand14 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand("DJ", str_array10);
    fredboat.command.util.BrainfuckCommand brainfuckCommand16 = new fredboat.command.util.BrainfuckCommand("User", str_array10);
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = brainfuckCommand16.process("DJ", context18);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test122"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.moderation.LanguageCommand languageCommand7 = new fredboat.command.moderation.LanguageCommand("", str_array5);
    fredboat.command.music.seeking.SeekCommand seekCommand8 = new fredboat.command.music.seeking.SeekCommand("fredboat.util.BrainfuckException: hi!", str_array5);
    fredboat.command.music.seeking.RestartCommand restartCommand9 = new fredboat.command.music.seeking.RestartCommand("\u274C", str_array5);
    fredboat.messaging.internal.Context context10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = restartCommand9.help(context10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test123"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("fredboat.util.BrainfuckException: \u2705");
    guildConfig1.setLang("http://i.imgur.com/NqyOqnj.gif");

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test124"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.info.ListCommand listCommand8 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.music.control.PauseCommand pauseCommand9 = new fredboat.command.music.control.PauseCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.fun.PatCommand patCommand10 = new fredboat.command.fun.PatCommand("fredboat.util.BrainfuckException: ", "", str_array6);
    fredboat.commandmeta.abs.CommandContext commandContext11 = null;
    // The following exception was thrown during execution in test generation
    try {
    patCommand10.onInvoke(commandContext11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test125"); }

    fredboat.db.entity.UConfig uConfig1 = new fredboat.db.entity.UConfig("fredboat.util.rest.APILimitException: en_US");
    fredboat.db.entity.UConfig uConfig3 = uConfig1.setUserId("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test126"); }

    fredboat.util.rest.Weather weather1 = null;
    fredboat.util.rest.Weather weather3 = null;
    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array11);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.maintenance.NodesCommand nodesCommand14 = new fredboat.command.maintenance.NodesCommand("", str_array11);
    fredboat.command.music.control.LeaveCommand leaveCommand15 = new fredboat.command.music.control.LeaveCommand("Bot Owner", str_array11);
    fredboat.command.util.CommandsCommand commandsCommand16 = new fredboat.command.util.CommandsCommand("fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.command.util.WeatherCommand weatherCommand17 = new fredboat.command.util.WeatherCommand(weather3, "fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.command.util.WeatherCommand weatherCommand18 = new fredboat.command.util.WeatherCommand(weather1, "Bot Owner", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand19 = new fredboat.command.music.info.HistoryCommand("\u274C", str_array11);
    fredboat.messaging.internal.Context context20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = historyCommand19.help(context20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test127"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.util.MathCommand mathCommand10 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.music.control.UnpauseCommand unpauseCommand11 = new fredboat.command.music.control.UnpauseCommand("", str_array8);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand12 = new fredboat.command.moderation.EnableCommandsCommand("", str_array8);
    fredboat.command.music.seeking.ForwardCommand forwardCommand13 = new fredboat.command.music.seeking.ForwardCommand("fredboat.util.BrainfuckException: ", str_array8);
    fredboat.command.maintenance.GetIdCommand getIdCommand14 = new fredboat.command.maintenance.GetIdCommand("Base", str_array8);
    fredboat.messaging.internal.Context context15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = getIdCommand14.help(context15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test128"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand15 = new fredboat.command.moderation.EnableCommandsCommand("", str_array11);
    fredboat.command.music.seeking.RewindCommand rewindCommand16 = new fredboat.command.music.seeking.RewindCommand("", str_array11);
    fredboat.command.music.seeking.RewindCommand rewindCommand17 = new fredboat.command.music.seeking.RewindCommand("en_US", str_array11);
    fredboat.command.music.control.PauseCommand pauseCommand18 = new fredboat.command.music.control.PauseCommand("en_US", str_array11);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand19 = new fredboat.command.maintenance.AudioDebugCommand("DJ", str_array11);
    fredboat.command.music.seeking.SeekCommand seekCommand20 = new fredboat.command.music.seeking.SeekCommand("http://i.imgur.com/NqyOqnj.gif", str_array11);
    fredboat.perms.PermissionLevel permissionLevel21 = seekCommand20.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    org.junit.Assert.assertTrue("'" + permissionLevel21 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel21.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test129"); }

    fredboat.util.GitRepoState gitRepoState1 = new fredboat.util.GitRepoState("");
    java.lang.String str2 = gitRepoState1.commitUserEmail;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test130"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    int i1 = weatherOpenWeather0.getId();
    weatherOpenWeather0.setId((int)(byte)100);
    int i4 = weatherOpenWeather0.getId();
    int i5 = weatherOpenWeather0.getId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 100);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test131"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    boolean b3 = simpleTrackProvider0.isEmpty();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange(3000, (int)(short)1);
    simpleTrackProvider0.setShuffle(false);
    simpleTrackProvider0.clear();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider10 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext11 = simpleTrackProvider10.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext12 = null;
    simpleTrackProvider10.setLastTrack(audioTrackContext12);
    simpleTrackProvider10.skipped();
    fredboat.audio.queue.RepeatMode repeatMode15 = simpleTrackProvider10.getRepeatMode();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider17 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext18 = simpleTrackProvider17.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext19 = null;
    simpleTrackProvider17.setLastTrack(audioTrackContext19);
    java.lang.Long[] long_array24 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long25 = new java.util.ArrayList<java.lang.Long>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long25, long_array24);
    simpleTrackProvider17.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long25);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext30 = simpleTrackProvider17.getTracksInRange(5, (int)(byte)100);
    int i31 = simpleTrackProvider17.size();
    fredboat.audio.queue.AudioTrackContext audioTrackContext32 = simpleTrackProvider17.peek();
    fredboat.audio.queue.AudioTrackContext audioTrackContext33 = null;
    simpleTrackProvider17.setLastTrack(audioTrackContext33);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider35 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext36 = simpleTrackProvider35.provideAudioTrack();
    int i37 = simpleTrackProvider35.size();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider38 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode39 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider38.setRepeatMode(repeatMode39);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider41 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext42 = simpleTrackProvider41.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext43 = null;
    simpleTrackProvider41.setLastTrack(audioTrackContext43);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext45 = simpleTrackProvider41.getAsListOrdered();
    simpleTrackProvider38.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext45);
    fredboat.audio.queue.AudioTrackContext audioTrackContext47 = null;
    boolean b48 = simpleTrackProvider38.remove(audioTrackContext47);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider50 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext51 = simpleTrackProvider50.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext52 = null;
    simpleTrackProvider50.setLastTrack(audioTrackContext52);
    java.lang.Long[] long_array57 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long58 = new java.util.ArrayList<java.lang.Long>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long58, long_array57);
    simpleTrackProvider50.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long58);
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand66 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array65);
    fredboat.command.admin.ExitCommand exitCommand67 = new fredboat.command.admin.ExitCommand("hi!", str_array65);
    java.util.List<java.lang.String> list_str68 = exitCommand67.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand69 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long58, exitCommand67);
    boolean b70 = simpleTrackProvider38.isUserTrackOwner(1531609933098L, (java.util.Collection<java.lang.Long>)arraylist_long58);
    long long71 = simpleTrackProvider38.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider72 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext73 = null;
    simpleTrackProvider72.setLastTrack(audioTrackContext73);
    int i75 = simpleTrackProvider72.size();
    fredboat.audio.queue.AudioTrackContext audioTrackContext76 = simpleTrackProvider72.peek();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider77 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext78 = simpleTrackProvider77.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext79 = null;
    simpleTrackProvider77.setLastTrack(audioTrackContext79);
    java.lang.Long[] long_array84 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long85 = new java.util.ArrayList<java.lang.Long>();
    boolean b86 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long85, long_array84);
    simpleTrackProvider77.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long85);
    simpleTrackProvider72.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long85);
    simpleTrackProvider38.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long85);
    simpleTrackProvider35.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long85);
    simpleTrackProvider17.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long85);
    boolean b92 = simpleTrackProvider10.isUserTrackOwner(1531609988829L, (java.util.Collection<java.lang.Long>)arraylist_long85);
    simpleTrackProvider0.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long85);
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext11);
    org.junit.Assert.assertTrue("'" + repeatMode15 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode15.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    org.junit.Assert.assertTrue("'" + repeatMode39 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode39.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long71 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test132"); }

    java.lang.String[] str_array10 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand11 = new fredboat.command.fun.HugCommand("", "\u274C", str_array10);
    fredboat.command.util.ServerInfoCommand serverInfoCommand12 = new fredboat.command.util.ServerInfoCommand("qua, 31 dez 1969, 09:00 PM", str_array10);
    fredboat.command.music.control.DestroyCommand destroyCommand13 = new fredboat.command.music.control.DestroyCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.LeaveCommand leaveCommand14 = new fredboat.command.music.control.LeaveCommand("\uD83D\uDCDD", str_array10);
    fredboat.messaging.internal.Context context15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = leaveCommand14.help(context15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test133"); }

    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode0 = fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG;
    fredboat.util.rest.models.weather.WeatherError weatherError1 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    java.lang.String str2 = weatherError1.getDataProviderIcon();
    java.lang.String str3 = weatherError1.getFormattedDate();
    java.lang.String str4 = weatherError1.getThumbnailUrl();
    java.lang.String str5 = weatherError1.getThumbnailUrl();
    java.lang.String str6 = weatherError1.getThumbnailUrl();
    java.lang.String str7 = weatherError1.getTemperature();
    org.junit.Assert.assertTrue("'" + errorCode0 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode0.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test134"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.getId();
    blacklistEntry1.setLevel(0);
    blacklistEntry1.rateLimitReached = 10;
    long long10 = blacklistEntry1.blacklistedTimestamp;
    blacklistEntry1.setBlacklistedTimestamp(1531609935838L);
    long long13 = blacklistEntry1.blacklistedTimestamp;
    long long14 = blacklistEntry1.id;
    blacklistEntry1.rateLimitReachedTimestamp = 1531609997185L;
    blacklistEntry1.setRateLimitReached((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1531610566440L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1531609935838L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long14 == 10L);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test135"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand13 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("hi!", str_array12);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand15 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array12);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand("\uD83D\uDEAA", str_array12);
    fredboat.command.fun.FacedeskCommand facedeskCommand17 = new fredboat.command.fun.FacedeskCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", "", str_array12);
    fredboat.command.admin.UpdateCommand updateCommand18 = new fredboat.command.admin.UpdateCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.fun.TextCommand textCommand19 = new fredboat.command.fun.TextCommand("fredboat.util.rest.APILimitException: en_US", "en_US", str_array12);
    fredboat.command.music.info.ListCommand listCommand20 = new fredboat.command.music.info.ListCommand("\u2705", str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test136"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.info.ListCommand listCommand8 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.maintenance.NodesCommand nodesCommand9 = new fredboat.command.maintenance.NodesCommand("", str_array6);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand10 = new fredboat.command.moderation.EnableCommandsCommand("qua, 31 dez 1969, 09:00 PM", str_array6);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand11 = new fredboat.command.maintenance.GitInfoCommand("DJ", str_array6);
    fredboat.commandmeta.abs.CommandContext commandContext12 = null;
    // The following exception was thrown during execution in test generation
    try {
    gitInfoCommand11.onInvoke(commandContext12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test137"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    long long6 = blacklistEntry1.getBlacklistedTimestamp();
    int i7 = blacklistEntry1.getLevel();
    int i8 = blacklistEntry1.level;
    blacklistEntry1.setRateLimitReached(10);
    blacklistEntry1.rateLimitReached = 'a';
    blacklistEntry1.setLevel((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test138"); }

    java.lang.String[] str_array13 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand14 = new fredboat.command.fun.HugCommand("", "\u274C", str_array13);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("\uD83D\uDCDD", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array13);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand16 = new fredboat.command.admin.SetAvatarCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array13);
    fredboat.command.admin.BotRestartCommand botRestartCommand17 = new fredboat.command.admin.BotRestartCommand("Bot Admin", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand18 = new fredboat.command.admin.NodeAdminCommand("Bot Owner", str_array13);
    fredboat.command.music.control.DestroyCommand destroyCommand19 = new fredboat.command.music.control.DestroyCommand("fredboat.util.BrainfuckException: https://i.imgur.com/YqZuqEB.jpg", str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test139"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    boolean b1 = simpleTrackProvider0.isEmpty();
    simpleTrackProvider0.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider3 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider3.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext5 = simpleTrackProvider3.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext5);
    fredboat.audio.queue.RepeatMode repeatMode7 = simpleTrackProvider0.getRepeatMode();
    boolean b8 = simpleTrackProvider0.isShuffle();
    // The following exception was thrown during execution in test generation
    try {
    fredboat.audio.queue.AudioTrackContext audioTrackContext10 = simpleTrackProvider0.getTrack(3000);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext5);
    org.junit.Assert.assertTrue("'" + repeatMode7 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode7.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test140"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand13 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand14 = new fredboat.command.music.control.RepeatCommand("", str_array11);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("hi!", "fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand16 = new fredboat.command.music.info.HistoryCommand("qua, 31 dez 1969, 09:00 PM", str_array11);
    fredboat.command.music.control.JoinCommand joinCommand17 = new fredboat.command.music.control.JoinCommand("\uD83D\uDCDD", str_array11);
    fredboat.command.maintenance.PingCommand pingCommand18 = new fredboat.command.maintenance.PingCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.music.seeking.ForwardCommand forwardCommand19 = new fredboat.command.music.seeking.ForwardCommand("Bot Admin", str_array11);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand20 = new fredboat.command.music.control.PlaySplitCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array11);
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    playSplitCommand20.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test141"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.fun.TextCommand textCommand13 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array10);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.fun.FacedeskCommand facedeskCommand15 = new fredboat.command.fun.FacedeskCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array10);
    java.util.List<java.lang.String> list_str16 = facedeskCommand15.aliases;
    guildPermissions0.setUserList(list_str16);
    java.util.List<java.lang.String> list_str18 = guildPermissions0.getDjList();
    java.util.List<java.lang.String> list_str19 = guildPermissions0.getDjList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str19);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test142"); }

    java.lang.String[] str_array10 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand11 = new fredboat.command.fun.HugCommand("", "\u274C", str_array10);
    fredboat.command.fun.TextCommand textCommand12 = new fredboat.command.fun.TextCommand("\uD83D\uDCDD", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand13 = new fredboat.command.admin.SetAvatarCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array10);
    fredboat.perms.PermissionLevel permissionLevel14 = setAvatarCommand13.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel14 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel14.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test143"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    weatherMainOpenWeather0.setTempMax((double)0);
    double d5 = weatherMainOpenWeather0.getTempMax();
    weatherMainOpenWeather0.setHumidity(100);
    double d8 = weatherMainOpenWeather0.getTempMin();
    weatherMainOpenWeather0.setTemp((double)1531609954368L);
    weatherMainOpenWeather0.setTemp((double)1531610563124L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 10.0d);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test144"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext1);
    fredboat.audio.queue.RepeatMode repeatMode3 = fredboat.audio.queue.RepeatMode.ALL;
    simpleTrackProvider0.setRepeatMode(repeatMode3);
    fredboat.audio.queue.RepeatMode repeatMode5 = simpleTrackProvider0.getRepeatMode();
    fredboat.audio.queue.AudioTrackContext audioTrackContext6 = simpleTrackProvider0.provideAudioTrack();
    org.junit.Assert.assertTrue("'" + repeatMode3 + "' != '" + fredboat.audio.queue.RepeatMode.ALL + "'", repeatMode3.equals(fredboat.audio.queue.RepeatMode.ALL));
    org.junit.Assert.assertTrue("'" + repeatMode5 + "' != '" + fredboat.audio.queue.RepeatMode.ALL + "'", repeatMode5.equals(fredboat.audio.queue.RepeatMode.ALL));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext6);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test145"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    int i2 = blacklistEntry1.getRateLimitReached();
    long long3 = blacklistEntry1.getId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 10L);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test146"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    int i1 = weatherOpenWeather0.getId();
    java.lang.String str2 = weatherOpenWeather0.getDescription();
    weatherOpenWeather0.setMain("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)");
    java.lang.String str5 = weatherOpenWeather0.getIcon();
    java.lang.String str6 = weatherOpenWeather0.getIcon();
    weatherOpenWeather0.setMain("https://i.imgur.com/YqZuqEB.jpg");
    weatherOpenWeather0.setDescription("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...");
    java.lang.String str11 = weatherOpenWeather0.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..."+ "'", str11.equals("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..."));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test147"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    java.lang.String str2 = guildConfig0.getGuildId();
    java.lang.String str3 = guildConfig0.getLang();
    boolean b4 = guildConfig0.isTrackAnnounce();
    guildConfig0.setId("fredboat.util.BrainfuckException: \u2705");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "en_US"+ "'", str3.equals("en_US"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test148"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    weatherSystemOpenWeather0.setId((int)(short)100);
    int i3 = weatherSystemOpenWeather0.getType();
    int i4 = weatherSystemOpenWeather0.getId();
    weatherSystemOpenWeather0.setSunrise(1);
    int i7 = weatherSystemOpenWeather0.getSunset();
    weatherSystemOpenWeather0.setSunset((-1));
    weatherSystemOpenWeather0.setId((int)' ');
    int i12 = weatherSystemOpenWeather0.getId();
    int i13 = weatherSystemOpenWeather0.getSunrise();
    weatherSystemOpenWeather0.setId((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test149"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    fredboat.db.entity.UConfig uConfig5 = uConfig3.setRefresh("\uD83D\uDEAA");
    java.lang.String str6 = uConfig3.getBearer();
    java.lang.String str7 = uConfig3.getRefresh();
    fredboat.db.entity.UConfig uConfig9 = uConfig3.setBearer("fredboat.commandmeta.MessagingException: \uD83D\uDEAA");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u2705"+ "'", str6.equals("\u2705"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "\uD83D\uDEAA"+ "'", str7.equals("\uD83D\uDEAA"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig9);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test150"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    java.lang.String str1 = weatherOpenWeather0.getDescription();
    weatherOpenWeather0.setDescription(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    java.lang.String str4 = weatherOpenWeather0.getMain();
    weatherOpenWeather0.setDescription("Bot Admin");
    java.lang.String str7 = weatherOpenWeather0.getDescription();
    weatherOpenWeather0.setDescription("https://i.imgur.com/YqZuqEB.jpg");
    weatherOpenWeather0.setIcon("fredboat.commandmeta.MessagingException: ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Bot Admin"+ "'", str7.equals("Bot Admin"));

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test151"); }

    fredboat.util.rest.Weather weather2 = null;
    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.fun.TextCommand textCommand13 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array10);
    fredboat.command.util.WeatherCommand weatherCommand14 = new fredboat.command.util.WeatherCommand(weather2, "Bot Admin", str_array10);
    fredboat.command.maintenance.GetIdCommand getIdCommand15 = new fredboat.command.maintenance.GetIdCommand("DJ", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand16 = new fredboat.command.music.control.ShuffleCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test152"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.id;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    blacklistEntry1.setRateLimitReached((int)(short)0);
    blacklistEntry1.id = 97L;
    blacklistEntry1.level = 10000;
    blacklistEntry1.setLevel(3000);
    int i16 = blacklistEntry1.getLevel();
    blacklistEntry1.setBlacklistedTimestamp(1531610562932L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 3000);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test153"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array13 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand14 = new fredboat.command.music.control.RepeatCommand("", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array13);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand16 = new fredboat.command.fun.RemoteFileCommand("\u274C", "Bot Admin", str_array13);
    fredboat.command.fun.RollCommand rollCommand17 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "Provided by OpenWeatherMap.org", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand18 = new fredboat.command.music.control.ShuffleCommand("DJ", str_array13);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand19 = new fredboat.command.maintenance.AudioDebugCommand("Base", str_array13);
    fredboat.command.util.WeatherCommand weatherCommand20 = new fredboat.command.util.WeatherCommand(weather1, "fredboat.util.rest.APILimitException: en_US", str_array13);
    fredboat.command.admin.TestCommand testCommand21 = new fredboat.command.admin.TestCommand("qua, 31 dez 1969, 09:00 PM", str_array13);
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = testCommand21.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test154"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array10);
    fredboat.command.music.control.RepeatCommand repeatCommand12 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.util.CommandsCommand commandsCommand13 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.maintenance.PingCommand pingCommand14 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array10);
    fredboat.command.music.info.ListCommand listCommand15 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand("https://i.imgur.com/YqZuqEB.jpg", str_array10);
    fredboat.command.util.CommandsCommand commandsCommand17 = new fredboat.command.util.CommandsCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand18 = new fredboat.command.music.control.ShuffleCommand("Base", str_array10);
    fredboat.command.util.MathCommand mathCommand19 = new fredboat.command.util.MathCommand("fredboat.util.BrainfuckException: ", str_array10);
    fredboat.messaging.internal.Context context20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = mathCommand19.help(context20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test155"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("hi!");
    guildConfig1.setId("\u2757");
    boolean b4 = guildConfig1.isTrackAnnounce();
    guildConfig1.setId("DJ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test156"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.maintenance.GetIdCommand getIdCommand11 = new fredboat.command.maintenance.GetIdCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand12 = new fredboat.command.maintenance.GitInfoCommand("", str_array8);
    fredboat.command.util.AvatarCommand avatarCommand13 = new fredboat.command.util.AvatarCommand("en_US", str_array8);
    fredboat.command.admin.UpdateCommand updateCommand14 = new fredboat.command.admin.UpdateCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.messaging.internal.Context context15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = updateCommand14.help(context15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test157"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather3 = openWeatherCurrent0.getClouds();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode4 = openWeatherCurrent0.errorType();
    boolean b5 = openWeatherCurrent0.isError();
    java.lang.String str6 = openWeatherCurrent0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather3);
    org.junit.Assert.assertTrue("'" + errorCode4 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode4.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test158"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.util.AvatarCommand avatarCommand14 = new fredboat.command.util.AvatarCommand("\uD83D\uDEAA", str_array11);
    fredboat.command.fun.CatgirlCommand catgirlCommand15 = new fredboat.command.fun.CatgirlCommand("hi!", str_array11);
    fredboat.command.moderation.LanguageCommand languageCommand16 = new fredboat.command.moderation.LanguageCommand("en_US", str_array11);
    fredboat.command.music.info.ListCommand listCommand17 = new fredboat.command.music.info.ListCommand("\uD83D\uDEAA", str_array11);
    fredboat.command.music.control.JoinCommand joinCommand18 = new fredboat.command.music.control.JoinCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.music.seeking.SeekCommand seekCommand19 = new fredboat.command.music.seeking.SeekCommand("fredboat.util.BrainfuckException: ", str_array11);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand20 = new fredboat.command.admin.UnblacklistCommand("\u274C", str_array11);
    fredboat.messaging.internal.Context context21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str22 = unblacklistCommand20.help(context21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test159"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.maintenance.GetIdCommand getIdCommand12 = new fredboat.command.maintenance.GetIdCommand("Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.fun.FacedeskCommand facedeskCommand13 = new fredboat.command.fun.FacedeskCommand("Provided by OpenWeatherMap.org", "Bot Owner", str_array9);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand14 = new fredboat.command.admin.SetAvatarCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.admin.ReviveCommand reviveCommand15 = new fredboat.command.admin.ReviveCommand("\uD83D\uDEAA", str_array9);
    fredboat.perms.PermissionLevel permissionLevel16 = reviveCommand15.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel17 = reviveCommand15.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel18 = reviveCommand15.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext19 = null;
    // The following exception was thrown during execution in test generation
    try {
    reviveCommand15.onInvoke(commandContext19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel17 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel17.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test160"); }

    fredboat.util.rest.Weather weather0 = null;
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.music.info.ListCommand listCommand7 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array5);
    fredboat.command.util.WeatherCommand weatherCommand8 = new fredboat.command.util.WeatherCommand(weather0, "fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array5);
    fredboat.messaging.internal.Context context9 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = weatherCommand8.help(context9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test161"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    simpleTrackProvider0.skipped();
    fredboat.audio.queue.RepeatMode repeatMode5 = simpleTrackProvider0.getRepeatMode();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider6 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext7 = null;
    simpleTrackProvider6.setLastTrack(audioTrackContext7);
    int i9 = simpleTrackProvider6.size();
    fredboat.audio.queue.AudioTrackContext audioTrackContext10 = simpleTrackProvider6.peek();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider11 = new fredboat.audio.queue.SimpleTrackProvider();
    boolean b12 = simpleTrackProvider11.isEmpty();
    simpleTrackProvider11.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider14 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider14.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext16 = simpleTrackProvider14.getAsListOrdered();
    simpleTrackProvider11.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext16);
    simpleTrackProvider6.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext16);
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext16);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext20 = simpleTrackProvider0.getAsListOrdered();
    boolean b21 = simpleTrackProvider0.isShuffle();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider23 = new fredboat.audio.queue.SimpleTrackProvider();
    int i24 = simpleTrackProvider23.size();
    int i25 = simpleTrackProvider23.streamsCount();
    fredboat.audio.queue.RepeatMode repeatMode26 = simpleTrackProvider23.getRepeatMode();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider27 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext28 = simpleTrackProvider27.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext29 = null;
    simpleTrackProvider27.setLastTrack(audioTrackContext29);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext33 = simpleTrackProvider27.getTracksInRange((int)(byte)10, 10000);
    simpleTrackProvider27.clear();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider35 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext36 = simpleTrackProvider35.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext37 = null;
    simpleTrackProvider35.setLastTrack(audioTrackContext37);
    java.lang.Long[] long_array42 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long43 = new java.util.ArrayList<java.lang.Long>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long43, long_array42);
    simpleTrackProvider35.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long43);
    java.lang.String[] str_array50 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand51 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array50);
    fredboat.command.admin.ExitCommand exitCommand52 = new fredboat.command.admin.ExitCommand("hi!", str_array50);
    java.util.List<java.lang.String> list_str53 = exitCommand52.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand54 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long43, exitCommand52);
    java.util.ArrayList<java.lang.Long> arraylist_long55 = tuple2_arraylist_long_exitCommand54.a;
    simpleTrackProvider27.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long55);
    simpleTrackProvider23.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long55);
    boolean b58 = simpleTrackProvider0.isUserTrackOwner(1531610072494L, (java.util.Collection<java.lang.Long>)arraylist_long55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    org.junit.Assert.assertTrue("'" + repeatMode5 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode5.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    org.junit.Assert.assertTrue("'" + repeatMode26 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode26.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_long55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test162"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    int i3 = openWeatherCurrent0.getCode();
    java.lang.String str4 = openWeatherCurrent0.getDataProviderString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str4.equals("Provided by OpenWeatherMap.org"));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test163"); }

    fredboat.db.entity.UConfig uConfig1 = new fredboat.db.entity.UConfig("Provided by OpenWeatherMap.org");

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test164"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand17 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array11);
    fredboat.command.admin.TestCommand testCommand18 = new fredboat.command.admin.TestCommand("", str_array11);
    fredboat.command.music.control.PauseCommand pauseCommand19 = new fredboat.command.music.control.PauseCommand("qua, 31 dez 1969, 09:00 PM", str_array11);
    fredboat.command.music.control.DestroyCommand destroyCommand20 = new fredboat.command.music.control.DestroyCommand("Bot Owner", str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test165"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "https://i.imgur.com/YqZuqEB.jpg", "https://i.imgur.com/YqZuqEB.jpg", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org" };
    fredboat.command.music.control.ShuffleCommand shuffleCommand8 = new fredboat.command.music.control.ShuffleCommand("\u274C", str_array7);
    fredboat.command.music.seeking.RewindCommand rewindCommand9 = new fredboat.command.music.seeking.RewindCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.music.seeking.RewindCommand rewindCommand10 = new fredboat.command.music.seeking.RewindCommand("fredboat.util.BrainfuckException: ", str_array7);
    fredboat.command.music.seeking.RestartCommand restartCommand11 = new fredboat.command.music.seeking.RestartCommand("Provided by OpenWeatherMap.org", str_array7);
    fredboat.perms.PermissionLevel permissionLevel12 = restartCommand11.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel13 = restartCommand11.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext14 = null;
    // The following exception was thrown during execution in test generation
    try {
    restartCommand11.onInvoke(commandContext14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel13 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel13.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test166"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("\uD83D\uDEAA");
    guildConfig1.setLang("fredboat.util.BrainfuckException: \u2705");

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test167"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand12 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array11);
    fredboat.command.admin.BotRestartCommand botRestartCommand13 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.fun.FacedeskCommand facedeskCommand14 = new fredboat.command.fun.FacedeskCommand("fredboat.util.BrainfuckException: :\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "\u2757", str_array11);
    fredboat.commandmeta.abs.CommandContext commandContext15 = null;
    // The following exception was thrown during execution in test generation
    try {
    facedeskCommand14.onInvoke(commandContext15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test168"); }

    java.lang.String[] str_array16 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array16);
    fredboat.command.music.control.ShuffleCommand shuffleCommand18 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array16);
    fredboat.command.util.ServerInfoCommand serverInfoCommand19 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array16);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand20 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array16);
    fredboat.command.maintenance.VersionCommand versionCommand21 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array16);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand22 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array16);
    fredboat.command.music.control.JoinCommand joinCommand23 = new fredboat.command.music.control.JoinCommand("\uD83D\uDEAA", str_array16);
    fredboat.command.moderation.ConfigCommand configCommand24 = new fredboat.command.moderation.ConfigCommand("\u2757", str_array16);
    fredboat.command.fun.RollCommand rollCommand25 = new fredboat.command.fun.RollCommand("", "Bot Owner", str_array16);
    fredboat.command.util.CommandsCommand commandsCommand26 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array16);
    fredboat.command.fun.RollCommand rollCommand27 = new fredboat.command.fun.RollCommand("hi!", "fredboat.util.BrainfuckException: hi!", str_array16);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand28 = new fredboat.command.maintenance.GitInfoCommand("\u274C", str_array16);
    fredboat.commandmeta.abs.CommandContext commandContext29 = null;
    // The following exception was thrown during execution in test generation
    try {
    gitInfoCommand28.onInvoke(commandContext29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test169"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    int i1 = weatherSystemOpenWeather0.getType();
    int i2 = weatherSystemOpenWeather0.getSunrise();
    weatherSystemOpenWeather0.setId((int)(short)100);
    weatherSystemOpenWeather0.setType(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test170"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    int i1 = simpleTrackProvider0.streamsCount();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = simpleTrackProvider0.peek();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext2);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test171"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.music.control.RepeatCommand repeatCommand14 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.util.CommandsCommand commandsCommand15 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.music.control.PauseCommand pauseCommand16 = new fredboat.command.music.control.PauseCommand("", str_array12);
    fredboat.command.admin.EvalCommand evalCommand17 = new fredboat.command.admin.EvalCommand("hi!", str_array12);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand18 = new fredboat.command.music.control.ReshuffleCommand("\u274C", str_array12);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand19 = new fredboat.command.fun.RemoteFileCommand("\u2705", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.util.MathCommand mathCommand20 = new fredboat.command.util.MathCommand("DJ", str_array12);
    fredboat.command.maintenance.VersionCommand versionCommand21 = new fredboat.command.maintenance.VersionCommand("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.music.control.JoinCommand joinCommand22 = new fredboat.command.music.control.JoinCommand("", str_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test172"); }

    fredboat.db.entity.UConfig uConfig1 = new fredboat.db.entity.UConfig("");
    fredboat.db.entity.UConfig uConfig3 = uConfig1.setBearerExpiration((-1L));
    java.lang.String str4 = uConfig1.getBearer();
    fredboat.db.entity.UConfig uConfig6 = uConfig1.setUserId("qua, 31 dez 1969, 09:00 PM");
    java.lang.String str7 = uConfig6.getRefresh();
    java.lang.String str8 = uConfig6.getUserId();
    fredboat.db.entity.UConfig uConfig10 = uConfig6.setRefresh("\uD83D\uDCDD");
    fredboat.db.entity.UConfig uConfig12 = uConfig10.setBearerExpiration(1531610214347L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str8.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig12);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test173"); }

    java.lang.String[] str_array16 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array16);
    fredboat.command.music.control.ShuffleCommand shuffleCommand18 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array16);
    fredboat.command.fun.TextCommand textCommand19 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array16);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand20 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array16);
    fredboat.command.fun.FacedeskCommand facedeskCommand21 = new fredboat.command.fun.FacedeskCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array16);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand22 = new fredboat.command.moderation.EnableCommandsCommand("Provided by OpenWeatherMap.org", str_array16);
    fredboat.command.music.info.ListCommand listCommand23 = new fredboat.command.music.info.ListCommand("hi!", str_array16);
    fredboat.command.music.seeking.RewindCommand rewindCommand24 = new fredboat.command.music.seeking.RewindCommand("\u2705", str_array16);
    fredboat.command.util.ServerInfoCommand serverInfoCommand25 = new fredboat.command.util.ServerInfoCommand("DJ", str_array16);
    fredboat.command.fun.HugCommand hugCommand26 = new fredboat.command.fun.HugCommand("\u274C", "\uD83D\uDCDD", str_array16);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand27 = new fredboat.command.moderation.EnableCommandsCommand("fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test174"); }

    java.lang.String[] str_array3 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand4 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array3);
    fredboat.perms.PermissionLevel permissionLevel5 = nodeAdminCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel6 = nodeAdminCommand4.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext7 = null;
    // The following exception was thrown during execution in test generation
    try {
    nodeAdminCommand4.onInvoke(commandContext7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    org.junit.Assert.assertTrue("'" + permissionLevel5 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel5.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel6 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel6.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test175"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.maintenance.GetIdCommand getIdCommand11 = new fredboat.command.maintenance.GetIdCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand12 = new fredboat.command.maintenance.GitInfoCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand13 = new fredboat.command.maintenance.AudioDebugCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.admin.EvalCommand evalCommand14 = new fredboat.command.admin.EvalCommand("", str_array8);
    fredboat.commandmeta.abs.CommandContext commandContext15 = null;
    // The following exception was thrown during execution in test generation
    try {
    evalCommand14.onInvoke(commandContext15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test176"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather1 = openWeatherCurrent0.getSys();
    openWeatherCurrent0.setId((int)(short)1);
    java.lang.String str4 = openWeatherCurrent0.getThumbnailUrl();
    java.lang.String str5 = openWeatherCurrent0.getDataProviderString();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather6 = openWeatherCurrent0.getMain();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str5.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather6);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test177"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    weatherSystemOpenWeather0.setId((int)(short)100);
    int i3 = weatherSystemOpenWeather0.getType();
    weatherSystemOpenWeather0.setSunrise(100);
    weatherSystemOpenWeather0.setId(100);
    weatherSystemOpenWeather0.setMessage((double)1531609936760L);
    int i10 = weatherSystemOpenWeather0.getId();
    weatherSystemOpenWeather0.setSunset(1);
    weatherSystemOpenWeather0.setId(3000);
    weatherSystemOpenWeather0.setCountry("fredboat.util.rest.APILimitException: en_US");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test178"); }

    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode0 = fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG;
    fredboat.util.rest.models.weather.WeatherError weatherError1 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    fredboat.util.rest.models.weather.WeatherError weatherError2 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    java.lang.String str3 = weatherError2.getWeatherDescription();
    boolean b4 = weatherError2.isError();
    java.lang.String str5 = weatherError2.getTemperature();
    java.lang.String str6 = weatherError2.getLocation();
    org.junit.Assert.assertTrue("'" + errorCode0 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode0.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test179"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    blacklistEntry1.blacklistedTimestamp = 3000;
    int i7 = blacklistEntry1.level;
    blacklistEntry1.id = 1531609948176L;
    blacklistEntry1.rateLimitReached = 3;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test180"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand10 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.admin.ExitCommand exitCommand11 = new fredboat.command.admin.ExitCommand("hi!", str_array9);
    fredboat.command.music.info.ListCommand listCommand12 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand13 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array9);
    fredboat.command.util.BrainfuckCommand brainfuckCommand14 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.PauseCommand pauseCommand15 = new fredboat.command.music.control.PauseCommand("Bot Admin", str_array9);
    fredboat.command.util.CommandsCommand commandsCommand16 = new fredboat.command.util.CommandsCommand("\u274C", str_array9);
    java.lang.String str17 = commandsCommand16.name;
    fredboat.commandmeta.abs.CommandContext commandContext18 = null;
    // The following exception was thrown during execution in test generation
    try {
    commandsCommand16.onInvoke(commandContext18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "\u274C"+ "'", str17.equals("\u274C"));

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test181"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    weatherOpenWeather0.setId((int)(byte)0);
    weatherOpenWeather0.setMain("hi!");
    weatherOpenWeather0.setDescription("fredboat.commandmeta.MessagingException: \uD83D\uDEAA");

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test182"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    int i3 = openWeatherCurrent0.getId();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather4 = openWeatherCurrent0.getSys();
    java.lang.String str5 = openWeatherCurrent0.getFormattedDate();
    java.lang.String str6 = openWeatherCurrent0.getThumbnailUrl();
    java.lang.String str7 = openWeatherCurrent0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str5.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test183"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    boolean b2 = guildConfig0.isTrackAnnounce();
    boolean b3 = guildConfig0.isAutoResume();
    guildConfig0.setLang("DJ");
    guildConfig0.setLang("http://i.imgur.com/NqyOqnj.gif");
    guildConfig0.setAutoResume(false);
    guildConfig0.setId("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test184"); }

    java.lang.String[] str_array1 = null;
    // The following exception was thrown during execution in test generation
    try {
    fredboat.command.moderation.ConfigCommand configCommand2 = new fredboat.command.moderation.ConfigCommand("Base", str_array1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test185"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand7 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.admin.ExitCommand exitCommand8 = new fredboat.command.admin.ExitCommand("hi!", str_array6);
    fredboat.command.music.seeking.SeekCommand seekCommand9 = new fredboat.command.music.seeking.SeekCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array6);
    fredboat.command.music.control.JoinCommand joinCommand10 = new fredboat.command.music.control.JoinCommand("\uD83D\uDCDD", str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test186"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand15 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand16 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.VersionCommand versionCommand17 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.admin.ExitCommand exitCommand18 = new fredboat.command.admin.ExitCommand("en_US", str_array12);
    fredboat.command.music.control.UnpauseCommand unpauseCommand19 = new fredboat.command.music.control.UnpauseCommand("https://i.imgur.com/YqZuqEB.jpg", str_array12);
    fredboat.command.music.info.ListCommand listCommand20 = new fredboat.command.music.info.ListCommand("\u2757", str_array12);
    fredboat.command.fun.HugCommand hugCommand21 = new fredboat.command.fun.HugCommand("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.commandmeta.abs.CommandContext commandContext22 = null;
    // The following exception was thrown during execution in test generation
    try {
    hugCommand21.onInvoke(commandContext22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test187"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand7 = new fredboat.command.music.control.RepeatCommand("", str_array6);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array6);
    fredboat.command.fun.RandomImageCommand randomImageCommand9 = new fredboat.command.fun.RandomImageCommand("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", "DJ", str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test188"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array8);
    fredboat.command.util.CommandsCommand commandsCommand11 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.PingCommand pingCommand12 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array8);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand("https://i.imgur.com/YqZuqEB.jpg", str_array8);
    fredboat.command.music.seeking.RewindCommand rewindCommand15 = new fredboat.command.music.seeking.RewindCommand("DJ", str_array8);
    fredboat.commandmeta.abs.CommandContext commandContext16 = null;
    // The following exception was thrown during execution in test generation
    try {
    rewindCommand15.onInvoke(commandContext16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test189"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.music.control.RepeatCommand repeatCommand14 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.music.seeking.RestartCommand restartCommand15 = new fredboat.command.music.seeking.RestartCommand("", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand16 = new fredboat.command.music.control.ShuffleCommand("hi!", str_array12);
    fredboat.command.fun.RollCommand rollCommand17 = new fredboat.command.fun.RollCommand("\uD83D\uDEAA", "qua, 31 dez 1969, 09:00 PM", str_array12);
    fredboat.command.music.info.ListCommand listCommand18 = new fredboat.command.music.info.ListCommand("DJ", str_array12);
    fredboat.command.admin.BotRestartCommand botRestartCommand19 = new fredboat.command.admin.BotRestartCommand("hi!", str_array12);
    fredboat.command.fun.HugCommand hugCommand20 = new fredboat.command.fun.HugCommand("\uD83D\uDEAA", "\uD83D\uDEAA", str_array12);
    fredboat.command.util.AvatarCommand avatarCommand21 = new fredboat.command.util.AvatarCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = avatarCommand21.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test190"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.fun.TextCommand textCommand18 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array15);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand19 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand20 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array15);
    fredboat.command.moderation.ConfigCommand configCommand21 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.fun.HugCommand hugCommand22 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array15);
    fredboat.command.admin.EvalCommand evalCommand23 = new fredboat.command.admin.EvalCommand("qua, 31 dez 1969, 09:00 PM", str_array15);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand24 = new fredboat.command.moderation.DisableCommandsCommand("", str_array15);
    fredboat.command.music.info.ListCommand listCommand25 = new fredboat.command.music.info.ListCommand("https://i.imgur.com/YqZuqEB.jpg", str_array15);
    // The following exception was thrown during execution in test generation
    try {
    fredboat.command.fun.DanceCommand danceCommand26 = new fredboat.command.fun.DanceCommand("\u274C", str_array15);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test191"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    boolean b1 = openWeatherCurrent0.isError();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderIcon();
    java.lang.String str3 = openWeatherCurrent0.getThumbnailUrl();
    int i4 = openWeatherCurrent0.getDatetime();
    java.lang.String str5 = openWeatherCurrent0.getFormattedDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str2.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str5.equals("qua, 31 dez 1969, 09:00 PM"));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test192"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.util.MathCommand mathCommand12 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.UnpauseCommand unpauseCommand13 = new fredboat.command.music.control.UnpauseCommand("", str_array10);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand15 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array10);
    fredboat.command.maintenance.GetIdCommand getIdCommand16 = new fredboat.command.maintenance.GetIdCommand("Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.music.info.ListCommand listCommand17 = new fredboat.command.music.info.ListCommand("\uD83D\uDEAA", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand18 = new fredboat.command.maintenance.VersionCommand("fredboat.commandmeta.MessagingException: ", str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test193"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    int i2 = blacklistEntry1.getRateLimitReached();
    blacklistEntry1.setRateLimitReached((int)(byte)10);
    blacklistEntry1.rateLimitReachedTimestamp = 1531609939130L;
    long long7 = blacklistEntry1.blacklistedTimestamp;
    int i8 = blacklistEntry1.level;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1531610569766L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == (-1));

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test194"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    weatherSystemOpenWeather0.setId((int)(short)100);
    int i3 = weatherSystemOpenWeather0.getType();
    weatherSystemOpenWeather0.setSunrise(100);
    weatherSystemOpenWeather0.setId(100);
    weatherSystemOpenWeather0.setMessage((double)1531609936760L);
    int i10 = weatherSystemOpenWeather0.getId();
    weatherSystemOpenWeather0.setSunset(1);
    weatherSystemOpenWeather0.setSunrise((int)'#');
    weatherSystemOpenWeather0.setId((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 100);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test195"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.fun.TextCommand textCommand12 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array9);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array9);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand14 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array9);
    fredboat.command.music.control.JoinCommand joinCommand15 = new fredboat.command.music.control.JoinCommand("fredboat.util.BrainfuckException: ", str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test196"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    int i3 = openWeatherCurrent0.getId();
    java.lang.String str4 = openWeatherCurrent0.getFormattedDate();
    int i5 = openWeatherCurrent0.getDatetime();
    java.lang.String str6 = openWeatherCurrent0.getDataProviderIcon();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode7 = openWeatherCurrent0.errorType();
    int i8 = openWeatherCurrent0.getVisibility();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather9 = openWeatherCurrent0.getClouds();
    int i10 = openWeatherCurrent0.getCode();
    boolean b11 = openWeatherCurrent0.isError();
    java.lang.String str12 = openWeatherCurrent0.getDataProviderString();
    openWeatherCurrent0.setId((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str4.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str6.equals("https://i.imgur.com/YqZuqEB.jpg"));
    org.junit.Assert.assertTrue("'" + errorCode7 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode7.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str12.equals("Provided by OpenWeatherMap.org"));

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test197"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array7);
    fredboat.command.music.control.ShuffleCommand shuffleCommand9 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array7);
    fredboat.command.maintenance.GetIdCommand getIdCommand10 = new fredboat.command.maintenance.GetIdCommand("Provided by OpenWeatherMap.org", str_array7);
    fredboat.command.fun.FacedeskCommand facedeskCommand11 = new fredboat.command.fun.FacedeskCommand("Provided by OpenWeatherMap.org", "Bot Owner", str_array7);
    java.io.File file12 = facedeskCommand11.getRandomFile();
    java.io.File file13 = facedeskCommand11.getRandomFile();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(file13);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test198"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.getId();
    blacklistEntry1.setLevel(0);
    blacklistEntry1.setLevel((int)(byte)-1);
    long long10 = blacklistEntry1.id;
    int i11 = blacklistEntry1.level;
    blacklistEntry1.rateLimitReachedTimestamp = 1531610493140L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == (-1));

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test199"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext1);
    fredboat.audio.queue.AudioTrackContext audioTrackContext3 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext3);
    boolean b5 = simpleTrackProvider0.isEmpty();
    fredboat.audio.queue.RepeatMode repeatMode6 = simpleTrackProvider0.getRepeatMode();
    int i7 = simpleTrackProvider0.size();
    long long8 = simpleTrackProvider0.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider9 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext10 = simpleTrackProvider9.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext11 = null;
    boolean b12 = simpleTrackProvider9.remove(audioTrackContext11);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext13 = simpleTrackProvider9.getAsList();
    simpleTrackProvider0.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    org.junit.Assert.assertTrue("'" + repeatMode6 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode6.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext13);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test200"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    boolean b3 = simpleTrackProvider0.remove(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext4 = simpleTrackProvider0.getAsListOrdered();
    fredboat.audio.queue.RepeatMode repeatMode5 = simpleTrackProvider0.getRepeatMode();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext8 = simpleTrackProvider0.getTracksInRange((-1), 2);
    simpleTrackProvider0.clear();
    fredboat.audio.queue.AudioTrackContext audioTrackContext10 = simpleTrackProvider0.peek();
    simpleTrackProvider0.clear();
    int i12 = simpleTrackProvider0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext4);
    org.junit.Assert.assertTrue("'" + repeatMode5 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode5.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test201"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.fun.TextCommand textCommand11 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array8);
    fredboat.command.fun.RandomImageCommand randomImageCommand12 = new fredboat.command.fun.RandomImageCommand("https://i.imgur.com/YqZuqEB.jpg", "", str_array8);
    java.util.List<java.lang.String> list_str13 = randomImageCommand12.aliases;
    fredboat.messaging.internal.Context context14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = randomImageCommand12.help(context14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test202"); }

    fredboat.util.rest.Weather weather0 = null;
    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.fun.TextCommand textCommand14 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array11);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array11);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand16 = new fredboat.command.maintenance.AudioDebugCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.music.control.PauseCommand pauseCommand17 = new fredboat.command.music.control.PauseCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.util.WeatherCommand weatherCommand18 = new fredboat.command.util.WeatherCommand(weather0, "fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: \u2705", str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test203"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.util.MathCommand mathCommand11 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.UnpauseCommand unpauseCommand12 = new fredboat.command.music.control.UnpauseCommand("", str_array9);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand13 = new fredboat.command.moderation.EnableCommandsCommand("", str_array9);
    fredboat.command.music.seeking.RewindCommand rewindCommand14 = new fredboat.command.music.seeking.RewindCommand("", str_array9);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array9);
    fredboat.command.admin.UpdateCommand updateCommand16 = new fredboat.command.admin.UpdateCommand("", str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test204"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.admin.ExitCommand exitCommand17 = new fredboat.command.admin.ExitCommand("hi!", str_array15);
    fredboat.command.music.info.ListCommand listCommand18 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array15);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand19 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array15);
    fredboat.command.fun.PatCommand patCommand20 = new fredboat.command.fun.PatCommand("", "", str_array15);
    fredboat.command.music.info.HistoryCommand historyCommand21 = new fredboat.command.music.info.HistoryCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array15);
    fredboat.command.music.seeking.ForwardCommand forwardCommand22 = new fredboat.command.music.seeking.ForwardCommand("\u274C", str_array15);
    fredboat.command.music.seeking.ForwardCommand forwardCommand23 = new fredboat.command.music.seeking.ForwardCommand("hi!", str_array15);
    fredboat.command.music.info.ListCommand listCommand24 = new fredboat.command.music.info.ListCommand("User", str_array15);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand25 = new fredboat.command.admin.UnblacklistCommand("hi!", str_array15);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand26 = new fredboat.command.fun.RemoteFileCommand("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", "fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array15);
    fredboat.commandmeta.abs.CommandContext commandContext27 = null;
    // The following exception was thrown during execution in test generation
    try {
    remoteFileCommand26.onInvoke(commandContext27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test205"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "hi!", "hi!", "Provided by OpenWeatherMap.org" };
    fredboat.command.music.control.PauseCommand pauseCommand8 = new fredboat.command.music.control.PauseCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.music.info.ListCommand listCommand9 = new fredboat.command.music.info.ListCommand("", str_array7);
    fredboat.command.admin.BotRestartCommand botRestartCommand10 = new fredboat.command.admin.BotRestartCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array7);
    fredboat.command.music.seeking.SeekCommand seekCommand11 = new fredboat.command.music.seeking.SeekCommand("fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array7);
    fredboat.perms.PermissionLevel permissionLevel12 = seekCommand11.getMinimumPerms();
    fredboat.messaging.internal.Context context13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = seekCommand11.help(context13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test206"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    blacklistEntry1.blacklistedTimestamp = 1531609955167L;
    blacklistEntry1.blacklistedTimestamp = 1531610092127L;
    blacklistEntry1.blacklistedTimestamp = 1531610144717L;
    blacklistEntry1.level = 10000;
    int i14 = blacklistEntry1.getRateLimitReached();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test207"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    int i4 = blacklistEntry1.getRateLimitReached();
    blacklistEntry1.level = (short)10;
    blacklistEntry1.setRateLimitReachedTimestamp((long)5);
    blacklistEntry1.blacklistedTimestamp = (short)100;
    long long11 = blacklistEntry1.getRateLimitReachedTimestamp();
    blacklistEntry1.rateLimitReachedTimestamp = 1531610243618L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 5L);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test208"); }

    fredboat.db.entity.UConfig uConfig1 = new fredboat.db.entity.UConfig("fredboat.util.BrainfuckException: \uD83D\uDEAA");
    fredboat.db.entity.UConfig uConfig3 = uConfig1.setBearer("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test209"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    java.lang.String str4 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig6 = uConfig0.setRefresh("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    fredboat.util.GitRepoState gitRepoState7 = fredboat.util.GitRepoState.getGitRepositoryState();
    java.lang.String str8 = gitRepoState7.commitMessageShort;
    java.lang.String str9 = gitRepoState7.commitUserName;
    java.lang.String str10 = gitRepoState7.commitMessageFull;
    java.lang.String str11 = gitRepoState7.commitTime;
    java.lang.String str12 = gitRepoState7.commitIdAbbrev;
    java.lang.String str13 = gitRepoState7.branch;
    fredboat.util.Tuple2<fredboat.db.entity.UConfig,fredboat.util.GitRepoState> tuple2_uConfig_gitRepoState14 = new fredboat.util.Tuple2<fredboat.db.entity.UConfig,fredboat.util.GitRepoState>(uConfig6, gitRepoState7);
    fredboat.db.entity.UConfig uConfig15 = tuple2_uConfig_gitRepoState14.a;
    fredboat.db.entity.UConfig uConfig17 = uConfig15.setUserId("Bot Owner");
    fredboat.db.entity.UConfig uConfig19 = uConfig15.setBearer("http://i.imgur.com/NqyOqnj.gif");
    fredboat.db.entity.UConfig uConfig21 = uConfig19.setBearer("https://i.imgur.com/YqZuqEB.jpg");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u2705"+ "'", str4.equals("\u2705"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig21);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test210"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry(10L);
    int i2 = blacklistEntry1.level;
    long long3 = blacklistEntry1.getId();
    blacklistEntry1.blacklistedTimestamp = 1531610247548L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long3 == 10L);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test211"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather3 = openWeatherCurrent0.getClouds();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode4 = openWeatherCurrent0.errorType();
    boolean b5 = openWeatherCurrent0.isError();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather6 = openWeatherCurrent0.getSys();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather7 = openWeatherCurrent0.getSys();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather8 = openWeatherCurrent0.getSys();
    int i9 = openWeatherCurrent0.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather3);
    org.junit.Assert.assertTrue("'" + errorCode4 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode4.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test212"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    weatherSystemOpenWeather0.setId((int)(short)100);
    int i3 = weatherSystemOpenWeather0.getType();
    int i4 = weatherSystemOpenWeather0.getId();
    weatherSystemOpenWeather0.setSunrise(1);
    int i7 = weatherSystemOpenWeather0.getId();
    int i8 = weatherSystemOpenWeather0.getSunset();
    weatherSystemOpenWeather0.setMessage((double)1531610008386L);
    weatherSystemOpenWeather0.setType((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test213"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand13 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("hi!", str_array12);
    fredboat.command.music.info.ListCommand listCommand15 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand16 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array12);
    fredboat.command.fun.PatCommand patCommand17 = new fredboat.command.fun.PatCommand("", "", str_array12);
    fredboat.command.music.info.HistoryCommand historyCommand18 = new fredboat.command.music.info.HistoryCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.music.seeking.ForwardCommand forwardCommand19 = new fredboat.command.music.seeking.ForwardCommand("\u274C", str_array12);
    fredboat.command.music.seeking.ForwardCommand forwardCommand20 = new fredboat.command.music.seeking.ForwardCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand21 = new fredboat.command.music.control.ShuffleCommand("fredboat.util.rest.APILimitException: en_US", str_array12);
    fredboat.perms.PermissionLevel permissionLevel22 = shuffleCommand21.getMinimumPerms();
    java.lang.String str23 = permissionLevel22.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    org.junit.Assert.assertTrue("'" + permissionLevel22 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel22.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "DJ"+ "'", str23.equals("DJ"));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test214"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.util.ServerInfoCommand serverInfoCommand13 = new fredboat.command.util.ServerInfoCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand15 = new fredboat.command.admin.SetAvatarCommand("qua, 31 dez 1969, 09:00 PM", str_array10);
    fredboat.command.music.info.HistoryCommand historyCommand16 = new fredboat.command.music.info.HistoryCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.fun.CatgirlCommand catgirlCommand17 = new fredboat.command.fun.CatgirlCommand("\u274C", str_array10);
    fredboat.command.admin.TestCommand testCommand18 = new fredboat.command.admin.TestCommand("", str_array10);
    fredboat.messaging.internal.Context context19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = testCommand18.help(context19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test215"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("", str_array8);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array8);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand11 = new fredboat.command.admin.SetAvatarCommand("fredboat.util.BrainfuckException: ", str_array8);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("https://i.imgur.com/YqZuqEB.jpg", str_array8);
    fredboat.command.moderation.LanguageCommand languageCommand13 = new fredboat.command.moderation.LanguageCommand("Bot Owner", str_array8);
    fredboat.command.admin.BotRestartCommand botRestartCommand14 = new fredboat.command.admin.BotRestartCommand("Provided by OpenWeatherMap.org", str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test216"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array10);
    fredboat.command.fun.PatCommand patCommand15 = new fredboat.command.fun.PatCommand("", "", str_array10);
    fredboat.command.util.BrainfuckCommand brainfuckCommand16 = new fredboat.command.util.BrainfuckCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand17 = new fredboat.command.moderation.EnableCommandsCommand("fredboat.util.BrainfuckException: ", str_array10);
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = enableCommandsCommand17.help(context18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test217"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    boolean b2 = guildConfig0.isTrackAnnounce();
    java.lang.String str3 = guildConfig0.getLang();
    guildConfig0.setLang("Bot Admin");
    boolean b6 = guildConfig0.isAutoResume();
    boolean b7 = guildConfig0.isAutoResume();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "en_US"+ "'", str3.equals("en_US"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test218"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand17 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array11);
    fredboat.command.admin.EvalCommand evalCommand18 = new fredboat.command.admin.EvalCommand("https://i.imgur.com/YqZuqEB.jpg", str_array11);
    fredboat.command.moderation.LanguageCommand languageCommand19 = new fredboat.command.moderation.LanguageCommand("\u2705", str_array11);
    fredboat.command.moderation.ConfigCommand configCommand20 = new fredboat.command.moderation.ConfigCommand("\u2705", str_array11);
    fredboat.perms.PermissionLevel permissionLevel21 = configCommand20.getMinimumPerms();
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = configCommand20.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    org.junit.Assert.assertTrue("'" + permissionLevel21 + "' != '" + fredboat.perms.PermissionLevel.BASE + "'", permissionLevel21.equals(fredboat.perms.PermissionLevel.BASE));

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test219"); }

    fredboat.util.rest.Weather weather5 = null;
    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.fun.TextCommand textCommand16 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array13);
    fredboat.command.util.WeatherCommand weatherCommand17 = new fredboat.command.util.WeatherCommand(weather5, "Bot Admin", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand18 = new fredboat.command.admin.NodeAdminCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand19 = new fredboat.command.admin.SetAvatarCommand("\u2757", str_array13);
    fredboat.command.music.control.StopCommand stopCommand20 = new fredboat.command.music.control.StopCommand("fredboat.util.BrainfuckException: ", str_array13);
    fredboat.command.fun.PatCommand patCommand21 = new fredboat.command.fun.PatCommand("https://i.imgur.com/YqZuqEB.jpg", "", str_array13);
    java.lang.String str22 = patCommand21.getRandomImageUrl();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "http://i.imgur.com/NqyOqnj.gif"+ "'", str22.equals("http://i.imgur.com/NqyOqnj.gif"));

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test220"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand10 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.admin.ExitCommand exitCommand11 = new fredboat.command.admin.ExitCommand("hi!", str_array9);
    fredboat.command.music.info.ListCommand listCommand12 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand13 = new fredboat.command.moderation.DisableCommandsCommand("", str_array9);
    fredboat.command.admin.EvalCommand evalCommand14 = new fredboat.command.admin.EvalCommand("", str_array9);
    fredboat.command.util.CommandsCommand commandsCommand15 = new fredboat.command.util.CommandsCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.music.info.ListCommand listCommand16 = new fredboat.command.music.info.ListCommand("fredboat.util.BrainfuckException: hi!", str_array9);
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    listCommand16.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test221"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand16 = new fredboat.command.util.ServerInfoCommand("\u2705", str_array11);
    fredboat.command.maintenance.VersionCommand versionCommand17 = new fredboat.command.maintenance.VersionCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.admin.ExitCommand exitCommand18 = new fredboat.command.admin.ExitCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand19 = new fredboat.command.fun.RemoteFileCommand("", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    java.lang.String str20 = remoteFileCommand19.url;
    fredboat.messaging.internal.Context context21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str22 = remoteFileCommand19.help(context21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test222"); }

    java.lang.String[] str_array14 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array14);
    fredboat.command.music.control.ShuffleCommand shuffleCommand16 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.util.ServerInfoCommand serverInfoCommand17 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array14);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand18 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array14);
    fredboat.command.maintenance.VersionCommand versionCommand19 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand20 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array14);
    fredboat.command.music.control.JoinCommand joinCommand21 = new fredboat.command.music.control.JoinCommand("\uD83D\uDEAA", str_array14);
    fredboat.command.moderation.ConfigCommand configCommand22 = new fredboat.command.moderation.ConfigCommand("\u2757", str_array14);
    fredboat.command.maintenance.GetIdCommand getIdCommand23 = new fredboat.command.maintenance.GetIdCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array14);
    fredboat.command.fun.FacedeskCommand facedeskCommand24 = new fredboat.command.fun.FacedeskCommand("\uD83D\uDCDD", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array14);
    fredboat.command.maintenance.VersionCommand versionCommand25 = new fredboat.command.maintenance.VersionCommand("fredboat.util.BrainfuckException: ", str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test223"); }

    fredboat.util.rest.Weather weather3 = null;
    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.util.ServerInfoCommand serverInfoCommand16 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array13);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand17 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array13);
    fredboat.command.maintenance.VersionCommand versionCommand18 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.admin.ExitCommand exitCommand19 = new fredboat.command.admin.ExitCommand("\u274C", str_array13);
    fredboat.command.util.WeatherCommand weatherCommand20 = new fredboat.command.util.WeatherCommand(weather3, "https://i.imgur.com/YqZuqEB.jpg", str_array13);
    fredboat.command.fun.RandomImageCommand randomImageCommand21 = new fredboat.command.fun.RandomImageCommand("User", "https://i.imgur.com/YqZuqEB.jpg", str_array13);
    fredboat.command.util.BrainfuckCommand brainfuckCommand22 = new fredboat.command.util.BrainfuckCommand("https://i.imgur.com/YqZuqEB.jpg", str_array13);
    fredboat.commandmeta.abs.CommandContext commandContext23 = null;
    // The following exception was thrown during execution in test generation
    try {
    brainfuckCommand22.onInvoke(commandContext23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test224"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.getId();
    blacklistEntry1.setLevel(0);
    blacklistEntry1.setRateLimitReached((int)(byte)100);
    long long10 = blacklistEntry1.id;
    blacklistEntry1.id = 5;
    blacklistEntry1.blacklistedTimestamp = 'a';
    long long15 = blacklistEntry1.id;
    blacklistEntry1.level = (byte)0;
    long long18 = blacklistEntry1.getBlacklistedTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == 5L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long18 == 97L);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test225"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    java.lang.String str4 = uConfig3.getUserId();
    fredboat.db.entity.UConfig uConfig6 = uConfig3.setBearerExpiration(1531609962820L);
    java.lang.String str7 = uConfig6.getUserId();
    fredboat.db.entity.UConfig uConfig9 = uConfig6.setUserId("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    java.lang.String str10 = uConfig9.getRefresh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test226"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.maintenance.PingCommand pingCommand8 = new fredboat.command.maintenance.PingCommand("\u274C", str_array6);
    fredboat.command.music.control.StopCommand stopCommand9 = new fredboat.command.music.control.StopCommand("\u2757", str_array6);
    fredboat.command.fun.TextCommand textCommand10 = new fredboat.command.fun.TextCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "fredboat.util.BrainfuckException: \u2705", str_array6);
    textCommand10.msg = "fredboat.util.BrainfuckException: \u2705";
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test227"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.maintenance.PingCommand pingCommand10 = new fredboat.command.maintenance.PingCommand("\u274C", str_array8);
    fredboat.command.music.control.DestroyCommand destroyCommand11 = new fredboat.command.music.control.DestroyCommand("\u2757", str_array8);
    fredboat.command.util.AvatarCommand avatarCommand12 = new fredboat.command.util.AvatarCommand("http://i.imgur.com/NqyOqnj.gif", str_array8);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand("fredboat.util.BrainfuckException: hi!", str_array8);
    fredboat.command.admin.TestCommand testCommand14 = new fredboat.command.admin.TestCommand("\uD83D\uDEAA", str_array8);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand15 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: https://i.imgur.com/YqZuqEB.jpg", str_array8);
    fredboat.messaging.internal.Context context16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = unblacklistCommand15.help(context16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test228"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand12 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.music.info.ListCommand listCommand14 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array11);
    fredboat.command.util.BrainfuckCommand brainfuckCommand16 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.seeking.RestartCommand restartCommand17 = new fredboat.command.music.seeking.RestartCommand("hi!", str_array11);
    fredboat.command.admin.EvalCommand evalCommand18 = new fredboat.command.admin.EvalCommand("qua, 31 dez 1969, 09:00 PM", str_array11);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand19 = new fredboat.command.fun.RemoteFileCommand("", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    java.lang.String str20 = remoteFileCommand19.url;
    remoteFileCommand19.url = "fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: \u2705";
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test229"); }

    java.util.concurrent.TimeUnit timeUnit2 = null;
    // The following exception was thrown during execution in test generation
    try {
    fredboat.agent.StatsAgent statsAgent3 = new fredboat.agent.StatsAgent("fredboat.util.BrainfuckException: \uD83D\uDEAA", 35, timeUnit2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test230"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("hi!");
    guildConfig1.setLang("\u2757");
    guildConfig1.setTrackAnnounce(false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test231"); }

    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather0 = new fredboat.util.rest.models.weather.CloudsOpenWeather();
    int i1 = cloudsOpenWeather0.getAll();
    cloudsOpenWeather0.setAll((int)'#');
    int i4 = cloudsOpenWeather0.getAll();
    int i5 = cloudsOpenWeather0.getAll();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 35);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test232"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setPressure(10);
    double d3 = weatherMainOpenWeather0.getTempMin();
    weatherMainOpenWeather0.setPressure((int)'4');
    weatherMainOpenWeather0.setTemp(0.0d);
    int i8 = weatherMainOpenWeather0.getHumidity();
    weatherMainOpenWeather0.setPressure(10);
    double d11 = weatherMainOpenWeather0.getTempMin();
    double d12 = weatherMainOpenWeather0.getTempMin();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d12 == 0.0d);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test233"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str2 = guildPermissions1.getDjList();
    guildPermissions0.setUserList(list_str2);
    java.lang.String[] str_array8 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("", str_array8);
    fredboat.command.music.control.LeaveCommand leaveCommand10 = new fredboat.command.music.control.LeaveCommand("hi!", str_array8);
    fredboat.perms.PermissionLevel permissionLevel11 = leaveCommand10.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel12 = leaveCommand10.getMinimumPerms();
    java.util.List<java.lang.String> list_str13 = guildPermissions0.getFromEnum(permissionLevel12);
    java.util.List<java.lang.String> list_str14 = guildPermissions0.getAdminList();
    fredboat.db.entity.GuildPermissions guildPermissions15 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions16 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str17 = guildPermissions16.getDjList();
    guildPermissions15.setUserList(list_str17);
    java.lang.String[] str_array23 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand24 = new fredboat.command.music.control.RepeatCommand("", str_array23);
    fredboat.command.music.control.LeaveCommand leaveCommand25 = new fredboat.command.music.control.LeaveCommand("hi!", str_array23);
    fredboat.perms.PermissionLevel permissionLevel26 = leaveCommand25.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel27 = leaveCommand25.getMinimumPerms();
    java.util.List<java.lang.String> list_str28 = guildPermissions15.getFromEnum(permissionLevel27);
    java.util.List<java.lang.String> list_str29 = guildPermissions15.getAdminList();
    guildPermissions0.setDjList(list_str29);
    java.util.List<java.lang.String> list_str31 = guildPermissions0.getUserList();
    guildPermissions0.setId(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    fredboat.db.entity.GuildPermissions guildPermissions34 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array44 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand45 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array44);
    fredboat.command.music.control.ShuffleCommand shuffleCommand46 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array44);
    fredboat.command.fun.TextCommand textCommand47 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array44);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand48 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array44);
    fredboat.command.fun.FacedeskCommand facedeskCommand49 = new fredboat.command.fun.FacedeskCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array44);
    java.util.List<java.lang.String> list_str50 = facedeskCommand49.aliases;
    guildPermissions34.setUserList(list_str50);
    java.lang.String[] str_array56 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand57 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array56);
    fredboat.command.util.MathCommand mathCommand58 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array56);
    java.util.List<java.lang.String> list_str59 = mathCommand58.aliases;
    guildPermissions34.setAdminList(list_str59);
    java.lang.String[] str_array65 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand66 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array65);
    fredboat.command.admin.ExitCommand exitCommand67 = new fredboat.command.admin.ExitCommand("hi!", str_array65);
    java.util.List<java.lang.String> list_str68 = exitCommand67.aliases;
    guildPermissions34.setDjList(list_str68);
    guildPermissions0.setDjList(list_str68);
    guildPermissions0.setId("fredboat.util.BrainfuckException: \u2705");
    java.util.List<java.lang.String> list_str73 = guildPermissions0.getAdminList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel11 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel11.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    org.junit.Assert.assertTrue("'" + permissionLevel26 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel26.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel27 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel27.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str73);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test234"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider0.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext4 = simpleTrackProvider0.getTracksInRange(3000, 10);
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext6 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext6);
    fredboat.audio.queue.AudioTrackContext audioTrackContext8 = null;
    boolean b9 = simpleTrackProvider0.remove(audioTrackContext8);
    boolean b10 = simpleTrackProvider0.isShuffle();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test235"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    boolean b3 = simpleTrackProvider0.isEmpty();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange((int)(byte)10, 10000);
    long long7 = simpleTrackProvider0.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider8 = new fredboat.audio.queue.SimpleTrackProvider();
    boolean b9 = simpleTrackProvider8.isEmpty();
    simpleTrackProvider8.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider11 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider11.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext13 = simpleTrackProvider11.getAsListOrdered();
    simpleTrackProvider8.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext13);
    fredboat.audio.queue.RepeatMode repeatMode15 = simpleTrackProvider8.getRepeatMode();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext18 = simpleTrackProvider8.getTracksInRange((int)(short)1, 0);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext19 = simpleTrackProvider8.getAsList();
    simpleTrackProvider0.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext19);
    simpleTrackProvider0.clear();
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext13);
    org.junit.Assert.assertTrue("'" + repeatMode15 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode15.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext19);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test236"); }

    fredboat.agent.StatsAgent statsAgent1 = new fredboat.agent.StatsAgent("fredboat.util.BrainfuckException: ");
    // The following exception was thrown during execution in test generation
    try {
    fredboat.agent.FredBoatAgent.startNow((fredboat.agent.FredBoatAgent)statsAgent1);
      org.junit.Assert.fail("Expected exception of type java.util.concurrent.RejectedExecutionException");
    } catch (java.util.concurrent.RejectedExecutionException e) {
      // Expected exception.
    }

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test237"); }

    fredboat.agent.StatsAgent statsAgent1 = new fredboat.agent.StatsAgent("https://i.imgur.com/YqZuqEB.jpg");
    // The following exception was thrown during execution in test generation
    try {
    fredboat.agent.FredBoatAgent.startNow((fredboat.agent.FredBoatAgent)statsAgent1);
      org.junit.Assert.fail("Expected exception of type java.util.concurrent.RejectedExecutionException");
    } catch (java.util.concurrent.RejectedExecutionException e) {
      // Expected exception.
    }

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test238"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry(10L);
    blacklistEntry1.setRateLimitReachedTimestamp(1531609939130L);
    blacklistEntry1.setRateLimitReached((int)(byte)10);
    long long6 = blacklistEntry1.getBlacklistedTimestamp();
    blacklistEntry1.id = 1531610051326L;
    blacklistEntry1.rateLimitReachedTimestamp = 1531610488977L;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 1531610576234L);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test239"); }

    java.lang.String[] str_array16 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand17 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array16);
    fredboat.command.admin.ExitCommand exitCommand18 = new fredboat.command.admin.ExitCommand("hi!", str_array16);
    fredboat.command.music.info.ListCommand listCommand19 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array16);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand20 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array16);
    fredboat.command.fun.PatCommand patCommand21 = new fredboat.command.fun.PatCommand("", "", str_array16);
    fredboat.command.music.info.HistoryCommand historyCommand22 = new fredboat.command.music.info.HistoryCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array16);
    fredboat.command.music.seeking.ForwardCommand forwardCommand23 = new fredboat.command.music.seeking.ForwardCommand("\u274C", str_array16);
    fredboat.command.music.seeking.ForwardCommand forwardCommand24 = new fredboat.command.music.seeking.ForwardCommand("hi!", str_array16);
    fredboat.command.music.info.ListCommand listCommand25 = new fredboat.command.music.info.ListCommand("User", str_array16);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand26 = new fredboat.command.admin.UnblacklistCommand("hi!", str_array16);
    fredboat.command.admin.BotRestartCommand botRestartCommand27 = new fredboat.command.admin.BotRestartCommand("hi!", str_array16);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand28 = new fredboat.command.music.control.PlaySplitCommand("", str_array16);
    fredboat.command.music.control.ShuffleCommand shuffleCommand29 = new fredboat.command.music.control.ShuffleCommand("fredboat.util.rest.APILimitException: en_US", str_array16);
    fredboat.messaging.internal.Context context30 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str31 = shuffleCommand29.help(context30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test240"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array7);
    fredboat.command.util.CommandsCommand commandsCommand10 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array7);
    fredboat.command.maintenance.PingCommand pingCommand11 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array7);
    fredboat.command.music.seeking.RewindCommand rewindCommand12 = new fredboat.command.music.seeking.RewindCommand("\u2705", str_array7);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand13 = new fredboat.command.maintenance.AudioDebugCommand("", str_array7);
    fredboat.messaging.internal.Context context14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = audioDebugCommand13.help(context14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test241"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    weatherMainOpenWeather0.setHumidity((int)(byte)100);
    int i5 = weatherMainOpenWeather0.getPressure();
    int i6 = weatherMainOpenWeather0.getHumidity();
    weatherMainOpenWeather0.setTempMin((double)1531610002700L);
    weatherMainOpenWeather0.setTemp(0.0d);
    int i11 = weatherMainOpenWeather0.getHumidity();
    weatherMainOpenWeather0.setTempMax((double)1531610261315L);
    int i14 = weatherMainOpenWeather0.getPressure();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test242"); }

    fredboat.commandmeta.MessagingException messagingException1 = new fredboat.commandmeta.MessagingException("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test243"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    long long6 = blacklistEntry1.getBlacklistedTimestamp();
    int i7 = blacklistEntry1.level;
    int i8 = blacklistEntry1.rateLimitReached;
    int i9 = blacklistEntry1.getLevel();
    int i10 = blacklistEntry1.rateLimitReached;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test244"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.util.MathCommand mathCommand11 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.UnpauseCommand unpauseCommand12 = new fredboat.command.music.control.UnpauseCommand("", str_array9);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand13 = new fredboat.command.admin.SetAvatarCommand("Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand14 = new fredboat.command.admin.SetAvatarCommand("fredboat.util.rest.APILimitException: en_US", str_array9);
    fredboat.command.fun.PatCommand patCommand15 = new fredboat.command.fun.PatCommand("\u274C", "Bot Owner", str_array9);
    fredboat.messaging.internal.Context context16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = patCommand15.help(context16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test245"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array10);
    fredboat.command.util.BrainfuckCommand brainfuckCommand15 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.seeking.RestartCommand restartCommand16 = new fredboat.command.music.seeking.RestartCommand("hi!", str_array10);
    fredboat.command.maintenance.GetIdCommand getIdCommand17 = new fredboat.command.maintenance.GetIdCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.music.control.StopCommand stopCommand18 = new fredboat.command.music.control.StopCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.perms.PermissionLevel permissionLevel19 = stopCommand18.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel20 = stopCommand18.getMinimumPerms();
    fredboat.messaging.internal.Context context21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str22 = stopCommand18.help(context21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel20 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel20.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test246"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.music.info.ListCommand listCommand7 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array5);
    java.util.List<java.lang.String> list_str8 = listCommand7.aliases;
    guildPermissions1.setDjList(list_str8);
    guildPermissions0.setUserList(list_str8);
    fredboat.db.entity.GuildPermissions guildPermissions11 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions12 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str13 = guildPermissions12.getDjList();
    guildPermissions11.setUserList(list_str13);
    java.lang.String[] str_array19 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand20 = new fredboat.command.music.control.RepeatCommand("", str_array19);
    fredboat.command.music.control.LeaveCommand leaveCommand21 = new fredboat.command.music.control.LeaveCommand("hi!", str_array19);
    fredboat.perms.PermissionLevel permissionLevel22 = leaveCommand21.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel23 = leaveCommand21.getMinimumPerms();
    java.util.List<java.lang.String> list_str24 = guildPermissions11.getFromEnum(permissionLevel23);
    java.util.List<java.lang.String> list_str25 = guildPermissions11.getAdminList();
    fredboat.db.entity.GuildPermissions guildPermissions26 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions27 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str28 = guildPermissions27.getDjList();
    guildPermissions26.setUserList(list_str28);
    java.lang.String[] str_array34 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand35 = new fredboat.command.music.control.RepeatCommand("", str_array34);
    fredboat.command.music.control.LeaveCommand leaveCommand36 = new fredboat.command.music.control.LeaveCommand("hi!", str_array34);
    fredboat.perms.PermissionLevel permissionLevel37 = leaveCommand36.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel38 = leaveCommand36.getMinimumPerms();
    java.util.List<java.lang.String> list_str39 = guildPermissions26.getFromEnum(permissionLevel38);
    java.util.List<java.lang.String> list_str40 = guildPermissions26.getAdminList();
    guildPermissions11.setDjList(list_str40);
    fredboat.db.entity.GuildPermissions guildPermissions42 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array46 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand47 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array46);
    fredboat.command.music.info.ListCommand listCommand48 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array46);
    java.util.List<java.lang.String> list_str49 = listCommand48.aliases;
    guildPermissions42.setDjList(list_str49);
    guildPermissions11.setUserList(list_str49);
    guildPermissions0.setDjList(list_str49);
    java.util.List<java.lang.String> list_str53 = guildPermissions0.getUserList();
    java.lang.String[] str_array59 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand60 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array59);
    fredboat.command.music.control.RepeatCommand repeatCommand61 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array59);
    fredboat.command.music.seeking.RestartCommand restartCommand62 = new fredboat.command.music.seeking.RestartCommand("", str_array59);
    fredboat.command.music.control.LeaveCommand leaveCommand63 = new fredboat.command.music.control.LeaveCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array59);
    fredboat.perms.PermissionLevel permissionLevel64 = leaveCommand63.getMinimumPerms();
    java.util.List<java.lang.String> list_str65 = guildPermissions0.getFromEnum(permissionLevel64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array19);
    org.junit.Assert.assertTrue("'" + permissionLevel22 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel22.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel23 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel23.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array34);
    org.junit.Assert.assertTrue("'" + permissionLevel37 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel37.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel38 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel38.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array59);
    org.junit.Assert.assertTrue("'" + permissionLevel64 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel64.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str65);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test247"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand13 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("hi!", str_array12);
    fredboat.command.music.info.ListCommand listCommand15 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand16 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array12);
    fredboat.command.fun.PatCommand patCommand17 = new fredboat.command.fun.PatCommand("", "", str_array12);
    fredboat.command.util.BrainfuckCommand brainfuckCommand18 = new fredboat.command.util.BrainfuckCommand("http://i.imgur.com/NqyOqnj.gif", str_array12);
    fredboat.command.moderation.LanguageCommand languageCommand19 = new fredboat.command.moderation.LanguageCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.fun.RandomImageCommand randomImageCommand20 = new fredboat.command.fun.RandomImageCommand("fredboat.util.BrainfuckException: \u2705", "\uD83D\uDEAA", str_array12);
    // The following exception was thrown during execution in test generation
    try {
    fredboat.util.rest.Http.Params params21 = fredboat.util.rest.Http.Params.of(str_array12);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test248"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    boolean b2 = guildConfig0.isTrackAnnounce();
    boolean b3 = guildConfig0.isAutoResume();
    guildConfig0.setLang(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    guildConfig0.setId("");
    guildConfig0.setTrackAnnounce(true);
    java.lang.String str10 = guildConfig0.getGuildId();
    java.lang.String str11 = guildConfig0.getGuildId();
    java.lang.String str12 = guildConfig0.getLang();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D"+ "'", str12.equals(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D"));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test249"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array6);
    fredboat.command.music.control.ShuffleCommand shuffleCommand8 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.fun.TextCommand textCommand9 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array6);
    java.lang.String str10 = textCommand9.msg;
    fredboat.commandmeta.abs.CommandContext commandContext11 = null;
    // The following exception was thrown during execution in test generation
    try {
    textCommand9.onInvoke(commandContext11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str10.equals("Provided by OpenWeatherMap.org"));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test250"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.util.CommandsCommand commandsCommand12 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("\u2705", str_array9);
    fredboat.command.music.control.DestroyCommand destroyCommand14 = new fredboat.command.music.control.DestroyCommand("Bot Admin", str_array9);
    fredboat.command.maintenance.NodesCommand nodesCommand15 = new fredboat.command.maintenance.NodesCommand("\u274C", str_array9);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand16 = new fredboat.command.music.control.PlaySplitCommand("", str_array9);
    fredboat.command.admin.ReviveCommand reviveCommand17 = new fredboat.command.admin.ReviveCommand("User", str_array9);
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = reviveCommand17.help(context18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test251"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array8);
    fredboat.command.util.CommandsCommand commandsCommand11 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.PingCommand pingCommand12 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array8);
    fredboat.command.music.seeking.RewindCommand rewindCommand13 = new fredboat.command.music.seeking.RewindCommand("\u2705", str_array8);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("fredboat.util.BrainfuckException: \u2705", str_array8);
    fredboat.command.music.control.DestroyCommand destroyCommand15 = new fredboat.command.music.control.DestroyCommand("User", str_array8);
    fredboat.perms.PermissionLevel permissionLevel16 = destroyCommand15.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    destroyCommand15.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test252"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.info.ListCommand listCommand8 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.maintenance.NodesCommand nodesCommand9 = new fredboat.command.maintenance.NodesCommand("", str_array6);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand10 = new fredboat.command.moderation.EnableCommandsCommand("qua, 31 dez 1969, 09:00 PM", str_array6);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand11 = new fredboat.command.admin.UnblacklistCommand("Bot Owner", str_array6);
    fredboat.perms.PermissionLevel permissionLevel12 = unblacklistCommand11.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test253"); }

    fredboat.util.rest.Weather weather2 = null;
    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.fun.TextCommand textCommand13 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array10);
    fredboat.command.util.WeatherCommand weatherCommand14 = new fredboat.command.util.WeatherCommand(weather2, "Bot Admin", str_array10);
    fredboat.command.maintenance.GetIdCommand getIdCommand15 = new fredboat.command.maintenance.GetIdCommand("DJ", str_array10);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("Provided by OpenWeatherMap.org", str_array10);
    fredboat.messaging.internal.Context context17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = nodeAdminCommand16.help(context17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test254"); }

    fredboat.agent.StatsAgent statsAgent1 = new fredboat.agent.StatsAgent("fredboat.util.BrainfuckException: https://i.imgur.com/YqZuqEB.jpg");

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test255"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand7 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.music.control.UnpauseCommand unpauseCommand8 = new fredboat.command.music.control.UnpauseCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.music.control.JoinCommand joinCommand9 = new fredboat.command.music.control.JoinCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand10 = new fredboat.command.music.control.ReshuffleCommand("\uD83D\uDCDD", str_array6);
    fredboat.perms.PermissionLevel permissionLevel11 = reshuffleCommand10.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    org.junit.Assert.assertTrue("'" + permissionLevel11 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel11.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test256"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.util.MathCommand mathCommand11 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.UnpauseCommand unpauseCommand12 = new fredboat.command.music.control.UnpauseCommand("", str_array9);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array9);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("\u2705", str_array9);
    fredboat.command.util.ServerInfoCommand serverInfoCommand15 = new fredboat.command.util.ServerInfoCommand("http://i.imgur.com/NqyOqnj.gif", str_array9);
    fredboat.command.admin.TestCommand testCommand16 = new fredboat.command.admin.TestCommand("https://i.imgur.com/YqZuqEB.jpg", str_array9);
    fredboat.messaging.internal.Context context17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = testCommand16.help(context17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test257"); }

    fredboat.util.GitRepoState gitRepoState0 = fredboat.util.GitRepoState.getGitRepositoryState();
    java.lang.String str1 = gitRepoState0.commitMessageShort;
    java.lang.String str2 = gitRepoState0.commitMessageShort;
    java.lang.String str3 = gitRepoState0.branch;
    java.lang.String str4 = gitRepoState0.branch;
    java.lang.String str5 = gitRepoState0.commitUserName;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test258"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext1);
    fredboat.audio.queue.AudioTrackContext audioTrackContext3 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext3);
    boolean b5 = simpleTrackProvider0.isEmpty();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider6 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider6.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext8 = simpleTrackProvider6.getAsListOrdered();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext9 = simpleTrackProvider6.getAsList();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext9);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext11 = simpleTrackProvider0.getAsListOrdered();
    simpleTrackProvider0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext11);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test259"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    java.lang.String str4 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig6 = uConfig0.setRefresh("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    fredboat.db.entity.UConfig uConfig8 = uConfig6.setRefresh("en_US");
    fredboat.db.entity.UConfig uConfig10 = uConfig6.setBearerExpiration((long)(short)10);
    fredboat.db.entity.UConfig uConfig12 = uConfig6.setRefresh("hi!");
    fredboat.db.entity.UConfig uConfig14 = uConfig12.setBearer("fredboat.util.BrainfuckException: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u2705"+ "'", str4.equals("\u2705"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig14);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test260"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    java.lang.String str1 = openWeatherCurrent0.getLocation();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather2 = openWeatherCurrent0.getClouds();
    int i3 = openWeatherCurrent0.getVisibility();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather4 = openWeatherCurrent0.getClouds();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather5 = openWeatherCurrent0.getSys();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather5);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test261"); }

    fredboat.agent.StatsAgent statsAgent1 = new fredboat.agent.StatsAgent("fredboat.util.BrainfuckException: \uD83D\uDEAA");
    statsAgent1.run();
    fredboat.agent.StatsAgent.Action action3 = null;
    statsAgent1.addAction(action3);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test262"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    java.lang.String str1 = weatherOpenWeather0.getDescription();
    weatherOpenWeather0.setDescription(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    java.lang.String str4 = weatherOpenWeather0.getMain();
    weatherOpenWeather0.setDescription("Bot Admin");
    java.lang.String str7 = weatherOpenWeather0.getDescription();
    java.lang.String str8 = weatherOpenWeather0.getDescription();
    java.lang.String str9 = weatherOpenWeather0.getMain();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Bot Admin"+ "'", str7.equals("Bot Admin"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Bot Admin"+ "'", str8.equals("Bot Admin"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test263"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand16 = new fredboat.command.music.control.RepeatCommand("", str_array15);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array15);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand18 = new fredboat.command.fun.RemoteFileCommand("\u274C", "Bot Admin", str_array15);
    fredboat.command.fun.RollCommand rollCommand19 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "Provided by OpenWeatherMap.org", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand20 = new fredboat.command.music.control.ShuffleCommand("DJ", str_array15);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand21 = new fredboat.command.maintenance.AudioDebugCommand("Base", str_array15);
    fredboat.command.admin.UpdateCommand updateCommand22 = new fredboat.command.admin.UpdateCommand("Provided by OpenWeatherMap.org", str_array15);
    fredboat.command.fun.CatgirlCommand catgirlCommand23 = new fredboat.command.fun.CatgirlCommand("\u2757", str_array15);
    fredboat.command.fun.FacedeskCommand facedeskCommand24 = new fredboat.command.fun.FacedeskCommand("", "fredboat.util.BrainfuckException: \u2705", str_array15);
    fredboat.command.fun.CatgirlCommand catgirlCommand25 = new fredboat.command.fun.CatgirlCommand("Provided by OpenWeatherMap.org", str_array15);
    fredboat.commandmeta.abs.CommandContext commandContext26 = null;
    // The following exception was thrown during execution in test generation
    try {
    catgirlCommand25.onInvoke(commandContext26);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test264"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    java.lang.String str1 = weatherOpenWeather0.getDescription();
    java.lang.String str2 = weatherOpenWeather0.getMain();
    weatherOpenWeather0.setMain("Bot Owner");
    weatherOpenWeather0.setId((int)'#');
    weatherOpenWeather0.setMain("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test265"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.admin.UpdateCommand updateCommand10 = new fredboat.command.admin.UpdateCommand("", str_array8);
    fredboat.command.fun.CatgirlCommand catgirlCommand11 = new fredboat.command.fun.CatgirlCommand("Bot Admin", str_array8);
    fredboat.command.maintenance.VersionCommand versionCommand12 = new fredboat.command.maintenance.VersionCommand("\u2705", str_array8);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand("", str_array8);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("\u2757", str_array8);
    fredboat.commandmeta.abs.CommandContext commandContext15 = null;
    // The following exception was thrown during execution in test generation
    try {
    nodeAdminCommand14.onInvoke(commandContext15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test266"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.util.MathCommand mathCommand11 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.UnpauseCommand unpauseCommand12 = new fredboat.command.music.control.UnpauseCommand("", str_array9);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array9);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand14 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand15 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array9);
    fredboat.command.admin.EvalCommand evalCommand16 = new fredboat.command.admin.EvalCommand("https://i.imgur.com/YqZuqEB.jpg", str_array9);
    fredboat.perms.PermissionLevel permissionLevel17 = evalCommand16.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel18 = evalCommand16.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    org.junit.Assert.assertTrue("'" + permissionLevel17 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel17.equals(fredboat.perms.PermissionLevel.BOT_OWNER));
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test267"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    weatherOpenWeather0.setId((int)(byte)0);
    weatherOpenWeather0.setId(0);
    int i5 = weatherOpenWeather0.getId();
    java.lang.String str6 = weatherOpenWeather0.getIcon();
    weatherOpenWeather0.setId(5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test268"); }

    java.lang.String[] str_array3 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand4 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array3);
    fredboat.perms.PermissionLevel permissionLevel5 = nodeAdminCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel6 = nodeAdminCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel7 = nodeAdminCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel8 = nodeAdminCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel9 = nodeAdminCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel10 = nodeAdminCommand4.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    org.junit.Assert.assertTrue("'" + permissionLevel5 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel5.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel6 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel6.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel7 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel7.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel8 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel8.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel9 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel9.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel10 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel10.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test269"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    java.lang.String str1 = weatherSystemOpenWeather0.getCountry();
    int i2 = weatherSystemOpenWeather0.getType();
    int i3 = weatherSystemOpenWeather0.getSunrise();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test270"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array7);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("", str_array7);
    fredboat.command.fun.TextCommand textCommand11 = new fredboat.command.fun.TextCommand("hi!", "fredboat.util.BrainfuckException: \u2705", str_array7);
    fredboat.command.maintenance.NodesCommand nodesCommand12 = new fredboat.command.maintenance.NodesCommand("\uD83D\uDEAA", str_array7);
    fredboat.commandmeta.abs.CommandContext commandContext13 = null;
    // The following exception was thrown during execution in test generation
    try {
    nodesCommand12.onInvoke(commandContext13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test271"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand17 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array11);
    fredboat.command.admin.TestCommand testCommand18 = new fredboat.command.admin.TestCommand("", str_array11);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand19 = new fredboat.command.music.control.PlaySplitCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array11);
    fredboat.command.admin.BotRestartCommand botRestartCommand20 = new fredboat.command.admin.BotRestartCommand("", str_array11);
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    botRestartCommand20.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test272"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.fun.TextCommand textCommand18 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array15);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand19 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand20 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array15);
    fredboat.command.moderation.ConfigCommand configCommand21 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.fun.HugCommand hugCommand22 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array15);
    fredboat.command.fun.HugCommand hugCommand23 = new fredboat.command.fun.HugCommand("fredboat.util.BrainfuckException: hi!", "fredboat.util.BrainfuckException: ", str_array15);
    fredboat.command.moderation.ConfigCommand configCommand24 = new fredboat.command.moderation.ConfigCommand("Bot Admin", str_array15);
    fredboat.command.music.control.StopCommand stopCommand25 = new fredboat.command.music.control.StopCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array15);
    fredboat.commandmeta.abs.CommandContext commandContext26 = null;
    // The following exception was thrown during execution in test generation
    try {
    stopCommand25.onInvoke(commandContext26);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test273"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.fun.TextCommand textCommand12 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array9);
    fredboat.command.util.WeatherCommand weatherCommand13 = new fredboat.command.util.WeatherCommand(weather1, "Bot Admin", str_array9);
    fredboat.command.music.control.StopCommand stopCommand14 = new fredboat.command.music.control.StopCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array9);
    fredboat.perms.PermissionLevel permissionLevel15 = stopCommand14.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel16 = stopCommand14.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    stopCommand14.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    org.junit.Assert.assertTrue("'" + permissionLevel15 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel15.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test274"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.util.ServerInfoCommand serverInfoCommand16 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array13);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand17 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array13);
    fredboat.command.maintenance.VersionCommand versionCommand18 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand19 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array13);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand20 = new fredboat.command.admin.UnblacklistCommand("en_US", str_array13);
    fredboat.command.maintenance.NodesCommand nodesCommand21 = new fredboat.command.maintenance.NodesCommand("Provided by OpenWeatherMap.org", str_array13);
    fredboat.command.music.info.HistoryCommand historyCommand22 = new fredboat.command.music.info.HistoryCommand("", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand23 = new fredboat.command.music.control.ShuffleCommand("Bot Admin", str_array13);
    fredboat.command.music.control.StopCommand stopCommand24 = new fredboat.command.music.control.StopCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.messaging.internal.Context context25 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str26 = stopCommand24.help(context25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test275"); }

    fredboat.util.rest.Weather weather0 = null;
    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.util.CommandsCommand commandsCommand12 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.maintenance.PingCommand pingCommand13 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array9);
    fredboat.command.music.seeking.RewindCommand rewindCommand14 = new fredboat.command.music.seeking.RewindCommand("\u2705", str_array9);
    fredboat.command.music.control.UnpauseCommand unpauseCommand15 = new fredboat.command.music.control.UnpauseCommand("fredboat.util.BrainfuckException: \u2705", str_array9);
    fredboat.command.util.WeatherCommand weatherCommand16 = new fredboat.command.util.WeatherCommand(weather0, "fredboat.util.BrainfuckException: ", str_array9);
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    weatherCommand16.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test276"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    int i1 = weatherSystemOpenWeather0.getType();
    int i2 = weatherSystemOpenWeather0.getSunrise();
    weatherSystemOpenWeather0.setId((int)(short)100);
    weatherSystemOpenWeather0.setType((int)(short)-1);
    int i7 = weatherSystemOpenWeather0.getSunrise();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test277"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.lang.Long[] long_array7 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long8 = new java.util.ArrayList<java.lang.Long>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long8, long_array7);
    simpleTrackProvider0.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long8);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext13 = simpleTrackProvider0.getTracksInRange(5, (int)(byte)100);
    int i14 = simpleTrackProvider0.size();
    fredboat.audio.queue.AudioTrackContext audioTrackContext15 = null;
    boolean b16 = simpleTrackProvider0.remove(audioTrackContext15);
    simpleTrackProvider0.setShuffle(false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test278"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.admin.UpdateCommand updateCommand12 = new fredboat.command.admin.UpdateCommand("", str_array10);
    fredboat.command.fun.CatgirlCommand catgirlCommand13 = new fredboat.command.fun.CatgirlCommand("Bot Admin", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand("\u2705", str_array10);
    fredboat.command.util.MathCommand mathCommand15 = new fredboat.command.util.MathCommand("", str_array10);
    fredboat.command.fun.RollCommand rollCommand16 = new fredboat.command.fun.RollCommand("Base", "fredboat.util.BrainfuckException: hi!", str_array10);
    fredboat.command.music.control.LeaveCommand leaveCommand17 = new fredboat.command.music.control.LeaveCommand("fredboat.util.rest.APILimitException: en_US", str_array10);
    fredboat.perms.PermissionLevel permissionLevel18 = leaveCommand17.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext19 = null;
    // The following exception was thrown during execution in test generation
    try {
    leaveCommand17.onInvoke(commandContext19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test279"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather1 = openWeatherCurrent0.getSys();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderIcon();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather3 = openWeatherCurrent0.getClouds();
    boolean b4 = openWeatherCurrent0.isError();
    int i5 = openWeatherCurrent0.getId();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode6 = openWeatherCurrent0.errorType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str2.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    org.junit.Assert.assertTrue("'" + errorCode6 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode6.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test280"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    java.lang.String str1 = weatherSystemOpenWeather0.getCountry();
    int i2 = weatherSystemOpenWeather0.getType();
    java.lang.String str3 = weatherSystemOpenWeather0.getCountry();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test281"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.util.ServerInfoCommand serverInfoCommand12 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array9);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand13 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array9);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand15 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.music.control.DestroyCommand destroyCommand16 = new fredboat.command.music.control.DestroyCommand("Base", str_array9);
    fredboat.messaging.internal.Context context17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = destroyCommand16.help(context17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test282"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand13 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("hi!", str_array12);
    fredboat.command.music.info.ListCommand listCommand15 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand16 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array12);
    fredboat.command.fun.PatCommand patCommand17 = new fredboat.command.fun.PatCommand("", "", str_array12);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand18 = new fredboat.command.admin.UnblacklistCommand("hi!", str_array12);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand19 = new fredboat.command.music.control.ReshuffleCommand("\uD83D\uDEAA", str_array12);
    fredboat.command.music.control.JoinCommand joinCommand20 = new fredboat.command.music.control.JoinCommand("https://i.imgur.com/YqZuqEB.jpg", str_array12);
    fredboat.command.music.control.PauseCommand pauseCommand21 = new fredboat.command.music.control.PauseCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.perms.PermissionLevel permissionLevel22 = pauseCommand21.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel23 = pauseCommand21.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel24 = pauseCommand21.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext25 = null;
    // The following exception was thrown during execution in test generation
    try {
    pauseCommand21.onInvoke(commandContext25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    org.junit.Assert.assertTrue("'" + permissionLevel22 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel22.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel23 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel23.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel24 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel24.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test283"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand13 = new fredboat.command.music.control.RepeatCommand("", str_array12);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array12);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand15 = new fredboat.command.fun.RemoteFileCommand("\u274C", "Bot Admin", str_array12);
    fredboat.command.fun.RollCommand rollCommand16 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand("DJ", str_array12);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand18 = new fredboat.command.maintenance.AudioDebugCommand("Base", str_array12);
    fredboat.command.admin.UpdateCommand updateCommand19 = new fredboat.command.admin.UpdateCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.moderation.LanguageCommand languageCommand20 = new fredboat.command.moderation.LanguageCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    languageCommand20.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test284"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array8);
    fredboat.command.util.CommandsCommand commandsCommand11 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.PingCommand pingCommand12 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array8);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand("https://i.imgur.com/YqZuqEB.jpg", str_array8);
    fredboat.command.music.seeking.RewindCommand rewindCommand15 = new fredboat.command.music.seeking.RewindCommand("DJ", str_array8);
    fredboat.perms.PermissionLevel permissionLevel16 = rewindCommand15.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    rewindCommand15.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test285"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.music.info.ListCommand listCommand7 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array5);
    java.util.List<java.lang.String> list_str8 = listCommand7.aliases;
    guildPermissions1.setDjList(list_str8);
    guildPermissions0.setUserList(list_str8);
    java.util.List<java.lang.String> list_str11 = guildPermissions0.getAdminList();
    fredboat.db.entity.GuildPermissions guildPermissions12 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions13 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str14 = guildPermissions13.getDjList();
    guildPermissions12.setUserList(list_str14);
    java.lang.String[] str_array20 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand21 = new fredboat.command.music.control.RepeatCommand("", str_array20);
    fredboat.command.music.control.LeaveCommand leaveCommand22 = new fredboat.command.music.control.LeaveCommand("hi!", str_array20);
    fredboat.perms.PermissionLevel permissionLevel23 = leaveCommand22.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel24 = leaveCommand22.getMinimumPerms();
    java.util.List<java.lang.String> list_str25 = guildPermissions12.getFromEnum(permissionLevel24);
    java.util.List<java.lang.String> list_str26 = guildPermissions12.getAdminList();
    fredboat.db.entity.GuildPermissions guildPermissions27 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions28 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str29 = guildPermissions28.getDjList();
    guildPermissions27.setUserList(list_str29);
    java.lang.String[] str_array35 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand36 = new fredboat.command.music.control.RepeatCommand("", str_array35);
    fredboat.command.music.control.LeaveCommand leaveCommand37 = new fredboat.command.music.control.LeaveCommand("hi!", str_array35);
    fredboat.perms.PermissionLevel permissionLevel38 = leaveCommand37.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel39 = leaveCommand37.getMinimumPerms();
    java.util.List<java.lang.String> list_str40 = guildPermissions27.getFromEnum(permissionLevel39);
    java.util.List<java.lang.String> list_str41 = guildPermissions27.getAdminList();
    guildPermissions12.setDjList(list_str41);
    guildPermissions0.setAdminList(list_str41);
    java.lang.String[] str_array53 = new java.lang.String[] { "hi!", "hi!", "Base", "fredboat.util.BrainfuckException: \u2705", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "en_US", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "fredboat.util.BrainfuckException: ", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    java.util.ArrayList<java.lang.String> arraylist_str54 = new java.util.ArrayList<java.lang.String>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str54, str_array53);
    guildPermissions0.setDjList((java.util.List<java.lang.String>)arraylist_str54);
    fredboat.db.entity.GuildPermissions guildPermissions57 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions58 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array62 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand63 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array62);
    fredboat.command.music.info.ListCommand listCommand64 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array62);
    java.util.List<java.lang.String> list_str65 = listCommand64.aliases;
    guildPermissions58.setDjList(list_str65);
    guildPermissions57.setUserList(list_str65);
    java.util.List<java.lang.String> list_str68 = guildPermissions57.getDjList();
    java.util.List<java.lang.String> list_str69 = guildPermissions57.getUserList();
    fredboat.perms.PermissionLevel permissionLevel70 = fredboat.perms.PermissionLevel.ADMIN;
    java.lang.String[] str_array80 = new java.lang.String[] { "hi!", "Bot Owner", "\u274C", "en_US", "hi!", "hi!", "\u2705", "Provided by OpenWeatherMap.org", "en_US" };
    java.util.ArrayList<java.lang.String> arraylist_str81 = new java.util.ArrayList<java.lang.String>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>)arraylist_str81, str_array80);
    guildPermissions57.setFromEnum(permissionLevel70, (java.util.List<java.lang.String>)arraylist_str81);
    guildPermissions0.setDjList((java.util.List<java.lang.String>)arraylist_str81);
    guildPermissions0.setId("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: \u2705");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array20);
    org.junit.Assert.assertTrue("'" + permissionLevel23 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel23.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel24 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel24.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array35);
    org.junit.Assert.assertTrue("'" + permissionLevel38 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel38.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel39 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel39.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str69);
    org.junit.Assert.assertTrue("'" + permissionLevel70 + "' != '" + fredboat.perms.PermissionLevel.ADMIN + "'", permissionLevel70.equals(fredboat.perms.PermissionLevel.ADMIN));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test286"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.util.ServerInfoCommand serverInfoCommand13 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand15 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand16 = new fredboat.command.admin.ExitCommand("\u274C", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand17 = new fredboat.command.maintenance.VersionCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array10);
    fredboat.command.music.seeking.SeekCommand seekCommand18 = new fredboat.command.music.seeking.SeekCommand("User", str_array10);
    fredboat.perms.PermissionLevel permissionLevel19 = seekCommand18.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel20 = seekCommand18.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel20 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel20.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test287"); }

    fredboat.audio.queue.PlaylistInfo.Source source2 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo3 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source2);
    playlistInfo3.setTotalTracks((int)(short)0);
    java.lang.String str6 = playlistInfo3.getName();
    playlistInfo3.setName("Provided by OpenWeatherMap.org");
    playlistInfo3.setTotalTracks((int)(byte)100);
    int i11 = playlistInfo3.getTotalTracks();
    org.junit.Assert.assertTrue("'" + source2 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source2.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u2757"+ "'", str6.equals("\u2757"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 100);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test288"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode2 = openWeatherCurrent0.errorType();
    int i3 = openWeatherCurrent0.getId();
    java.util.List<fredboat.util.rest.models.weather.WeatherOpenWeather> list_weatherOpenWeather4 = openWeatherCurrent0.getWeather();
    int i5 = openWeatherCurrent0.getId();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode6 = openWeatherCurrent0.errorType();
    int i7 = openWeatherCurrent0.getDatetime();
    boolean b8 = openWeatherCurrent0.isError();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    org.junit.Assert.assertTrue("'" + errorCode2 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode2.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_weatherOpenWeather4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    org.junit.Assert.assertTrue("'" + errorCode6 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode6.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test289"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather3 = openWeatherCurrent0.getClouds();
    java.lang.String str4 = openWeatherCurrent0.getThumbnailUrl();
    openWeatherCurrent0.setId((int)(byte)0);
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode7 = openWeatherCurrent0.errorType();
    java.util.List<fredboat.util.rest.models.weather.WeatherOpenWeather> list_weatherOpenWeather8 = openWeatherCurrent0.getWeather();
    openWeatherCurrent0.setId((int)(byte)10);
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode11 = openWeatherCurrent0.errorType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    org.junit.Assert.assertTrue("'" + errorCode7 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode7.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_weatherOpenWeather8);
    org.junit.Assert.assertTrue("'" + errorCode11 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode11.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test290"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    int i2 = simpleTrackProvider0.size();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider3 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode4 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider3.setRepeatMode(repeatMode4);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider6 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext7 = simpleTrackProvider6.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext8 = null;
    simpleTrackProvider6.setLastTrack(audioTrackContext8);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext10 = simpleTrackProvider6.getAsListOrdered();
    simpleTrackProvider3.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext10);
    fredboat.audio.queue.AudioTrackContext audioTrackContext12 = null;
    boolean b13 = simpleTrackProvider3.remove(audioTrackContext12);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider15 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext16 = simpleTrackProvider15.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext17 = null;
    simpleTrackProvider15.setLastTrack(audioTrackContext17);
    java.lang.Long[] long_array22 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long23 = new java.util.ArrayList<java.lang.Long>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long23, long_array22);
    simpleTrackProvider15.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long23);
    java.lang.String[] str_array30 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand31 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array30);
    fredboat.command.admin.ExitCommand exitCommand32 = new fredboat.command.admin.ExitCommand("hi!", str_array30);
    java.util.List<java.lang.String> list_str33 = exitCommand32.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand34 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long23, exitCommand32);
    boolean b35 = simpleTrackProvider3.isUserTrackOwner(1531609933098L, (java.util.Collection<java.lang.Long>)arraylist_long23);
    long long36 = simpleTrackProvider3.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider37 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext38 = null;
    simpleTrackProvider37.setLastTrack(audioTrackContext38);
    int i40 = simpleTrackProvider37.size();
    fredboat.audio.queue.AudioTrackContext audioTrackContext41 = simpleTrackProvider37.peek();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider42 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext43 = simpleTrackProvider42.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext44 = null;
    simpleTrackProvider42.setLastTrack(audioTrackContext44);
    java.lang.Long[] long_array49 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long50 = new java.util.ArrayList<java.lang.Long>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long50, long_array49);
    simpleTrackProvider42.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long50);
    simpleTrackProvider37.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long50);
    simpleTrackProvider3.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long50);
    simpleTrackProvider0.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long50);
    fredboat.audio.queue.AudioTrackContext audioTrackContext56 = simpleTrackProvider0.peek();
    fredboat.audio.queue.AudioTrackContext audioTrackContext57 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext58 = null;
    // The following exception was thrown during execution in test generation
    try {
    simpleTrackProvider0.add(audioTrackContext58);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    org.junit.Assert.assertTrue("'" + repeatMode4 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode4.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long36 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext57);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test291"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    java.lang.String str4 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig6 = uConfig0.setRefresh("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    fredboat.db.entity.UConfig uConfig8 = uConfig0.setBearer("hi!");
    fredboat.db.entity.UConfig uConfig10 = uConfig8.setUserId("hi!");
    uConfig8.setId("fredboat.util.BrainfuckException: :\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u2705"+ "'", str4.equals("\u2705"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig10);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test292"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    boolean b2 = guildConfig0.isTrackAnnounce();
    boolean b3 = guildConfig0.isAutoResume();
    guildConfig0.setLang("DJ");
    guildConfig0.setLang("http://i.imgur.com/NqyOqnj.gif");
    java.lang.String str8 = guildConfig0.getLang();
    guildConfig0.setTrackAnnounce(false);
    java.lang.String str11 = guildConfig0.getLang();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "http://i.imgur.com/NqyOqnj.gif"+ "'", str8.equals("http://i.imgur.com/NqyOqnj.gif"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "http://i.imgur.com/NqyOqnj.gif"+ "'", str11.equals("http://i.imgur.com/NqyOqnj.gif"));

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test293"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand17 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array11);
    fredboat.command.admin.EvalCommand evalCommand18 = new fredboat.command.admin.EvalCommand("https://i.imgur.com/YqZuqEB.jpg", str_array11);
    fredboat.command.moderation.LanguageCommand languageCommand19 = new fredboat.command.moderation.LanguageCommand("\u2705", str_array11);
    fredboat.command.moderation.ConfigCommand configCommand20 = new fredboat.command.moderation.ConfigCommand("\u2705", str_array11);
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    configCommand20.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test294"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.control.RepeatCommand repeatCommand8 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array6);
    fredboat.command.util.CommandsCommand commandsCommand9 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.music.control.StopCommand stopCommand10 = new fredboat.command.music.control.StopCommand("hi!", str_array6);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand11 = new fredboat.command.moderation.EnableCommandsCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.perms.PermissionLevel permissionLevel12 = enableCommandsCommand11.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel13 = enableCommandsCommand11.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext14 = null;
    // The following exception was thrown during execution in test generation
    try {
    enableCommandsCommand11.onInvoke(commandContext14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel13 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel13.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test295"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.RepeatMode repeatMode2 = fredboat.audio.queue.RepeatMode.OFF;
    simpleTrackProvider0.setRepeatMode(repeatMode2);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider4 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = simpleTrackProvider4.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext6 = null;
    simpleTrackProvider4.setLastTrack(audioTrackContext6);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext10 = simpleTrackProvider4.getTracksInRange((int)(byte)10, 10000);
    fredboat.audio.queue.AudioTrackContext audioTrackContext11 = simpleTrackProvider4.peek();
    simpleTrackProvider4.skipped();
    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather13 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    weatherOpenWeather13.setMain(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    weatherOpenWeather13.setMain("Provided by OpenWeatherMap.org");
    java.lang.String[] str_array24 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand25 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array24);
    fredboat.command.admin.ExitCommand exitCommand26 = new fredboat.command.admin.ExitCommand("hi!", str_array24);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand27 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array24);
    fredboat.command.moderation.LanguageCommand languageCommand28 = new fredboat.command.moderation.LanguageCommand("\u2757", str_array24);
    fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand> tuple2_weatherOpenWeather_languageCommand29 = new fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand>(weatherOpenWeather13, languageCommand28);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider30 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode31 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider30.setRepeatMode(repeatMode31);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider33 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext34 = simpleTrackProvider33.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext35 = null;
    simpleTrackProvider33.setLastTrack(audioTrackContext35);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext37 = simpleTrackProvider33.getAsListOrdered();
    simpleTrackProvider30.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext37);
    fredboat.audio.queue.AudioTrackContext audioTrackContext39 = null;
    boolean b40 = simpleTrackProvider30.remove(audioTrackContext39);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext41 = simpleTrackProvider30.getAsList();
    fredboat.util.Tuple2<fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand>,fredboat.audio.queue.ITrackProvider> tuple2_tuple2_weatherOpenWeather_languageCommand_iTrackProvider42 = new fredboat.util.Tuple2<fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand>,fredboat.audio.queue.ITrackProvider>(tuple2_weatherOpenWeather_languageCommand29, (fredboat.audio.queue.ITrackProvider)simpleTrackProvider30);
    fredboat.audio.queue.RepeatMode repeatMode43 = simpleTrackProvider30.getRepeatMode();
    simpleTrackProvider4.setRepeatMode(repeatMode43);
    simpleTrackProvider0.setRepeatMode(repeatMode43);
    int i46 = simpleTrackProvider0.streamsCount();
    int i47 = simpleTrackProvider0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    org.junit.Assert.assertTrue("'" + repeatMode2 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode2.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array24);
    org.junit.Assert.assertTrue("'" + repeatMode31 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode31.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext41);
    org.junit.Assert.assertTrue("'" + repeatMode43 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode43.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test296"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.RepeatMode repeatMode2 = fredboat.audio.queue.RepeatMode.OFF;
    simpleTrackProvider0.setRepeatMode(repeatMode2);
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext4);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getAsListOrdered();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider7 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode8 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider7.setRepeatMode(repeatMode8);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext10 = simpleTrackProvider7.getAsListOrdered();
    simpleTrackProvider7.clear();
    int i12 = simpleTrackProvider7.size();
    fredboat.audio.queue.RepeatMode repeatMode13 = simpleTrackProvider7.getRepeatMode();
    simpleTrackProvider0.setRepeatMode(repeatMode13);
    // The following exception was thrown during execution in test generation
    try {
    fredboat.audio.queue.AudioTrackContext audioTrackContext16 = simpleTrackProvider0.getTrack((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    org.junit.Assert.assertTrue("'" + repeatMode2 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode2.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    org.junit.Assert.assertTrue("'" + repeatMode8 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode8.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    org.junit.Assert.assertTrue("'" + repeatMode13 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode13.equals(fredboat.audio.queue.RepeatMode.SINGLE));

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test297"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.util.MathCommand mathCommand10 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.music.control.UnpauseCommand unpauseCommand11 = new fredboat.command.music.control.UnpauseCommand("", str_array8);
    fredboat.command.music.control.UnpauseCommand unpauseCommand12 = new fredboat.command.music.control.UnpauseCommand("Bot Owner", str_array8);
    fredboat.command.admin.EvalCommand evalCommand13 = new fredboat.command.admin.EvalCommand("http://i.imgur.com/NqyOqnj.gif", str_array8);
    fredboat.command.maintenance.PingCommand pingCommand14 = new fredboat.command.maintenance.PingCommand("\u2705", str_array8);
    fredboat.messaging.internal.Context context15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = pingCommand14.help(context15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test298"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.util.CommandsCommand commandsCommand12 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.maintenance.PingCommand pingCommand13 = new fredboat.command.maintenance.PingCommand("qua, 31 dez 1969, 09:00 PM", str_array9);
    fredboat.command.music.info.ListCommand listCommand14 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.maintenance.VersionCommand versionCommand15 = new fredboat.command.maintenance.VersionCommand("https://i.imgur.com/YqZuqEB.jpg", str_array9);
    fredboat.command.music.seeking.RestartCommand restartCommand16 = new fredboat.command.music.seeking.RestartCommand("Base", str_array9);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand17 = new fredboat.command.music.control.ReshuffleCommand("fredboat.util.rest.APILimitException: en_US", str_array9);
    fredboat.commandmeta.abs.CommandContext commandContext18 = null;
    // The following exception was thrown during execution in test generation
    try {
    reshuffleCommand17.onInvoke(commandContext18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test299"); }

    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode0 = fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG;
    fredboat.util.rest.models.weather.WeatherError weatherError1 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    java.lang.String str2 = weatherError1.getDataProviderIcon();
    boolean b3 = weatherError1.isError();
    java.lang.String str4 = weatherError1.getTemperature();
    java.lang.String str5 = weatherError1.getDataProviderString();
    java.lang.String str6 = weatherError1.getDataProviderIcon();
    org.junit.Assert.assertTrue("'" + errorCode0 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode0.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test300"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.fun.TextCommand textCommand16 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand18 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array13);
    fredboat.command.moderation.ConfigCommand configCommand19 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array13);
    fredboat.command.fun.HugCommand hugCommand20 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array13);
    fredboat.command.admin.EvalCommand evalCommand21 = new fredboat.command.admin.EvalCommand("qua, 31 dez 1969, 09:00 PM", str_array13);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand22 = new fredboat.command.moderation.DisableCommandsCommand("", str_array13);
    fredboat.commandmeta.abs.CommandContext commandContext23 = null;
    // The following exception was thrown during execution in test generation
    try {
    disableCommandsCommand22.onInvoke(commandContext23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test301"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.admin.ExitCommand exitCommand17 = new fredboat.command.admin.ExitCommand("hi!", str_array15);
    fredboat.command.music.info.ListCommand listCommand18 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array15);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand19 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array15);
    fredboat.command.fun.PatCommand patCommand20 = new fredboat.command.fun.PatCommand("", "", str_array15);
    fredboat.command.music.info.HistoryCommand historyCommand21 = new fredboat.command.music.info.HistoryCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array15);
    fredboat.command.music.seeking.ForwardCommand forwardCommand22 = new fredboat.command.music.seeking.ForwardCommand("\u274C", str_array15);
    fredboat.command.music.seeking.ForwardCommand forwardCommand23 = new fredboat.command.music.seeking.ForwardCommand("hi!", str_array15);
    fredboat.command.music.info.ListCommand listCommand24 = new fredboat.command.music.info.ListCommand("User", str_array15);
    fredboat.command.music.control.StopCommand stopCommand25 = new fredboat.command.music.control.StopCommand("DJ", str_array15);
    fredboat.command.util.MathCommand mathCommand26 = new fredboat.command.util.MathCommand("\uD83D\uDCDD", str_array15);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand27 = new fredboat.command.moderation.DisableCommandsCommand("\uD83D\uDCDD", str_array15);
    fredboat.perms.PermissionLevel permissionLevel28 = disableCommandsCommand27.getMinimumPerms();
    fredboat.messaging.internal.Context context29 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str30 = disableCommandsCommand27.help(context29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    org.junit.Assert.assertTrue("'" + permissionLevel28 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel28.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test302"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    weatherMainOpenWeather0.setTempMax((double)0);
    double d5 = weatherMainOpenWeather0.getTempMax();
    double d6 = weatherMainOpenWeather0.getTemp();
    weatherMainOpenWeather0.setHumidity((int)(short)-1);
    weatherMainOpenWeather0.setTempMax((double)1531610519754L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d6 == 0.0d);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test303"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    boolean b3 = simpleTrackProvider0.remove(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext4 = simpleTrackProvider0.getAsListOrdered();
    fredboat.audio.queue.RepeatMode repeatMode5 = simpleTrackProvider0.getRepeatMode();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext8 = simpleTrackProvider0.getTracksInRange((-1), 2);
    simpleTrackProvider0.clear();
    fredboat.audio.queue.AudioTrackContext audioTrackContext10 = simpleTrackProvider0.peek();
    simpleTrackProvider0.clear();
    fredboat.audio.queue.AudioTrackContext audioTrackContext12 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext12);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext14 = simpleTrackProvider0.getAsListOrdered();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext4);
    org.junit.Assert.assertTrue("'" + repeatMode5 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode5.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext14);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test304"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.util.AvatarCommand avatarCommand13 = new fredboat.command.util.AvatarCommand("\uD83D\uDEAA", str_array10);
    fredboat.command.fun.CatgirlCommand catgirlCommand14 = new fredboat.command.fun.CatgirlCommand("hi!", str_array10);
    fredboat.command.moderation.LanguageCommand languageCommand15 = new fredboat.command.moderation.LanguageCommand("en_US", str_array10);
    fredboat.command.music.info.ListCommand listCommand16 = new fredboat.command.music.info.ListCommand("\uD83D\uDEAA", str_array10);
    fredboat.command.music.control.JoinCommand joinCommand17 = new fredboat.command.music.control.JoinCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand18 = new fredboat.command.moderation.DisableCommandsCommand("fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array10);
    fredboat.perms.PermissionLevel permissionLevel19 = disableCommandsCommand18.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test305"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array7);
    fredboat.command.admin.UpdateCommand updateCommand9 = new fredboat.command.admin.UpdateCommand("", str_array7);
    fredboat.command.fun.FacedeskCommand facedeskCommand10 = new fredboat.command.fun.FacedeskCommand("Bot Admin", "qua, 31 dez 1969, 09:00 PM", str_array7);
    fredboat.command.music.control.DestroyCommand destroyCommand11 = new fredboat.command.music.control.DestroyCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array7);
    fredboat.perms.PermissionLevel permissionLevel12 = destroyCommand11.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext13 = null;
    // The following exception was thrown during execution in test generation
    try {
    destroyCommand11.onInvoke(commandContext13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test306"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider3 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = simpleTrackProvider3.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = null;
    simpleTrackProvider3.setLastTrack(audioTrackContext5);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext7 = simpleTrackProvider3.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext7);
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = null;
    boolean b10 = simpleTrackProvider0.remove(audioTrackContext9);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider12 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext13 = simpleTrackProvider12.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext14 = null;
    simpleTrackProvider12.setLastTrack(audioTrackContext14);
    java.lang.Long[] long_array19 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long20 = new java.util.ArrayList<java.lang.Long>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long20, long_array19);
    simpleTrackProvider12.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long20);
    java.lang.String[] str_array27 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand28 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array27);
    fredboat.command.admin.ExitCommand exitCommand29 = new fredboat.command.admin.ExitCommand("hi!", str_array27);
    java.util.List<java.lang.String> list_str30 = exitCommand29.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand31 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long20, exitCommand29);
    boolean b32 = simpleTrackProvider0.isUserTrackOwner(1531609933098L, (java.util.Collection<java.lang.Long>)arraylist_long20);
    // The following exception was thrown during execution in test generation
    try {
    fredboat.audio.queue.AudioTrackContext audioTrackContext34 = simpleTrackProvider0.getTrack((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test307"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand13 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.music.control.RepeatCommand repeatCommand14 = new fredboat.command.music.control.RepeatCommand("", str_array11);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("hi!", "fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand16 = new fredboat.command.music.info.HistoryCommand("qua, 31 dez 1969, 09:00 PM", str_array11);
    fredboat.command.music.control.JoinCommand joinCommand17 = new fredboat.command.music.control.JoinCommand("\uD83D\uDCDD", str_array11);
    fredboat.command.maintenance.PingCommand pingCommand18 = new fredboat.command.maintenance.PingCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand19 = new fredboat.command.moderation.DisableCommandsCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand20 = new fredboat.command.music.info.HistoryCommand("", str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test308"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.control.RepeatCommand repeatCommand8 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array6);
    fredboat.command.util.CommandsCommand commandsCommand9 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\u2705", str_array6);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array6);
    fredboat.commandmeta.abs.CommandContext commandContext12 = null;
    // The following exception was thrown during execution in test generation
    try {
    nodeAdminCommand11.onInvoke(commandContext12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test309"); }

    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode0 = fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG;
    fredboat.util.rest.models.weather.WeatherError weatherError1 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    java.lang.String str2 = weatherError1.getDataProviderIcon();
    java.lang.String str3 = weatherError1.getFormattedDate();
    java.lang.String str4 = weatherError1.getFormattedDate();
    java.lang.String str5 = weatherError1.getThumbnailUrl();
    java.lang.String str6 = weatherError1.getDataProviderString();
    org.junit.Assert.assertTrue("'" + errorCode0 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode0.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test310"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.util.MathCommand mathCommand12 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.UnpauseCommand unpauseCommand13 = new fredboat.command.music.control.UnpauseCommand("", str_array10);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.admin.BotRestartCommand botRestartCommand15 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.admin.ReviveCommand reviveCommand16 = new fredboat.command.admin.ReviveCommand("", str_array10);
    fredboat.command.admin.TestCommand testCommand17 = new fredboat.command.admin.TestCommand("", str_array10);
    fredboat.command.util.CommandsCommand commandsCommand18 = new fredboat.command.util.CommandsCommand("hi!", str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test311"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    long long6 = blacklistEntry1.getBlacklistedTimestamp();
    blacklistEntry1.rateLimitReached = 10;
    blacklistEntry1.level = 97;
    blacklistEntry1.id = 1531609988169L;
    blacklistEntry1.setRateLimitReachedTimestamp((long)97);
    long long15 = blacklistEntry1.blacklistedTimestamp;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long15 == (-1L));

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test312"); }

    fredboat.audio.queue.PlaylistInfo.Source source2 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo3 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source2);
    playlistInfo3.setName("hi!");
    int i6 = playlistInfo3.getTotalTracks();
    fredboat.audio.queue.PlaylistInfo.Source source11 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo12 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source11);
    fredboat.audio.queue.PlaylistInfo playlistInfo13 = new fredboat.audio.queue.PlaylistInfo(0, "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", source11);
    playlistInfo3.setSource(source11);
    int i15 = playlistInfo3.getTotalTracks();
    int i16 = playlistInfo3.getTotalTracks();
    fredboat.audio.queue.PlaylistInfo.Source source17 = playlistInfo3.getSource();
    org.junit.Assert.assertTrue("'" + source2 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source2.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 100);
    org.junit.Assert.assertTrue("'" + source11 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source11.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 100);
    org.junit.Assert.assertTrue("'" + source17 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source17.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test313"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.maintenance.PingCommand pingCommand7 = new fredboat.command.maintenance.PingCommand("\u274C", str_array5);
    fredboat.command.music.info.HistoryCommand historyCommand8 = new fredboat.command.music.info.HistoryCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array5);
    fredboat.command.admin.UpdateCommand updateCommand9 = new fredboat.command.admin.UpdateCommand("DJ", str_array5);
    fredboat.commandmeta.abs.CommandContext commandContext10 = null;
    // The following exception was thrown during execution in test generation
    try {
    updateCommand9.onInvoke(commandContext10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test314"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    java.lang.String str4 = uConfig3.getUserId();
    fredboat.db.entity.UConfig uConfig6 = uConfig3.setBearerExpiration(1531609962820L);
    java.lang.String str7 = uConfig6.getUserId();
    fredboat.db.entity.UConfig uConfig9 = uConfig6.setRefresh("\uD83D\uDEAA");
    java.lang.String str10 = uConfig9.getRefresh();
    fredboat.db.entity.UConfig uConfig12 = uConfig9.setUserId("qua, 31 dez 1969, 09:00 PM");
    fredboat.db.entity.UConfig uConfig14 = uConfig12.setBearerExpiration(1531609997185L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "\uD83D\uDEAA"+ "'", str10.equals("\uD83D\uDEAA"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig14);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test315"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand11 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.util.ServerInfoCommand serverInfoCommand12 = new fredboat.command.util.ServerInfoCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.UnpauseCommand unpauseCommand13 = new fredboat.command.music.control.UnpauseCommand("http://i.imgur.com/NqyOqnj.gif", str_array9);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand14 = new fredboat.command.admin.SetAvatarCommand("qua, 31 dez 1969, 09:00 PM", str_array9);
    fredboat.command.util.MathCommand mathCommand15 = new fredboat.command.util.MathCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array9);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array9);
    fredboat.perms.PermissionLevel permissionLevel17 = enableCommandsCommand16.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext18 = null;
    // The following exception was thrown during execution in test generation
    try {
    enableCommandsCommand16.onInvoke(commandContext18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    org.junit.Assert.assertTrue("'" + permissionLevel17 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel17.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test316"); }

    java.lang.String[] str_array11 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand12 = new fredboat.command.fun.HugCommand("", "\u274C", str_array11);
    fredboat.command.fun.TextCommand textCommand13 = new fredboat.command.fun.TextCommand("\uD83D\uDCDD", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand14 = new fredboat.command.admin.SetAvatarCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array11);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand15 = new fredboat.command.music.control.PlaySplitCommand("Base", str_array11);
    fredboat.commandmeta.abs.CommandContext commandContext16 = null;
    // The following exception was thrown during execution in test generation
    try {
    playSplitCommand15.onInvoke(commandContext16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test317"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider3 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = simpleTrackProvider3.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = null;
    simpleTrackProvider3.setLastTrack(audioTrackContext5);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext7 = simpleTrackProvider3.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext7);
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext9);
    int i11 = simpleTrackProvider0.size();
    fredboat.audio.queue.RepeatMode repeatMode12 = simpleTrackProvider0.getRepeatMode();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider13 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider13.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext17 = simpleTrackProvider13.getTracksInRange(3000, 10);
    fredboat.audio.queue.AudioTrackContext audioTrackContext18 = simpleTrackProvider13.provideAudioTrack();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext19 = simpleTrackProvider13.getAsList();
    fredboat.audio.queue.AudioTrackContext audioTrackContext20 = simpleTrackProvider13.provideAudioTrack();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext21 = simpleTrackProvider13.getAsList();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider22 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider24 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext25 = simpleTrackProvider24.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext26 = null;
    simpleTrackProvider24.setLastTrack(audioTrackContext26);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext30 = simpleTrackProvider24.getTracksInRange((int)(byte)10, 10000);
    simpleTrackProvider24.clear();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider32 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext33 = simpleTrackProvider32.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext34 = null;
    simpleTrackProvider32.setLastTrack(audioTrackContext34);
    java.lang.Long[] long_array39 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long40 = new java.util.ArrayList<java.lang.Long>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long40, long_array39);
    simpleTrackProvider32.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long40);
    java.lang.String[] str_array47 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand48 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array47);
    fredboat.command.admin.ExitCommand exitCommand49 = new fredboat.command.admin.ExitCommand("hi!", str_array47);
    java.util.List<java.lang.String> list_str50 = exitCommand49.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand51 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long40, exitCommand49);
    java.util.ArrayList<java.lang.Long> arraylist_long52 = tuple2_arraylist_long_exitCommand51.a;
    simpleTrackProvider24.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long52);
    fredboat.audio.queue.AudioTrackContext audioTrackContext54 = null;
    simpleTrackProvider24.setLastTrack(audioTrackContext54);
    java.lang.Long[] long_array67 = new java.lang.Long[] { 1531609951964L, 1531609964731L, 1531609983118L, 1531609931147L, 100L, 1531609983118L, 1531609973887L, 1531609958152L, 1531610008386L, 1531609935745L };
    java.util.ArrayList<java.lang.Long> arraylist_long68 = new java.util.ArrayList<java.lang.Long>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long68, long_array67);
    boolean b70 = simpleTrackProvider24.isUserTrackOwner(1531609951964L, (java.util.Collection<java.lang.Long>)arraylist_long68);
    boolean b71 = simpleTrackProvider22.isUserTrackOwner(1531610113204L, (java.util.Collection<java.lang.Long>)arraylist_long68);
    simpleTrackProvider13.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long68);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider73 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext74 = simpleTrackProvider73.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext75 = null;
    simpleTrackProvider73.setLastTrack(audioTrackContext75);
    simpleTrackProvider73.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider78 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext79 = simpleTrackProvider78.provideAudioTrack();
    int i80 = simpleTrackProvider78.size();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext81 = simpleTrackProvider78.getAsListOrdered();
    simpleTrackProvider73.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext81);
    boolean b83 = simpleTrackProvider73.isShuffle();
    simpleTrackProvider73.setShuffle(true);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider86 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider86.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext90 = simpleTrackProvider86.getTracksInRange(3000, 10);
    fredboat.audio.queue.AudioTrackContext audioTrackContext91 = simpleTrackProvider86.provideAudioTrack();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext92 = simpleTrackProvider86.getAsList();
    simpleTrackProvider73.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext92);
    simpleTrackProvider13.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext92);
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext92);
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    org.junit.Assert.assertTrue("'" + repeatMode12 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode12.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_long52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext92);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test318"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    weatherOpenWeather0.setMain(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    weatherOpenWeather0.setMain("Provided by OpenWeatherMap.org");
    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand12 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand14 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array11);
    fredboat.command.moderation.LanguageCommand languageCommand15 = new fredboat.command.moderation.LanguageCommand("\u2757", str_array11);
    fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand> tuple2_weatherOpenWeather_languageCommand16 = new fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherOpenWeather,fredboat.command.moderation.LanguageCommand>(weatherOpenWeather0, languageCommand15);
    java.lang.String str17 = weatherOpenWeather0.getMain();
    int i18 = weatherOpenWeather0.getId();
    int i19 = weatherOpenWeather0.getId();
    java.lang.String str20 = weatherOpenWeather0.getIcon();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str17.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test319"); }

    fredboat.agent.StatsAgent statsAgent1 = new fredboat.agent.StatsAgent("Bot Owner");
    fredboat.agent.StatsAgent.Action action2 = null;
    statsAgent1.addAction(action2);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test320"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.util.ServerInfoCommand serverInfoCommand16 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array13);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand17 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array13);
    fredboat.command.maintenance.VersionCommand versionCommand18 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand19 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array13);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand20 = new fredboat.command.admin.UnblacklistCommand("en_US", str_array13);
    fredboat.command.maintenance.NodesCommand nodesCommand21 = new fredboat.command.maintenance.NodesCommand("Provided by OpenWeatherMap.org", str_array13);
    fredboat.command.music.info.HistoryCommand historyCommand22 = new fredboat.command.music.info.HistoryCommand("", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand23 = new fredboat.command.music.control.ShuffleCommand("Bot Admin", str_array13);
    fredboat.command.music.control.StopCommand stopCommand24 = new fredboat.command.music.control.StopCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.commandmeta.abs.CommandContext commandContext25 = null;
    // The following exception was thrown during execution in test generation
    try {
    stopCommand24.onInvoke(commandContext25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test321"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.getId();
    blacklistEntry1.setLevel(0);
    blacklistEntry1.rateLimitReached = 10;
    long long10 = blacklistEntry1.blacklistedTimestamp;
    long long11 = blacklistEntry1.getId();
    int i12 = blacklistEntry1.getLevel();
    long long13 = blacklistEntry1.getId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1531610598878L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 10L);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test322"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand7 = new fredboat.command.music.control.RepeatCommand("", str_array6);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array6);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand9 = new fredboat.command.fun.RemoteFileCommand("\u274C", "Bot Admin", str_array6);
    remoteFileCommand9.url = "\u274C";
    java.lang.String str12 = remoteFileCommand9.url;
    java.util.List<java.lang.String> list_str13 = remoteFileCommand9.aliases;
    fredboat.messaging.internal.Context context14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = remoteFileCommand9.help(context14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "\u274C"+ "'", str12.equals("\u274C"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test323"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand14 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array13);
    fredboat.command.admin.BotRestartCommand botRestartCommand15 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand("fredboat.util.BrainfuckException: \u2705", str_array13);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand17 = new fredboat.command.music.control.PlaySplitCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.command.util.MathCommand mathCommand18 = new fredboat.command.util.MathCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.command.admin.ReviveCommand reviveCommand19 = new fredboat.command.admin.ReviveCommand("fredboat.util.BrainfuckException: \u2705", str_array13);
    fredboat.perms.PermissionLevel permissionLevel20 = reviveCommand19.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    reviveCommand19.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    org.junit.Assert.assertTrue("'" + permissionLevel20 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel20.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test324"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.util.AvatarCommand avatarCommand13 = new fredboat.command.util.AvatarCommand("\uD83D\uDEAA", str_array10);
    fredboat.command.fun.CatgirlCommand catgirlCommand14 = new fredboat.command.fun.CatgirlCommand("hi!", str_array10);
    fredboat.command.moderation.LanguageCommand languageCommand15 = new fredboat.command.moderation.LanguageCommand("en_US", str_array10);
    fredboat.command.music.info.ListCommand listCommand16 = new fredboat.command.music.info.ListCommand("\uD83D\uDEAA", str_array10);
    fredboat.command.music.control.JoinCommand joinCommand17 = new fredboat.command.music.control.JoinCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.music.seeking.SeekCommand seekCommand18 = new fredboat.command.music.seeking.SeekCommand("fredboat.util.BrainfuckException: ", str_array10);
    fredboat.perms.PermissionLevel permissionLevel19 = seekCommand18.getMinimumPerms();
    java.lang.String str20 = seekCommand18.name;
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    seekCommand18.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "fredboat.util.BrainfuckException: "+ "'", str20.equals("fredboat.util.BrainfuckException: "));

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test325"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.util.AvatarCommand avatarCommand11 = new fredboat.command.util.AvatarCommand("\uD83D\uDEAA", str_array8);
    fredboat.command.util.BrainfuckCommand brainfuckCommand12 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand13 = new fredboat.command.fun.RemoteFileCommand("\u2705", "\u274C", str_array8);
    java.lang.String str14 = remoteFileCommand13.url;
    java.lang.String str15 = remoteFileCommand13.url;
    remoteFileCommand13.url = "";
    java.lang.String str18 = remoteFileCommand13.url;
    fredboat.messaging.internal.Context context19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = remoteFileCommand13.help(context19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "\u2705"+ "'", str14.equals("\u2705"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "\u2705"+ "'", str15.equals("\u2705"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + ""+ "'", str18.equals(""));

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test326"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array8);
    fredboat.command.music.seeking.RestartCommand restartCommand11 = new fredboat.command.music.seeking.RestartCommand("", str_array8);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand("hi!", str_array8);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand13 = new fredboat.command.maintenance.GitInfoCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array8);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("Bot Owner", str_array8);
    fredboat.command.maintenance.GetIdCommand getIdCommand15 = new fredboat.command.maintenance.GetIdCommand("\u274C", str_array8);
    fredboat.commandmeta.abs.CommandContext commandContext16 = null;
    // The following exception was thrown during execution in test generation
    try {
    getIdCommand15.onInvoke(commandContext16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test327"); }

    fredboat.db.entity.UConfig uConfig1 = new fredboat.db.entity.UConfig("fredboat.util.BrainfuckException: \uD83D\uDEAA");
    fredboat.util.GitRepoState gitRepoState2 = fredboat.util.GitRepoState.getGitRepositoryState();
    java.lang.String str3 = gitRepoState2.commitMessageShort;
    java.lang.String str4 = gitRepoState2.commitUserName;
    java.lang.String str5 = gitRepoState2.commitMessageFull;
    java.lang.String str6 = gitRepoState2.commitTime;
    java.lang.String str7 = gitRepoState2.commitIdAbbrev;
    java.lang.String str8 = gitRepoState2.commitUserName;
    java.lang.String str9 = gitRepoState2.commitUserName;
    java.lang.String str10 = gitRepoState2.commitId;
    java.lang.String str11 = gitRepoState2.commitMessageFull;
    java.lang.String str12 = gitRepoState2.commitTime;
    java.lang.String str13 = gitRepoState2.commitMessageFull;
    java.lang.String str14 = gitRepoState2.commitUserEmail;
    fredboat.util.Tuple2<fredboat.db.entity.UConfig,fredboat.util.GitRepoState> tuple2_uConfig_gitRepoState15 = new fredboat.util.Tuple2<fredboat.db.entity.UConfig,fredboat.util.GitRepoState>(uConfig1, gitRepoState2);
    java.lang.String str16 = gitRepoState2.branch;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + ""+ "'", str10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test328"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array10);
    fredboat.command.fun.PatCommand patCommand15 = new fredboat.command.fun.PatCommand("", "", str_array10);
    fredboat.command.music.info.HistoryCommand historyCommand16 = new fredboat.command.music.info.HistoryCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.perms.PermissionLevel permissionLevel18 = nodeAdminCommand17.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel19 = nodeAdminCommand17.getMinimumPerms();
    fredboat.messaging.internal.Context context20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = nodeAdminCommand17.help(context20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test329"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    long long1 = simpleTrackProvider0.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider2 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext3 = simpleTrackProvider2.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = null;
    simpleTrackProvider2.setLastTrack(audioTrackContext4);
    java.lang.Long[] long_array9 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long10 = new java.util.ArrayList<java.lang.Long>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long10, long_array9);
    simpleTrackProvider2.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long10);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider13 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext14 = simpleTrackProvider13.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext15 = null;
    simpleTrackProvider13.setLastTrack(audioTrackContext15);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext17 = simpleTrackProvider13.getAsListOrdered();
    simpleTrackProvider2.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext17);
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext17);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext20 = simpleTrackProvider0.getAsListOrdered();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider21 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext22 = simpleTrackProvider21.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext23 = null;
    simpleTrackProvider21.setLastTrack(audioTrackContext23);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext27 = simpleTrackProvider21.getTracksInRange((int)(byte)10, 10000);
    simpleTrackProvider21.clear();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider29 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext30 = simpleTrackProvider29.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext31 = null;
    simpleTrackProvider29.setLastTrack(audioTrackContext31);
    java.lang.Long[] long_array36 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long37 = new java.util.ArrayList<java.lang.Long>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long37, long_array36);
    simpleTrackProvider29.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long37);
    java.lang.String[] str_array44 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand45 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array44);
    fredboat.command.admin.ExitCommand exitCommand46 = new fredboat.command.admin.ExitCommand("hi!", str_array44);
    java.util.List<java.lang.String> list_str47 = exitCommand46.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand48 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long37, exitCommand46);
    java.util.ArrayList<java.lang.Long> arraylist_long49 = tuple2_arraylist_long_exitCommand48.a;
    simpleTrackProvider21.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long49);
    fredboat.audio.queue.AudioTrackContext audioTrackContext51 = null;
    simpleTrackProvider21.setLastTrack(audioTrackContext51);
    java.lang.Long[] long_array64 = new java.lang.Long[] { 1531609951964L, 1531609964731L, 1531609983118L, 1531609931147L, 100L, 1531609983118L, 1531609973887L, 1531609958152L, 1531610008386L, 1531609935745L };
    java.util.ArrayList<java.lang.Long> arraylist_long65 = new java.util.ArrayList<java.lang.Long>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long65, long_array64);
    boolean b67 = simpleTrackProvider21.isUserTrackOwner(1531609951964L, (java.util.Collection<java.lang.Long>)arraylist_long65);
    simpleTrackProvider0.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long65);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext69 = simpleTrackProvider0.getAsList();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider70 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext71 = simpleTrackProvider70.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext72 = null;
    simpleTrackProvider70.setLastTrack(audioTrackContext72);
    java.lang.Long[] long_array77 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long78 = new java.util.ArrayList<java.lang.Long>();
    boolean b79 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long78, long_array77);
    simpleTrackProvider70.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long78);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider81 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext82 = simpleTrackProvider81.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext83 = null;
    simpleTrackProvider81.setLastTrack(audioTrackContext83);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext85 = simpleTrackProvider81.getAsListOrdered();
    simpleTrackProvider70.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext85);
    int i87 = simpleTrackProvider70.size();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext88 = simpleTrackProvider70.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(arraylist_long49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext88);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test330"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    blacklistEntry1.setBlacklistedTimestamp((long)(short)-1);
    long long6 = blacklistEntry1.getBlacklistedTimestamp();
    blacklistEntry1.setLevel((int)(byte)1);
    int i9 = blacklistEntry1.level;
    blacklistEntry1.setLevel(0);
    // The following exception was thrown during execution in test generation
    try {
    blacklistEntry1.setId("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test331"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange((int)(byte)10, 10000);
    fredboat.audio.queue.AudioTrackContext audioTrackContext7 = simpleTrackProvider0.peek();
    boolean b8 = simpleTrackProvider0.isEmpty();
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = null;
    boolean b10 = simpleTrackProvider0.remove(audioTrackContext9);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider11 = new fredboat.audio.queue.SimpleTrackProvider();
    int i12 = simpleTrackProvider11.size();
    int i13 = simpleTrackProvider11.streamsCount();
    fredboat.audio.queue.RepeatMode repeatMode14 = simpleTrackProvider11.getRepeatMode();
    fredboat.audio.queue.RepeatMode repeatMode15 = simpleTrackProvider11.getRepeatMode();
    simpleTrackProvider0.setRepeatMode(repeatMode15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    org.junit.Assert.assertTrue("'" + repeatMode14 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode14.equals(fredboat.audio.queue.RepeatMode.OFF));
    org.junit.Assert.assertTrue("'" + repeatMode15 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode15.equals(fredboat.audio.queue.RepeatMode.OFF));

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test332"); }

    java.lang.String[] str_array12 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand13 = new fredboat.command.fun.HugCommand("", "\u274C", str_array12);
    fredboat.command.fun.TextCommand textCommand14 = new fredboat.command.fun.TextCommand("\uD83D\uDCDD", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand15 = new fredboat.command.util.ServerInfoCommand("Bot Owner", str_array12);
    fredboat.command.util.MathCommand mathCommand16 = new fredboat.command.util.MathCommand("fredboat.util.BrainfuckException: \u2705", str_array12);
    fredboat.command.music.seeking.RestartCommand restartCommand17 = new fredboat.command.music.seeking.RestartCommand("fredboat.util.BrainfuckException: :\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.perms.PermissionLevel permissionLevel18 = restartCommand17.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test333"); }

    java.lang.String[] str_array14 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand15 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.admin.ExitCommand exitCommand16 = new fredboat.command.admin.ExitCommand("hi!", str_array14);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand17 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array14);
    fredboat.command.maintenance.VersionCommand versionCommand18 = new fredboat.command.maintenance.VersionCommand("\uD83D\uDEAA", str_array14);
    fredboat.command.fun.FacedeskCommand facedeskCommand19 = new fredboat.command.fun.FacedeskCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", "", str_array14);
    fredboat.command.admin.UpdateCommand updateCommand20 = new fredboat.command.admin.UpdateCommand("\uD83D\uDCDD", str_array14);
    fredboat.command.fun.TextCommand textCommand21 = new fredboat.command.fun.TextCommand("fredboat.util.rest.APILimitException: en_US", "en_US", str_array14);
    fredboat.command.music.control.ShuffleCommand shuffleCommand22 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.fun.TextCommand textCommand23 = new fredboat.command.fun.TextCommand("", "en_US", str_array14);
    fredboat.messaging.internal.Context context24 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str25 = textCommand23.help(context24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test334"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    boolean b2 = guildConfig0.isTrackAnnounce();
    guildConfig0.setId("en_US");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test335"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    int i1 = weatherSystemOpenWeather0.getType();
    weatherSystemOpenWeather0.setType((int)(byte)10);
    weatherSystemOpenWeather0.setType((int)(short)10);
    weatherSystemOpenWeather0.setId((int)(short)0);
    int i8 = weatherSystemOpenWeather0.getSunset();
    weatherSystemOpenWeather0.setCountry("fredboat.util.BrainfuckException: hi!");
    weatherSystemOpenWeather0.setType(35);
    int i13 = weatherSystemOpenWeather0.getSunset();
    int i14 = weatherSystemOpenWeather0.getSunset();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test336"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.music.control.RepeatCommand repeatCommand7 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array5);
    fredboat.command.music.control.RepeatCommand repeatCommand8 = new fredboat.command.music.control.RepeatCommand("", str_array5);
    fredboat.command.music.control.LeaveCommand leaveCommand9 = new fredboat.command.music.control.LeaveCommand("https://i.imgur.com/YqZuqEB.jpg", str_array5);
    fredboat.perms.PermissionLevel permissionLevel10 = leaveCommand9.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext11 = null;
    // The following exception was thrown during execution in test generation
    try {
    leaveCommand9.onInvoke(commandContext11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    org.junit.Assert.assertTrue("'" + permissionLevel10 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel10.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test337"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    weatherSystemOpenWeather0.setId((int)(short)100);
    int i3 = weatherSystemOpenWeather0.getType();
    int i4 = weatherSystemOpenWeather0.getId();
    weatherSystemOpenWeather0.setSunrise(1);
    int i7 = weatherSystemOpenWeather0.getId();
    int i8 = weatherSystemOpenWeather0.getSunset();
    weatherSystemOpenWeather0.setCountry("\uD83D\uDEAA");
    int i11 = weatherSystemOpenWeather0.getSunset();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test338"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.RepeatMode repeatMode2 = fredboat.audio.queue.RepeatMode.OFF;
    simpleTrackProvider0.setRepeatMode(repeatMode2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange((-1), (int)(byte)10);
    int i7 = simpleTrackProvider0.streamsCount();
    long long8 = simpleTrackProvider0.getDurationMillis();
    int i9 = simpleTrackProvider0.streamsCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    org.junit.Assert.assertTrue("'" + repeatMode2 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode2.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test339"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    fredboat.db.entity.UConfig uConfig5 = uConfig0.setBearer("");
    fredboat.db.entity.UConfig uConfig7 = uConfig5.setBearer("fredboat.util.rest.APILimitException: en_US");
    java.lang.String str8 = uConfig5.getUserId();
    java.lang.String str9 = uConfig5.getUserId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test340"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = simpleTrackProvider0.getRepeatMode();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext4 = simpleTrackProvider0.getTracksInRange(10000, (int)(short)10);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider5 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext6 = null;
    simpleTrackProvider5.setLastTrack(audioTrackContext6);
    fredboat.audio.queue.AudioTrackContext audioTrackContext8 = null;
    simpleTrackProvider5.setLastTrack(audioTrackContext8);
    boolean b10 = simpleTrackProvider5.isEmpty();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider11 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider11.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext13 = simpleTrackProvider11.getAsListOrdered();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext14 = simpleTrackProvider11.getAsList();
    simpleTrackProvider5.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext14);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext16 = simpleTrackProvider5.getAsListOrdered();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider17 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext18 = simpleTrackProvider17.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext19 = null;
    simpleTrackProvider17.setLastTrack(audioTrackContext19);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext23 = simpleTrackProvider17.getTracksInRange((int)(byte)10, 10000);
    fredboat.audio.queue.AudioTrackContext audioTrackContext24 = simpleTrackProvider17.peek();
    boolean b25 = simpleTrackProvider17.isEmpty();
    fredboat.audio.queue.AudioTrackContext audioTrackContext26 = simpleTrackProvider17.peek();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext27 = simpleTrackProvider17.getAsListOrdered();
    simpleTrackProvider5.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext27);
    simpleTrackProvider0.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext27);
    fredboat.audio.queue.AudioTrackContext audioTrackContext30 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext30);
    fredboat.audio.queue.AudioTrackContext audioTrackContext32 = null;
    // The following exception was thrown during execution in test generation
    try {
    simpleTrackProvider0.add(audioTrackContext32);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext27);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test341"); }

    fredboat.util.GitRepoState gitRepoState1 = new fredboat.util.GitRepoState("fredboat.util.BrainfuckException: :\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test342"); }

    fredboat.util.rest.Weather weather0 = null;
    fredboat.util.rest.Weather weather4 = null;
    java.lang.String[] str_array14 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array14);
    fredboat.command.music.control.ShuffleCommand shuffleCommand16 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.util.ServerInfoCommand serverInfoCommand17 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array14);
    fredboat.command.music.seeking.ForwardCommand forwardCommand18 = new fredboat.command.music.seeking.ForwardCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.music.control.LeaveCommand leaveCommand19 = new fredboat.command.music.control.LeaveCommand("Bot Admin", str_array14);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand20 = new fredboat.command.music.control.PlaySplitCommand("http://i.imgur.com/NqyOqnj.gif", str_array14);
    fredboat.command.util.WeatherCommand weatherCommand21 = new fredboat.command.util.WeatherCommand(weather4, "Bot Owner", str_array14);
    fredboat.command.util.BrainfuckCommand brainfuckCommand22 = new fredboat.command.util.BrainfuckCommand("Base", str_array14);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand23 = new fredboat.command.maintenance.AudioDebugCommand("", str_array14);
    fredboat.command.util.WeatherCommand weatherCommand24 = new fredboat.command.util.WeatherCommand(weather0, "http://i.imgur.com/NqyOqnj.gif", str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test343"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.music.control.RepeatCommand repeatCommand10 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array8);
    fredboat.command.util.CommandsCommand commandsCommand11 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.command.music.control.StopCommand stopCommand12 = new fredboat.command.music.control.StopCommand("hi!", str_array8);
    fredboat.command.fun.RandomImageCommand randomImageCommand13 = new fredboat.command.fun.RandomImageCommand("\u274C", "\uD83D\uDCDD", str_array8);
    fredboat.command.admin.EvalCommand evalCommand14 = new fredboat.command.admin.EvalCommand("\u2757", str_array8);
    fredboat.perms.PermissionLevel permissionLevel15 = evalCommand14.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel16 = evalCommand14.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel15 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel15.equals(fredboat.perms.PermissionLevel.BOT_OWNER));
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test344"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    int i3 = openWeatherCurrent0.getCode();
    int i4 = openWeatherCurrent0.getDatetime();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather5 = openWeatherCurrent0.getMain();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather6 = openWeatherCurrent0.getClouds();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather6);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test345"); }

    fredboat.audio.queue.PlaylistInfo.Source source4 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo5 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source4);
    fredboat.audio.queue.PlaylistInfo.Source source6 = playlistInfo5.getSource();
    int i7 = playlistInfo5.getTotalTracks();
    fredboat.audio.queue.PlaylistInfo.Source source8 = playlistInfo5.getSource();
    fredboat.audio.queue.PlaylistInfo playlistInfo9 = new fredboat.audio.queue.PlaylistInfo((int)(short)10, "fredboat.util.BrainfuckException: \u2705", source8);
    playlistInfo9.setTotalTracks(52);
    org.junit.Assert.assertTrue("'" + source4 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source4.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    org.junit.Assert.assertTrue("'" + source6 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source6.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 100);
    org.junit.Assert.assertTrue("'" + source8 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source8.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test346"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.moderation.LanguageCommand languageCommand9 = new fredboat.command.moderation.LanguageCommand("", str_array7);
    fredboat.command.music.control.UnpauseCommand unpauseCommand10 = new fredboat.command.music.control.UnpauseCommand("qua, 31 dez 1969, 09:00 PM", str_array7);
    fredboat.command.util.MathCommand mathCommand11 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array7);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand12 = new fredboat.command.maintenance.GitInfoCommand("\u2705", str_array7);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\u274C", str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test347"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    java.lang.String str3 = openWeatherCurrent0.getWeatherDescription();
    int i4 = openWeatherCurrent0.getVisibility();
    java.lang.String str5 = openWeatherCurrent0.getWeatherDescription();
    java.lang.String str6 = openWeatherCurrent0.getName();
    java.util.List<fredboat.util.rest.models.weather.WeatherOpenWeather> list_weatherOpenWeather7 = openWeatherCurrent0.getWeather();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_weatherOpenWeather7);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test348"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand7 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.admin.ExitCommand exitCommand8 = new fredboat.command.admin.ExitCommand("hi!", str_array6);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand9 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array6);
    fredboat.command.maintenance.NodesCommand nodesCommand10 = new fredboat.command.maintenance.NodesCommand("", str_array6);
    fredboat.commandmeta.abs.CommandContext commandContext11 = null;
    // The following exception was thrown during execution in test generation
    try {
    nodesCommand10.onInvoke(commandContext11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test349"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.music.seeking.RestartCommand restartCommand12 = new fredboat.command.music.seeking.RestartCommand("", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand("hi!", str_array9);
    fredboat.command.fun.RollCommand rollCommand14 = new fredboat.command.fun.RollCommand("\uD83D\uDEAA", "qua, 31 dez 1969, 09:00 PM", str_array9);
    fredboat.command.fun.RollCommand rollCommand15 = new fredboat.command.fun.RollCommand("Bot Admin", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.messaging.internal.Context context16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = rollCommand15.help(context16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test350"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand14 = new fredboat.command.moderation.DisableCommandsCommand("", str_array10);
    fredboat.command.admin.EvalCommand evalCommand15 = new fredboat.command.admin.EvalCommand("", str_array10);
    fredboat.command.util.CommandsCommand commandsCommand16 = new fredboat.command.util.CommandsCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.fun.TextCommand textCommand17 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "http://i.imgur.com/NqyOqnj.gif", str_array10);
    textCommand17.msg = "fredboat.commandmeta.MessagingException: \uD83D\uDEAA";
    fredboat.messaging.internal.Context context20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = textCommand17.help(context20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test351"); }

    fredboat.agent.StatsAgent statsAgent1 = new fredboat.agent.StatsAgent("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    fredboat.agent.StatsAgent.Action action2 = null;
    statsAgent1.addAction(action2);
    statsAgent1.run();
    // The following exception was thrown during execution in test generation
    try {
    fredboat.agent.FredBoatAgent.start((fredboat.agent.FredBoatAgent)statsAgent1);
      org.junit.Assert.fail("Expected exception of type java.util.concurrent.RejectedExecutionException");
    } catch (java.util.concurrent.RejectedExecutionException e) {
      // Expected exception.
    }

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test352"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider3 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = simpleTrackProvider3.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = null;
    simpleTrackProvider3.setLastTrack(audioTrackContext5);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext7 = simpleTrackProvider3.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext7);
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = null;
    boolean b10 = simpleTrackProvider0.remove(audioTrackContext9);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext11 = simpleTrackProvider0.getAsList();
    int i12 = simpleTrackProvider0.streamsCount();
    simpleTrackProvider0.clear();
    java.util.Collection<java.lang.Long> collection_long14 = null;
    simpleTrackProvider0.removeAllById(collection_long14);
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test353"); }

    fredboat.commandmeta.MessagingException messagingException1 = new fredboat.commandmeta.MessagingException("Provided by OpenWeatherMap.org");
    fredboat.util.BrainfuckException brainfuckException3 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException6 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    fredboat.util.BrainfuckException brainfuckException7 = new fredboat.util.BrainfuckException("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", (java.lang.Throwable)brainfuckException6);
    brainfuckException3.addSuppressed((java.lang.Throwable)brainfuckException6);
    messagingException1.addSuppressed((java.lang.Throwable)brainfuckException3);
    java.lang.String str10 = brainfuckException3.toString();
    // The following exception was thrown during execution in test generation
    try {
    fredboat.db.DatabaseNotReadyException databaseNotReadyException11 = new fredboat.db.DatabaseNotReadyException((java.lang.Throwable)brainfuckException3);
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "fredboat.util.BrainfuckException: hi!"+ "'", str10.equals("fredboat.util.BrainfuckException: hi!"));

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test354"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    java.lang.String str1 = openWeatherCurrent0.getLocation();
    java.lang.String str2 = openWeatherCurrent0.getName();
    int i3 = openWeatherCurrent0.getId();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather4 = openWeatherCurrent0.getMain();
    java.lang.String str5 = openWeatherCurrent0.getName();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather6 = openWeatherCurrent0.getMain();
    int i7 = openWeatherCurrent0.getId();
    java.lang.String str8 = openWeatherCurrent0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test355"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.maintenance.PingCommand pingCommand7 = new fredboat.command.maintenance.PingCommand("\u274C", str_array5);
    fredboat.command.music.control.StopCommand stopCommand8 = new fredboat.command.music.control.StopCommand("\u274C", str_array5);
    fredboat.command.music.info.ListCommand listCommand9 = new fredboat.command.music.info.ListCommand("\uD83D\uDEAA", str_array5);
    fredboat.commandmeta.abs.CommandContext commandContext10 = null;
    // The following exception was thrown during execution in test generation
    try {
    listCommand9.onInvoke(commandContext10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test356"); }

    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode0 = fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG;
    fredboat.util.rest.models.weather.WeatherError weatherError1 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    java.lang.String str2 = weatherError1.getDataProviderIcon();
    java.lang.String str3 = weatherError1.getFormattedDate();
    java.lang.String str4 = weatherError1.getThumbnailUrl();
    java.lang.String str5 = weatherError1.getDataProviderString();
    java.lang.String str6 = weatherError1.getTemperature();
    java.lang.String str7 = weatherError1.getDataProviderIcon();
    boolean b8 = weatherError1.isError();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode9 = weatherError1.errorType();
    org.junit.Assert.assertTrue("'" + errorCode0 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode0.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    org.junit.Assert.assertTrue("'" + errorCode9 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG + "'", errorCode9.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.SOMETHING_IS_WRONG));

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test357"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("", str_array8);
    fredboat.command.music.control.LeaveCommand leaveCommand10 = new fredboat.command.music.control.LeaveCommand("hi!", str_array8);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand11 = new fredboat.command.maintenance.GitInfoCommand("\uD83D\uDCDD", str_array8);
    fredboat.command.fun.RollCommand rollCommand12 = new fredboat.command.fun.RollCommand("qua, 31 dez 1969, 09:00 PM", "Bot Admin", str_array8);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand13 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array8);
    fredboat.messaging.internal.Context context14 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = disableCommandsCommand13.help(context14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test358"); }

    fredboat.db.entity.GuildConfig guildConfig0 = new fredboat.db.entity.GuildConfig();
    java.lang.String str1 = guildConfig0.getGuildId();
    boolean b2 = guildConfig0.isTrackAnnounce();
    boolean b3 = guildConfig0.isAutoResume();
    guildConfig0.setLang("DJ");
    guildConfig0.setLang("http://i.imgur.com/NqyOqnj.gif");
    java.lang.String str8 = guildConfig0.getLang();
    guildConfig0.setTrackAnnounce(false);
    guildConfig0.setId("\u2757");
    java.lang.String str13 = guildConfig0.getGuildId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "http://i.imgur.com/NqyOqnj.gif"+ "'", str8.equals("http://i.imgur.com/NqyOqnj.gif"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "\u2757"+ "'", str13.equals("\u2757"));

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test359"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    int i3 = openWeatherCurrent0.getId();
    java.lang.String str4 = openWeatherCurrent0.getFormattedDate();
    int i5 = openWeatherCurrent0.getDatetime();
    java.lang.String str6 = openWeatherCurrent0.getDataProviderIcon();
    int i7 = openWeatherCurrent0.getVisibility();
    java.lang.String str8 = openWeatherCurrent0.getDataProviderIcon();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str4.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str6.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str8.equals("https://i.imgur.com/YqZuqEB.jpg"));

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test360"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test361"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.admin.UpdateCommand updateCommand12 = new fredboat.command.admin.UpdateCommand("", str_array10);
    fredboat.command.fun.CatgirlCommand catgirlCommand13 = new fredboat.command.fun.CatgirlCommand("Bot Admin", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand14 = new fredboat.command.maintenance.VersionCommand("\u2705", str_array10);
    fredboat.command.util.MathCommand mathCommand15 = new fredboat.command.util.MathCommand("", str_array10);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("\u2757", str_array10);
    fredboat.command.fun.CatgirlCommand catgirlCommand17 = new fredboat.command.fun.CatgirlCommand("qua, 31 dez 1969, 09:00 PM", str_array10);
    fredboat.command.music.seeking.RewindCommand rewindCommand18 = new fredboat.command.music.seeking.RewindCommand("qua, 31 dez 1969, 09:00 PM", str_array10);
    fredboat.messaging.internal.Context context19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = rewindCommand18.help(context19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test362"); }

    fredboat.util.rest.Weather weather0 = null;
    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.fun.TextCommand textCommand16 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand18 = new fredboat.command.moderation.EnableCommandsCommand("\u2705", str_array13);
    fredboat.command.maintenance.GetIdCommand getIdCommand19 = new fredboat.command.maintenance.GetIdCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand20 = new fredboat.command.moderation.EnableCommandsCommand("fredboat.util.BrainfuckException: \u2705", str_array13);
    fredboat.command.music.control.RepeatCommand repeatCommand21 = new fredboat.command.music.control.RepeatCommand("fredboat.util.BrainfuckException: hi!", str_array13);
    fredboat.command.util.WeatherCommand weatherCommand22 = new fredboat.command.util.WeatherCommand(weather0, "DJ", str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test363"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.util.ServerInfoCommand serverInfoCommand11 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array8);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand12 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array8);
    fredboat.command.maintenance.VersionCommand versionCommand13 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.admin.ExitCommand exitCommand14 = new fredboat.command.admin.ExitCommand("en_US", str_array8);
    fredboat.messaging.internal.Context context15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = exitCommand14.help(context15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test364"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array12);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array12);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand17 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array12);
    fredboat.command.moderation.ConfigCommand configCommand18 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array12);
    fredboat.command.fun.HugCommand hugCommand19 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array12);
    fredboat.command.music.control.DestroyCommand destroyCommand20 = new fredboat.command.music.control.DestroyCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.perms.PermissionLevel permissionLevel21 = destroyCommand20.getMinimumPerms();
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = destroyCommand20.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    org.junit.Assert.assertTrue("'" + permissionLevel21 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel21.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test365"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    weatherMainOpenWeather0.setTempMax((double)0);
    double d5 = weatherMainOpenWeather0.getTempMax();
    int i6 = weatherMainOpenWeather0.getHumidity();
    double d7 = weatherMainOpenWeather0.getTempMin();
    double d8 = weatherMainOpenWeather0.getTemp();
    int i9 = weatherMainOpenWeather0.getPressure();
    weatherMainOpenWeather0.setTempMax((double)(-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d8 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test366"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand11 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array10);
    fredboat.command.fun.TextCommand textCommand12 = new fredboat.command.fun.TextCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array10);
    textCommand12.msg = "en_US";
    textCommand12.msg = "fredboat.util.BrainfuckException: ";
    java.lang.String str17 = textCommand12.msg;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "fredboat.util.BrainfuckException: "+ "'", str17.equals("fredboat.util.BrainfuckException: "));

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test367"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str2 = guildPermissions1.getDjList();
    guildPermissions0.setUserList(list_str2);
    fredboat.db.entity.GuildPermissions guildPermissions4 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions5 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str6 = guildPermissions5.getDjList();
    guildPermissions4.setUserList(list_str6);
    java.lang.String[] str_array12 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand13 = new fredboat.command.music.control.RepeatCommand("", str_array12);
    fredboat.command.music.control.LeaveCommand leaveCommand14 = new fredboat.command.music.control.LeaveCommand("hi!", str_array12);
    fredboat.perms.PermissionLevel permissionLevel15 = leaveCommand14.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel16 = leaveCommand14.getMinimumPerms();
    java.util.List<java.lang.String> list_str17 = guildPermissions4.getFromEnum(permissionLevel16);
    java.util.List<java.lang.String> list_str18 = guildPermissions4.getAdminList();
    guildPermissions0.setDjList(list_str18);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand30 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array29);
    fredboat.command.music.control.ShuffleCommand shuffleCommand31 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array29);
    fredboat.command.fun.TextCommand textCommand32 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array29);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand33 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array29);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand34 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array29);
    fredboat.command.music.control.UnpauseCommand unpauseCommand35 = new fredboat.command.music.control.UnpauseCommand("\uD83D\uDCDD", str_array29);
    fredboat.perms.PermissionLevel permissionLevel36 = unpauseCommand35.getMinimumPerms();
    java.util.List<java.lang.String> list_str37 = guildPermissions0.getFromEnum(permissionLevel36);
    fredboat.db.entity.GuildPermissions guildPermissions38 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str39 = guildPermissions38.getDjList();
    java.lang.String[] str_array47 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand48 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array47);
    fredboat.command.util.MathCommand mathCommand49 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array47);
    fredboat.command.music.control.UnpauseCommand unpauseCommand50 = new fredboat.command.music.control.UnpauseCommand("", str_array47);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand51 = new fredboat.command.moderation.EnableCommandsCommand("", str_array47);
    fredboat.command.music.seeking.RewindCommand rewindCommand52 = new fredboat.command.music.seeking.RewindCommand("", str_array47);
    java.lang.String[] str_array57 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand58 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array57);
    fredboat.command.music.control.RepeatCommand repeatCommand59 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array57);
    fredboat.command.util.CommandsCommand commandsCommand60 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array57);
    fredboat.util.Tuple2<fredboat.command.music.seeking.RewindCommand,fredboat.commandmeta.abs.IUtilCommand> tuple2_rewindCommand_iUtilCommand61 = new fredboat.util.Tuple2<fredboat.command.music.seeking.RewindCommand,fredboat.commandmeta.abs.IUtilCommand>(rewindCommand52, (fredboat.commandmeta.abs.IUtilCommand)commandsCommand60);
    fredboat.perms.PermissionLevel permissionLevel62 = rewindCommand52.getMinimumPerms();
    java.util.List<java.lang.String> list_str63 = guildPermissions38.getFromEnum(permissionLevel62);
    fredboat.db.entity.GuildPermissions guildPermissions64 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array73 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand74 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array73);
    fredboat.command.util.MathCommand mathCommand75 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array73);
    fredboat.command.music.control.UnpauseCommand unpauseCommand76 = new fredboat.command.music.control.UnpauseCommand("", str_array73);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand77 = new fredboat.command.moderation.EnableCommandsCommand("", str_array73);
    fredboat.command.music.seeking.RewindCommand rewindCommand78 = new fredboat.command.music.seeking.RewindCommand("", str_array73);
    fredboat.command.music.seeking.RewindCommand rewindCommand79 = new fredboat.command.music.seeking.RewindCommand("en_US", str_array73);
    fredboat.perms.PermissionLevel permissionLevel80 = rewindCommand79.getMinimumPerms();
    java.util.List<java.lang.String> list_str81 = guildPermissions64.getFromEnum(permissionLevel80);
    java.util.List<java.lang.String> list_str82 = guildPermissions64.getDjList();
    guildPermissions38.setUserList(list_str82);
    guildPermissions0.setUserList(list_str82);
    java.util.List<java.lang.String> list_str85 = guildPermissions0.getUserList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    org.junit.Assert.assertTrue("'" + permissionLevel15 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel15.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    org.junit.Assert.assertTrue("'" + permissionLevel36 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel36.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array57);
    org.junit.Assert.assertTrue("'" + permissionLevel62 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel62.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    org.junit.Assert.assertTrue("'" + permissionLevel80 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel80.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str85);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test368"); }

    java.lang.String[] str_array10 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand11 = new fredboat.command.fun.HugCommand("", "\u274C", str_array10);
    fredboat.command.admin.ReviveCommand reviveCommand12 = new fredboat.command.admin.ReviveCommand("Bot Admin", str_array10);
    fredboat.command.music.control.LeaveCommand leaveCommand13 = new fredboat.command.music.control.LeaveCommand("\uD83D\uDCDD", str_array10);
    fredboat.command.admin.UpdateCommand updateCommand14 = new fredboat.command.admin.UpdateCommand("\uD83D\uDCDD", str_array10);
    fredboat.perms.PermissionLevel permissionLevel15 = updateCommand14.getMinimumPerms();
    fredboat.messaging.internal.Context context16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = updateCommand14.help(context16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel15 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel15.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test369"); }

    fredboat.audio.queue.PlaylistInfo.Source source2 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo3 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source2);
    java.lang.String str4 = playlistInfo3.getName();
    fredboat.audio.queue.PlaylistInfo.Source source7 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo8 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source7);
    playlistInfo3.setSource(source7);
    playlistInfo3.setTotalTracks((int)(short)10);
    int i12 = playlistInfo3.getTotalTracks();
    org.junit.Assert.assertTrue("'" + source2 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source2.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "\u2757"+ "'", str4.equals("\u2757"));
    org.junit.Assert.assertTrue("'" + source7 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source7.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test370"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array12);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array12);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand17 = new fredboat.command.moderation.EnableCommandsCommand("\u2705", str_array12);
    fredboat.command.fun.RandomImageCommand randomImageCommand18 = new fredboat.command.fun.RandomImageCommand("qua, 31 dez 1969, 09:00 PM", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.fun.FacedeskCommand facedeskCommand19 = new fredboat.command.fun.FacedeskCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array12);
    fredboat.commandmeta.abs.CommandContext commandContext20 = null;
    // The following exception was thrown during execution in test generation
    try {
    facedeskCommand19.onInvoke(commandContext20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test371"); }

    fredboat.util.rest.Weather weather5 = null;
    java.lang.String[] str_array15 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.util.ServerInfoCommand serverInfoCommand18 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array15);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand19 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array15);
    fredboat.command.maintenance.VersionCommand versionCommand20 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.admin.ExitCommand exitCommand21 = new fredboat.command.admin.ExitCommand("\u274C", str_array15);
    fredboat.command.util.WeatherCommand weatherCommand22 = new fredboat.command.util.WeatherCommand(weather5, "https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.maintenance.GetIdCommand getIdCommand23 = new fredboat.command.maintenance.GetIdCommand("Bot Admin", str_array15);
    fredboat.command.moderation.ConfigCommand configCommand24 = new fredboat.command.moderation.ConfigCommand("fredboat.util.BrainfuckException: ", str_array15);
    fredboat.command.fun.HugCommand hugCommand25 = new fredboat.command.fun.HugCommand("\uD83D\uDEAA", "fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array15);
    fredboat.command.util.CommandsCommand commandsCommand26 = new fredboat.command.util.CommandsCommand("fredboat.commandmeta.MessagingException: DJ", str_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test372"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand15 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand16 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.VersionCommand versionCommand17 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand18 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.music.control.JoinCommand joinCommand19 = new fredboat.command.music.control.JoinCommand("\uD83D\uDEAA", str_array12);
    fredboat.command.moderation.ConfigCommand configCommand20 = new fredboat.command.moderation.ConfigCommand("\u2757", str_array12);
    fredboat.command.music.control.JoinCommand joinCommand21 = new fredboat.command.music.control.JoinCommand("fredboat.util.BrainfuckException: \u2705", str_array12);
    fredboat.command.music.seeking.ForwardCommand forwardCommand22 = new fredboat.command.music.seeking.ForwardCommand("fredboat.util.rest.APILimitException: en_US", str_array12);
    fredboat.perms.PermissionLevel permissionLevel23 = forwardCommand22.getMinimumPerms();
    java.lang.String str24 = forwardCommand22.name;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    org.junit.Assert.assertTrue("'" + permissionLevel23 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel23.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "fredboat.util.rest.APILimitException: en_US"+ "'", str24.equals("fredboat.util.rest.APILimitException: en_US"));

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test373"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand12 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.music.info.ListCommand listCommand14 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array11);
    fredboat.command.util.BrainfuckCommand brainfuckCommand16 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.seeking.RestartCommand restartCommand17 = new fredboat.command.music.seeking.RestartCommand("hi!", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand18 = new fredboat.command.util.ServerInfoCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.fun.RollCommand rollCommand19 = new fredboat.command.fun.RollCommand("fredboat.util.BrainfuckException: ", "fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.commandmeta.abs.CommandContext commandContext20 = null;
    // The following exception was thrown during execution in test generation
    try {
    rollCommand19.onInvoke(commandContext20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test374"); }

    fredboat.db.DatabaseManager databaseManager0 = null;
    fredboat.agent.DBConnectionWatchdogAgent dBConnectionWatchdogAgent1 = new fredboat.agent.DBConnectionWatchdogAgent(databaseManager0);
    dBConnectionWatchdogAgent1.doRun();
    dBConnectionWatchdogAgent1.doRun();
    dBConnectionWatchdogAgent1.doRun();
    dBConnectionWatchdogAgent1.doRun();
    // The following exception was thrown during execution in test generation
    try {
    fredboat.agent.FredBoatAgent.startNow((fredboat.agent.FredBoatAgent)dBConnectionWatchdogAgent1);
      org.junit.Assert.fail("Expected exception of type java.util.concurrent.RejectedExecutionException");
    } catch (java.util.concurrent.RejectedExecutionException e) {
      // Expected exception.
    }

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test375"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("Base");
    guildConfig1.setAutoResume(true);
    boolean b4 = guildConfig1.isAutoResume();
    boolean b5 = guildConfig1.isTrackAnnounce();
    guildConfig1.setId("");
    guildConfig1.setAutoResume(false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test376"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand15 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.fun.TextCommand textCommand16 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand18 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array13);
    fredboat.command.moderation.ConfigCommand configCommand19 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array13);
    fredboat.command.fun.HugCommand hugCommand20 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array13);
    fredboat.command.maintenance.VersionCommand versionCommand21 = new fredboat.command.maintenance.VersionCommand("fredboat.util.BrainfuckException: ", str_array13);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand22 = new fredboat.command.admin.UnblacklistCommand("Bot Owner", str_array13);
    fredboat.commandmeta.abs.CommandContext commandContext23 = null;
    // The following exception was thrown during execution in test generation
    try {
    unblacklistCommand22.onInvoke(commandContext23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test377"); }

    fredboat.util.GitRepoState gitRepoState1 = new fredboat.util.GitRepoState("Base");
    java.lang.String str2 = gitRepoState1.commitIdAbbrev;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test378"); }

    fredboat.util.rest.Weather weather2 = null;
    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand15 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand16 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array12);
    fredboat.command.maintenance.VersionCommand versionCommand17 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.admin.ExitCommand exitCommand18 = new fredboat.command.admin.ExitCommand("\u274C", str_array12);
    fredboat.command.util.WeatherCommand weatherCommand19 = new fredboat.command.util.WeatherCommand(weather2, "https://i.imgur.com/YqZuqEB.jpg", str_array12);
    fredboat.command.admin.UpdateCommand updateCommand20 = new fredboat.command.admin.UpdateCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.admin.TestCommand testCommand21 = new fredboat.command.admin.TestCommand("DJ", str_array12);
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = testCommand21.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test379"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.music.seeking.RestartCommand restartCommand12 = new fredboat.command.music.seeking.RestartCommand("", str_array9);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand("hi!", str_array9);
    fredboat.command.music.control.LeaveCommand leaveCommand14 = new fredboat.command.music.control.LeaveCommand("Bot Admin", str_array9);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand15 = new fredboat.command.maintenance.AudioDebugCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.moderation.LanguageCommand languageCommand16 = new fredboat.command.moderation.LanguageCommand("\u2705", str_array9);
    fredboat.command.music.control.DestroyCommand destroyCommand17 = new fredboat.command.music.control.DestroyCommand("Bot Owner", str_array9);
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = destroyCommand17.help(context18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test380"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.rateLimitReachedTimestamp;
    blacklistEntry1.setLevel(100);
    blacklistEntry1.setRateLimitReached((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 100L);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test381"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    // The following exception was thrown during execution in test generation
    try {
    simpleTrackProvider0.reshuffle();
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test382"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand9 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.admin.ExitCommand exitCommand10 = new fredboat.command.admin.ExitCommand("hi!", str_array8);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand11 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array8);
    fredboat.command.moderation.LanguageCommand languageCommand12 = new fredboat.command.moderation.LanguageCommand("\u2757", str_array8);
    fredboat.command.moderation.LanguageCommand languageCommand13 = new fredboat.command.moderation.LanguageCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array8);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("Provided by OpenWeatherMap.org", str_array8);
    fredboat.messaging.internal.Context context15 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = nodeAdminCommand14.help(context15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test383"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand12 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.music.info.ListCommand listCommand14 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array11);
    fredboat.command.fun.PatCommand patCommand16 = new fredboat.command.fun.PatCommand("", "", str_array11);
    fredboat.command.admin.TestCommand testCommand17 = new fredboat.command.admin.TestCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.maintenance.NodesCommand nodesCommand18 = new fredboat.command.maintenance.NodesCommand("", str_array11);
    fredboat.command.admin.TestCommand testCommand19 = new fredboat.command.admin.TestCommand("fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array11);
    fredboat.messaging.internal.Context context20 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str21 = testCommand19.help(context20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test384"); }

    java.lang.String[] str_array12 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand13 = new fredboat.command.fun.HugCommand("", "\u274C", str_array12);
    fredboat.command.fun.TextCommand textCommand14 = new fredboat.command.fun.TextCommand("\uD83D\uDCDD", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.util.ServerInfoCommand serverInfoCommand15 = new fredboat.command.util.ServerInfoCommand("Bot Owner", str_array12);
    fredboat.command.moderation.LanguageCommand languageCommand16 = new fredboat.command.moderation.LanguageCommand("\u2757", str_array12);
    fredboat.command.util.BrainfuckCommand brainfuckCommand17 = new fredboat.command.util.BrainfuckCommand("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = brainfuckCommand17.help(context18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test385"); }

    java.lang.String[] str_array3 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand4 = new fredboat.command.music.control.RepeatCommand("", str_array3);
    fredboat.perms.PermissionLevel permissionLevel5 = repeatCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel6 = repeatCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel7 = repeatCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel8 = repeatCommand4.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel9 = repeatCommand4.getMinimumPerms();
    fredboat.messaging.internal.Context context10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = repeatCommand4.help(context10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    org.junit.Assert.assertTrue("'" + permissionLevel5 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel5.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel6 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel6.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel7 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel7.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel8 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel8.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel9 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel9.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test386"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("qua, 31 dez 1969, 09:00 PM", "\u274C", str_array11);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand16 = new fredboat.command.moderation.DisableCommandsCommand("Bot Admin", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand17 = new fredboat.command.music.info.HistoryCommand("https://i.imgur.com/YqZuqEB.jpg", str_array11);
    fredboat.command.fun.HugCommand hugCommand18 = new fredboat.command.fun.HugCommand("en_US", "", str_array11);
    fredboat.messaging.internal.Context context19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = hugCommand18.help(context19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test387"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    weatherMainOpenWeather0.setTempMax((double)0);
    double d5 = weatherMainOpenWeather0.getTempMax();
    int i6 = weatherMainOpenWeather0.getHumidity();
    weatherMainOpenWeather0.setPressure(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test388"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str2 = guildPermissions1.getDjList();
    guildPermissions0.setUserList(list_str2);
    java.lang.String[] str_array8 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("", str_array8);
    fredboat.command.music.control.LeaveCommand leaveCommand10 = new fredboat.command.music.control.LeaveCommand("hi!", str_array8);
    fredboat.perms.PermissionLevel permissionLevel11 = leaveCommand10.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel12 = leaveCommand10.getMinimumPerms();
    java.util.List<java.lang.String> list_str13 = guildPermissions0.getFromEnum(permissionLevel12);
    java.util.List<java.lang.String> list_str14 = guildPermissions0.getAdminList();
    java.lang.String[] str_array22 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand23 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array22);
    fredboat.command.util.MathCommand mathCommand24 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array22);
    fredboat.command.music.control.UnpauseCommand unpauseCommand25 = new fredboat.command.music.control.UnpauseCommand("", str_array22);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand26 = new fredboat.command.moderation.EnableCommandsCommand("", str_array22);
    fredboat.command.music.seeking.RewindCommand rewindCommand27 = new fredboat.command.music.seeking.RewindCommand("", str_array22);
    fredboat.perms.PermissionLevel permissionLevel28 = rewindCommand27.getMinimumPerms();
    fredboat.db.entity.GuildPermissions guildPermissions29 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions30 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str31 = guildPermissions30.getDjList();
    guildPermissions29.setUserList(list_str31);
    guildPermissions0.setFromEnum(permissionLevel28, list_str31);
    java.util.List<java.lang.String> list_str34 = guildPermissions0.getUserList();
    java.util.List<java.lang.String> list_str35 = guildPermissions0.getAdminList();
    fredboat.db.entity.GuildPermissions guildPermissions36 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions37 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str38 = guildPermissions37.getDjList();
    guildPermissions36.setUserList(list_str38);
    fredboat.db.entity.GuildPermissions guildPermissions40 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array50 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand51 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array50);
    fredboat.command.music.control.ShuffleCommand shuffleCommand52 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array50);
    fredboat.command.fun.TextCommand textCommand53 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array50);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand54 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array50);
    fredboat.command.fun.FacedeskCommand facedeskCommand55 = new fredboat.command.fun.FacedeskCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array50);
    java.util.List<java.lang.String> list_str56 = facedeskCommand55.aliases;
    guildPermissions40.setUserList(list_str56);
    guildPermissions36.setAdminList(list_str56);
    guildPermissions0.setUserList(list_str56);
    java.util.List<java.lang.String> list_str60 = guildPermissions0.getUserList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel11 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel11.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    org.junit.Assert.assertTrue("'" + permissionLevel28 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel28.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str60);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test389"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    int i3 = openWeatherCurrent0.getCode();
    java.lang.String str4 = openWeatherCurrent0.getDataProviderIcon();
    boolean b5 = openWeatherCurrent0.isError();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather6 = openWeatherCurrent0.getClouds();
    boolean b7 = openWeatherCurrent0.isError();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str4.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test390"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.control.RepeatCommand repeatCommand8 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array6);
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("", str_array6);
    fredboat.command.music.seeking.ForwardCommand forwardCommand10 = new fredboat.command.music.seeking.ForwardCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test391"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array11);
    fredboat.command.admin.ExitCommand exitCommand17 = new fredboat.command.admin.ExitCommand("en_US", str_array11);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand18 = new fredboat.command.music.control.ReshuffleCommand("\u274C", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand19 = new fredboat.command.util.ServerInfoCommand("fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.command.admin.ReviveCommand reviveCommand20 = new fredboat.command.admin.ReviveCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test392"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array13 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand14 = new fredboat.command.music.control.RepeatCommand("", str_array13);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("\u274C", str_array13);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand16 = new fredboat.command.fun.RemoteFileCommand("\u274C", "Bot Admin", str_array13);
    fredboat.command.fun.RollCommand rollCommand17 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "Provided by OpenWeatherMap.org", str_array13);
    fredboat.command.music.control.ShuffleCommand shuffleCommand18 = new fredboat.command.music.control.ShuffleCommand("DJ", str_array13);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand19 = new fredboat.command.maintenance.AudioDebugCommand("Base", str_array13);
    fredboat.command.util.WeatherCommand weatherCommand20 = new fredboat.command.util.WeatherCommand(weather1, "fredboat.util.rest.APILimitException: en_US", str_array13);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand21 = new fredboat.command.maintenance.AudioDebugCommand("fredboat.util.BrainfuckException: ", str_array13);
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = audioDebugCommand21.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test393"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.getId();
    blacklistEntry1.setLevel(0);
    int i8 = blacklistEntry1.getLevel();
    blacklistEntry1.setLevel((int)(byte)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test394"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    double d3 = weatherMainOpenWeather0.getTemp();
    weatherMainOpenWeather0.setTemp((double)1L);
    weatherMainOpenWeather0.setPressure(3000);
    weatherMainOpenWeather0.setTempMin((double)1531610160295L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d3 == 0.0d);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test395"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.util.ServerInfoCommand serverInfoCommand13 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array10);
    fredboat.command.maintenance.VersionCommand versionCommand15 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand16 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.music.control.JoinCommand joinCommand17 = new fredboat.command.music.control.JoinCommand("\uD83D\uDEAA", str_array10);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand18 = new fredboat.command.admin.UnblacklistCommand("qua, 31 dez 1969, 09:00 PM", str_array10);
    fredboat.perms.PermissionLevel permissionLevel19 = unblacklistCommand18.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test396"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    boolean b1 = simpleTrackProvider0.isEmpty();
    simpleTrackProvider0.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider3 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider3.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext5 = simpleTrackProvider3.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext5);
    fredboat.audio.queue.RepeatMode repeatMode7 = simpleTrackProvider0.getRepeatMode();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext10 = simpleTrackProvider0.getTracksInRange((int)(short)1, 0);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider12 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext13 = simpleTrackProvider12.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext14 = null;
    simpleTrackProvider12.setLastTrack(audioTrackContext14);
    java.lang.Long[] long_array19 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long20 = new java.util.ArrayList<java.lang.Long>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long20, long_array19);
    simpleTrackProvider12.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long20);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider24 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext25 = simpleTrackProvider24.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext26 = null;
    simpleTrackProvider24.setLastTrack(audioTrackContext26);
    java.lang.Long[] long_array31 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long32 = new java.util.ArrayList<java.lang.Long>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long32, long_array31);
    simpleTrackProvider24.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long32);
    boolean b35 = simpleTrackProvider12.isUserTrackOwner(10L, (java.util.Collection<java.lang.Long>)arraylist_long32);
    boolean b36 = simpleTrackProvider0.isUserTrackOwner(1531610066096L, (java.util.Collection<java.lang.Long>)arraylist_long32);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext37 = simpleTrackProvider0.getAsListOrdered();
    // The following exception was thrown during execution in test generation
    try {
    simpleTrackProvider0.reshuffle();
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext5);
    org.junit.Assert.assertTrue("'" + repeatMode7 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode7.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext37);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test397"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array7);
    fredboat.command.util.MathCommand mathCommand9 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array7);
    fredboat.command.music.control.UnpauseCommand unpauseCommand10 = new fredboat.command.music.control.UnpauseCommand("", str_array7);
    fredboat.command.fun.TextCommand textCommand11 = new fredboat.command.fun.TextCommand("qua, 31 dez 1969, 09:00 PM", "\u274C", str_array7);
    java.lang.String str12 = textCommand11.msg;
    java.lang.String str13 = textCommand11.msg;
    textCommand11.msg = "\u274C";
    textCommand11.msg = "en_US";
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str12.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str13.equals("qua, 31 dez 1969, 09:00 PM"));

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test398"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider0.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext2 = simpleTrackProvider0.getAsListOrdered();
    int i3 = simpleTrackProvider0.streamsCount();
    long long4 = simpleTrackProvider0.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider5 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext6 = simpleTrackProvider5.provideAudioTrack();
    fredboat.audio.queue.RepeatMode repeatMode7 = fredboat.audio.queue.RepeatMode.OFF;
    simpleTrackProvider5.setRepeatMode(repeatMode7);
    simpleTrackProvider0.setRepeatMode(repeatMode7);
    simpleTrackProvider0.clear();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider12 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext13 = simpleTrackProvider12.provideAudioTrack();
    int i14 = simpleTrackProvider12.size();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider15 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode16 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider15.setRepeatMode(repeatMode16);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider18 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext19 = simpleTrackProvider18.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext20 = null;
    simpleTrackProvider18.setLastTrack(audioTrackContext20);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext22 = simpleTrackProvider18.getAsListOrdered();
    simpleTrackProvider15.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext22);
    fredboat.audio.queue.AudioTrackContext audioTrackContext24 = null;
    boolean b25 = simpleTrackProvider15.remove(audioTrackContext24);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider27 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext28 = simpleTrackProvider27.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext29 = null;
    simpleTrackProvider27.setLastTrack(audioTrackContext29);
    java.lang.Long[] long_array34 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long35 = new java.util.ArrayList<java.lang.Long>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long35, long_array34);
    simpleTrackProvider27.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long35);
    java.lang.String[] str_array42 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand43 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array42);
    fredboat.command.admin.ExitCommand exitCommand44 = new fredboat.command.admin.ExitCommand("hi!", str_array42);
    java.util.List<java.lang.String> list_str45 = exitCommand44.aliases;
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand46 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long35, exitCommand44);
    boolean b47 = simpleTrackProvider15.isUserTrackOwner(1531609933098L, (java.util.Collection<java.lang.Long>)arraylist_long35);
    long long48 = simpleTrackProvider15.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider49 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext50 = null;
    simpleTrackProvider49.setLastTrack(audioTrackContext50);
    int i52 = simpleTrackProvider49.size();
    fredboat.audio.queue.AudioTrackContext audioTrackContext53 = simpleTrackProvider49.peek();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider54 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext55 = simpleTrackProvider54.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext56 = null;
    simpleTrackProvider54.setLastTrack(audioTrackContext56);
    java.lang.Long[] long_array61 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long62 = new java.util.ArrayList<java.lang.Long>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long62, long_array61);
    simpleTrackProvider54.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long62);
    simpleTrackProvider49.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long62);
    simpleTrackProvider15.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long62);
    simpleTrackProvider12.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long62);
    boolean b68 = simpleTrackProvider0.isUserTrackOwner(1531609935838L, (java.util.Collection<java.lang.Long>)arraylist_long62);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider69 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext70 = simpleTrackProvider69.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext71 = null;
    simpleTrackProvider69.setLastTrack(audioTrackContext71);
    simpleTrackProvider69.skipped();
    boolean b74 = simpleTrackProvider69.isShuffle();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider75 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode76 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider75.setRepeatMode(repeatMode76);
    boolean b78 = simpleTrackProvider75.isEmpty();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider79 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext80 = simpleTrackProvider79.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext81 = null;
    simpleTrackProvider79.setLastTrack(audioTrackContext81);
    fredboat.audio.queue.RepeatMode repeatMode83 = simpleTrackProvider79.getRepeatMode();
    simpleTrackProvider75.setRepeatMode(repeatMode83);
    simpleTrackProvider69.setRepeatMode(repeatMode83);
    simpleTrackProvider0.setRepeatMode(repeatMode83);
    fredboat.audio.queue.RepeatMode repeatMode87 = simpleTrackProvider0.getRepeatMode();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext6);
    org.junit.Assert.assertTrue("'" + repeatMode7 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode7.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    org.junit.Assert.assertTrue("'" + repeatMode16 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode16.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long48 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    org.junit.Assert.assertTrue("'" + repeatMode76 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode76.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext80);
    org.junit.Assert.assertTrue("'" + repeatMode83 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode83.equals(fredboat.audio.queue.RepeatMode.OFF));
    org.junit.Assert.assertTrue("'" + repeatMode87 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode87.equals(fredboat.audio.queue.RepeatMode.OFF));

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test399"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.music.control.RepeatCommand repeatCommand14 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.music.control.RepeatCommand repeatCommand15 = new fredboat.command.music.control.RepeatCommand("", str_array12);
    fredboat.command.fun.TextCommand textCommand16 = new fredboat.command.fun.TextCommand("hi!", "fredboat.util.BrainfuckException: \u2705", str_array12);
    fredboat.command.music.info.HistoryCommand historyCommand17 = new fredboat.command.music.info.HistoryCommand("qua, 31 dez 1969, 09:00 PM", str_array12);
    fredboat.command.music.control.JoinCommand joinCommand18 = new fredboat.command.music.control.JoinCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.maintenance.PingCommand pingCommand19 = new fredboat.command.maintenance.PingCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.admin.EvalCommand evalCommand20 = new fredboat.command.admin.EvalCommand("hi!", str_array12);
    fredboat.command.admin.ExitCommand exitCommand21 = new fredboat.command.admin.ExitCommand("\u2705", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand22 = new fredboat.command.music.control.ShuffleCommand("fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array12);
    fredboat.messaging.internal.Context context23 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str24 = shuffleCommand22.help(context23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test400"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    java.lang.String str1 = openWeatherCurrent0.getDataProviderString();
    boolean b2 = openWeatherCurrent0.isError();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str1.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test401"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    java.lang.String str1 = weatherOpenWeather0.getDescription();
    java.lang.String str2 = weatherOpenWeather0.getMain();
    weatherOpenWeather0.setMain("Bot Owner");
    weatherOpenWeather0.setIcon(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    weatherOpenWeather0.setId(35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test402"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    blacklistEntry1.setRateLimitReached(3000);
    long long7 = blacklistEntry1.getBlacklistedTimestamp();
    long long8 = blacklistEntry1.getId();
    long long9 = blacklistEntry1.getBlacklistedTimestamp();
    blacklistEntry1.setLevel(0);
    int i12 = blacklistEntry1.rateLimitReached;
    long long13 = blacklistEntry1.blacklistedTimestamp;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long7 == 1531610613994L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long8 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 1531610613994L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3000);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1531610613994L);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test403"); }

    java.lang.String[] str_array8 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand9 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array8);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.util.AvatarCommand avatarCommand11 = new fredboat.command.util.AvatarCommand("\uD83D\uDEAA", str_array8);
    fredboat.command.util.BrainfuckCommand brainfuckCommand12 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array8);
    fredboat.command.maintenance.GetIdCommand getIdCommand13 = new fredboat.command.maintenance.GetIdCommand("\uD83D\uDEAA", str_array8);
    fredboat.command.music.seeking.RewindCommand rewindCommand14 = new fredboat.command.music.seeking.RewindCommand("\uD83D\uDCDD", str_array8);
    fredboat.audio.queue.PlaylistInfo.Source source15 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.util.Tuple2<fredboat.command.music.seeking.RewindCommand,java.lang.Comparable<fredboat.audio.queue.PlaylistInfo.Source>> tuple2_rewindCommand_comparable_source16 = new fredboat.util.Tuple2<fredboat.command.music.seeking.RewindCommand,java.lang.Comparable<fredboat.audio.queue.PlaylistInfo.Source>>(rewindCommand14, (java.lang.Comparable<fredboat.audio.queue.PlaylistInfo.Source>)source15);
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    rewindCommand14.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + source15 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source15.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test404"); }

    java.lang.String[] str_array14 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand15 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.admin.ExitCommand exitCommand16 = new fredboat.command.admin.ExitCommand("hi!", str_array14);
    fredboat.command.music.info.ListCommand listCommand17 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array14);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand18 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array14);
    fredboat.command.fun.PatCommand patCommand19 = new fredboat.command.fun.PatCommand("", "", str_array14);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand20 = new fredboat.command.admin.UnblacklistCommand("hi!", str_array14);
    fredboat.command.music.seeking.RestartCommand restartCommand21 = new fredboat.command.music.seeking.RestartCommand("http://i.imgur.com/NqyOqnj.gif", str_array14);
    fredboat.command.fun.TextCommand textCommand22 = new fredboat.command.fun.TextCommand("en_US", "\uD83D\uDEAA", str_array14);
    fredboat.command.util.ServerInfoCommand serverInfoCommand23 = new fredboat.command.util.ServerInfoCommand("\uD83D\uDCDD", str_array14);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand24 = new fredboat.command.maintenance.AudioDebugCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test405"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    int i1 = weatherSystemOpenWeather0.getType();
    int i2 = weatherSystemOpenWeather0.getSunrise();
    int i3 = weatherSystemOpenWeather0.getSunrise();
    weatherSystemOpenWeather0.setCountry("");
    java.lang.String str6 = weatherSystemOpenWeather0.getCountry();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test406"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.info.ListCommand listCommand8 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array6);
    fredboat.command.music.control.ShuffleCommand shuffleCommand10 = new fredboat.command.music.control.ShuffleCommand("fredboat.util.BrainfuckException: \u2705", str_array6);
    fredboat.command.music.seeking.RestartCommand restartCommand11 = new fredboat.command.music.seeking.RestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array6);
    fredboat.messaging.internal.Context context12 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str13 = restartCommand11.help(context12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test407"); }

    fredboat.util.rest.Weather weather1 = null;
    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.info.ListCommand listCommand8 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.util.WeatherCommand weatherCommand9 = new fredboat.command.util.WeatherCommand(weather1, "fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array6);
    fredboat.command.music.seeking.RewindCommand rewindCommand10 = new fredboat.command.music.seeking.RewindCommand("fredboat.util.BrainfuckException: hi!", str_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test408"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array10);
    fredboat.command.fun.PatCommand patCommand15 = new fredboat.command.fun.PatCommand("", "", str_array10);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand16 = new fredboat.command.admin.UnblacklistCommand("hi!", str_array10);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand17 = new fredboat.command.music.control.ReshuffleCommand("\uD83D\uDEAA", str_array10);
    fredboat.perms.PermissionLevel permissionLevel18 = reshuffleCommand17.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel19 = reshuffleCommand17.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel20 = reshuffleCommand17.getMinimumPerms();
    fredboat.messaging.internal.Context context21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str22 = reshuffleCommand17.help(context21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel20 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel20.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test409"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    long long1 = uConfig0.getBearerExpiration();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("en_US");
    long long4 = uConfig0.getBearerExpiration();
    java.lang.String str5 = uConfig0.getUserId();
    fredboat.db.entity.UConfig uConfig7 = uConfig0.setBearerExpiration(1531610355644L);
    java.lang.String str8 = uConfig0.getUserId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test410"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand12 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.music.info.ListCommand listCommand14 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array11);
    fredboat.command.fun.PatCommand patCommand16 = new fredboat.command.fun.PatCommand("", "", str_array11);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand17 = new fredboat.command.admin.UnblacklistCommand("hi!", str_array11);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand18 = new fredboat.command.music.control.ReshuffleCommand("\uD83D\uDEAA", str_array11);
    fredboat.command.music.control.JoinCommand joinCommand19 = new fredboat.command.music.control.JoinCommand("https://i.imgur.com/YqZuqEB.jpg", str_array11);
    fredboat.perms.PermissionLevel permissionLevel20 = joinCommand19.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel21 = joinCommand19.getMinimumPerms();
    fredboat.messaging.internal.Context context22 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str23 = joinCommand19.help(context22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    org.junit.Assert.assertTrue("'" + permissionLevel20 + "' != '" + fredboat.perms.PermissionLevel.USER + "'", permissionLevel20.equals(fredboat.perms.PermissionLevel.USER));
    org.junit.Assert.assertTrue("'" + permissionLevel21 + "' != '" + fredboat.perms.PermissionLevel.USER + "'", permissionLevel21.equals(fredboat.perms.PermissionLevel.USER));

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test411"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("\u2705");
    java.lang.String str4 = uConfig3.getUserId();
    fredboat.db.entity.UConfig uConfig6 = uConfig3.setBearerExpiration(0L);
    fredboat.db.entity.UConfig uConfig8 = uConfig6.setRefresh("User");
    long long9 = uConfig8.getBearerExpiration();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long9 == 0L);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test412"); }

    fredboat.agent.StatsAgent statsAgent1 = new fredboat.agent.StatsAgent("en_US");
    fredboat.agent.StatsAgent.Action action2 = null;
    statsAgent1.addAction(action2);
    fredboat.agent.StatsAgent.Action action4 = null;
    statsAgent1.addAction(action4);
    statsAgent1.run();
    statsAgent1.run();
    fredboat.agent.StatsAgent.Action action8 = null;
    statsAgent1.addAction(action8);
    // The following exception was thrown during execution in test generation
    try {
    fredboat.agent.FredBoatAgent.startNow((fredboat.agent.FredBoatAgent)statsAgent1);
      org.junit.Assert.fail("Expected exception of type java.util.concurrent.RejectedExecutionException");
    } catch (java.util.concurrent.RejectedExecutionException e) {
      // Expected exception.
    }

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test413"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    long long5 = blacklistEntry1.getId();
    blacklistEntry1.setLevel(0);
    blacklistEntry1.rateLimitReached = 10;
    long long10 = blacklistEntry1.blacklistedTimestamp;
    blacklistEntry1.setBlacklistedTimestamp(1531609935838L);
    long long13 = blacklistEntry1.blacklistedTimestamp;
    blacklistEntry1.setRateLimitReached(32);
    long long16 = blacklistEntry1.getRateLimitReachedTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long5 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long10 == 1531610617045L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long13 == 1531609935838L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long16 == 100L);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test414"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange((int)(byte)10, 10000);
    fredboat.audio.queue.AudioTrackContext audioTrackContext7 = simpleTrackProvider0.peek();
    boolean b8 = simpleTrackProvider0.isEmpty();
    int i9 = simpleTrackProvider0.streamsCount();
    simpleTrackProvider0.skipped();
    long long11 = simpleTrackProvider0.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider12 = new fredboat.audio.queue.SimpleTrackProvider();
    boolean b13 = simpleTrackProvider12.isEmpty();
    simpleTrackProvider12.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider15 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider15.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext17 = simpleTrackProvider15.getAsListOrdered();
    simpleTrackProvider12.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext17);
    fredboat.audio.queue.RepeatMode repeatMode19 = simpleTrackProvider12.getRepeatMode();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext22 = simpleTrackProvider12.getTracksInRange((int)(short)1, 0);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider24 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext25 = simpleTrackProvider24.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext26 = null;
    simpleTrackProvider24.setLastTrack(audioTrackContext26);
    java.lang.Long[] long_array31 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long32 = new java.util.ArrayList<java.lang.Long>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long32, long_array31);
    simpleTrackProvider24.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long32);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider36 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext37 = simpleTrackProvider36.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext38 = null;
    simpleTrackProvider36.setLastTrack(audioTrackContext38);
    java.lang.Long[] long_array43 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long44 = new java.util.ArrayList<java.lang.Long>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long44, long_array43);
    simpleTrackProvider36.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long44);
    boolean b47 = simpleTrackProvider24.isUserTrackOwner(10L, (java.util.Collection<java.lang.Long>)arraylist_long44);
    boolean b48 = simpleTrackProvider12.isUserTrackOwner(1531610066096L, (java.util.Collection<java.lang.Long>)arraylist_long44);
    java.lang.String[] str_array58 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand59 = new fredboat.command.fun.HugCommand("", "\u274C", str_array58);
    fredboat.command.admin.ReviveCommand reviveCommand60 = new fredboat.command.admin.ReviveCommand("Bot Admin", str_array58);
    fredboat.command.admin.ExitCommand exitCommand61 = new fredboat.command.admin.ExitCommand("en_US", str_array58);
    fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand> tuple2_arraylist_long_exitCommand62 = new fredboat.util.Tuple2<java.util.ArrayList<java.lang.Long>,fredboat.command.admin.ExitCommand>(arraylist_long44, exitCommand61);
    simpleTrackProvider0.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long44);
    boolean b64 = simpleTrackProvider0.isShuffle();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long11 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext17);
    org.junit.Assert.assertTrue("'" + repeatMode19 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode19.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test415"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "hi!", "hi!", "Provided by OpenWeatherMap.org" };
    fredboat.command.music.control.PauseCommand pauseCommand8 = new fredboat.command.music.control.PauseCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.fun.CatgirlCommand catgirlCommand9 = new fredboat.command.fun.CatgirlCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array7);
    fredboat.command.maintenance.GetIdCommand getIdCommand10 = new fredboat.command.maintenance.GetIdCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array7);
    fredboat.command.admin.UpdateCommand updateCommand11 = new fredboat.command.admin.UpdateCommand("https://i.imgur.com/YqZuqEB.jpg", str_array7);
    fredboat.perms.PermissionLevel permissionLevel12 = updateCommand11.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.BOT_OWNER + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.BOT_OWNER));

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test416"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand13 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("\u2757", str_array11);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand17 = new fredboat.command.admin.UnblacklistCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand18 = new fredboat.command.admin.UnblacklistCommand("en_US", str_array11);
    fredboat.command.maintenance.NodesCommand nodesCommand19 = new fredboat.command.maintenance.NodesCommand("Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand20 = new fredboat.command.music.info.HistoryCommand("", str_array11);
    fredboat.messaging.internal.Context context21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str22 = historyCommand20.help(context21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test417"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.music.info.ListCommand listCommand14 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.maintenance.NodesCommand nodesCommand15 = new fredboat.command.maintenance.NodesCommand("", str_array12);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("qua, 31 dez 1969, 09:00 PM", str_array12);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand17 = new fredboat.command.admin.SetAvatarCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand18 = new fredboat.command.admin.SetAvatarCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.fun.TextCommand textCommand19 = new fredboat.command.fun.TextCommand("fredboat.util.rest.APILimitException: en_US", "", str_array12);
    fredboat.command.admin.UpdateCommand updateCommand20 = new fredboat.command.admin.UpdateCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.music.control.StopCommand stopCommand21 = new fredboat.command.music.control.StopCommand("fredboat.util.BrainfuckException: ", str_array12);
    fredboat.command.music.seeking.SeekCommand seekCommand22 = new fredboat.command.music.seeking.SeekCommand("\uD83D\uDCDD", str_array12);
    fredboat.messaging.internal.Context context23 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str24 = seekCommand22.help(context23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test418"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.fun.TextCommand textCommand13 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array10);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.fun.FacedeskCommand facedeskCommand15 = new fredboat.command.fun.FacedeskCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array10);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand16 = new fredboat.command.moderation.EnableCommandsCommand("Provided by OpenWeatherMap.org", str_array10);
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    enableCommandsCommand16.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test419"); }

    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather0 = new fredboat.util.rest.models.weather.CloudsOpenWeather();
    cloudsOpenWeather0.setAll(10);
    int i3 = cloudsOpenWeather0.getAll();
    cloudsOpenWeather0.setAll(2);
    cloudsOpenWeather0.setAll(2);
    int i8 = cloudsOpenWeather0.getAll();
    cloudsOpenWeather0.setAll(1);
    cloudsOpenWeather0.setAll(97);
    cloudsOpenWeather0.setAll((-1));
    cloudsOpenWeather0.setAll((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test420"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.lang.Long[] long_array5 = new java.lang.Long[] { 1531609931147L };
    java.util.ArrayList<java.lang.Long> arraylist_long6 = new java.util.ArrayList<java.lang.Long>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long6, long_array5);
    simpleTrackProvider0.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long6);
    boolean b9 = simpleTrackProvider0.isEmpty();
    int i10 = simpleTrackProvider0.size();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider11 = new fredboat.audio.queue.SimpleTrackProvider();
    boolean b12 = simpleTrackProvider11.isEmpty();
    simpleTrackProvider11.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext14 = simpleTrackProvider11.getAsList();
    simpleTrackProvider0.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext14);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test421"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.music.control.RepeatCommand repeatCommand7 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array5);
    fredboat.command.music.control.RepeatCommand repeatCommand8 = new fredboat.command.music.control.RepeatCommand("", str_array5);
    fredboat.command.music.seeking.ForwardCommand forwardCommand9 = new fredboat.command.music.seeking.ForwardCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array5);
    fredboat.messaging.internal.Context context10 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = forwardCommand9.help(context10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test422"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange((int)(byte)10, 10000);
    fredboat.audio.queue.AudioTrackContext audioTrackContext7 = simpleTrackProvider0.peek();
    boolean b8 = simpleTrackProvider0.isEmpty();
    fredboat.audio.queue.AudioTrackContext audioTrackContext9 = null;
    boolean b10 = simpleTrackProvider0.remove(audioTrackContext9);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider11 = new fredboat.audio.queue.SimpleTrackProvider();
    boolean b12 = simpleTrackProvider11.isEmpty();
    simpleTrackProvider11.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider14 = new fredboat.audio.queue.SimpleTrackProvider();
    simpleTrackProvider14.skipped();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext16 = simpleTrackProvider14.getAsListOrdered();
    simpleTrackProvider11.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext16);
    fredboat.audio.queue.RepeatMode repeatMode18 = simpleTrackProvider11.getRepeatMode();
    simpleTrackProvider0.setRepeatMode(repeatMode18);
    // The following exception was thrown during execution in test generation
    try {
    simpleTrackProvider0.reshuffle();
      org.junit.Assert.fail("Expected exception of type java.lang.NoClassDefFoundError");
    } catch (java.lang.NoClassDefFoundError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext16);
    org.junit.Assert.assertTrue("'" + repeatMode18 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode18.equals(fredboat.audio.queue.RepeatMode.OFF));

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test423"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array7);
    fredboat.command.util.CommandsCommand commandsCommand10 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array7);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("\u2705", str_array7);
    fredboat.command.music.seeking.SeekCommand seekCommand12 = new fredboat.command.music.seeking.SeekCommand("Provided by OpenWeatherMap.org", str_array7);
    fredboat.command.fun.CatgirlCommand catgirlCommand13 = new fredboat.command.fun.CatgirlCommand("qua, 31 dez 1969, 09:00 PM", str_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test424"); }

    java.lang.String[] str_array16 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand17 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array16);
    fredboat.command.util.MathCommand mathCommand18 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array16);
    fredboat.command.music.control.UnpauseCommand unpauseCommand19 = new fredboat.command.music.control.UnpauseCommand("", str_array16);
    fredboat.command.admin.ExitCommand exitCommand20 = new fredboat.command.admin.ExitCommand("hi!", str_array16);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand21 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array16);
    fredboat.command.music.control.RepeatCommand repeatCommand22 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array16);
    fredboat.command.music.seeking.RestartCommand restartCommand23 = new fredboat.command.music.seeking.RestartCommand("Bot Admin", str_array16);
    fredboat.command.music.seeking.RestartCommand restartCommand24 = new fredboat.command.music.seeking.RestartCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array16);
    fredboat.command.fun.HugCommand hugCommand25 = new fredboat.command.fun.HugCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "https://i.imgur.com/YqZuqEB.jpg", str_array16);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand26 = new fredboat.command.maintenance.AudioDebugCommand("hi!", str_array16);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand27 = new fredboat.command.admin.NodeAdminCommand("https://i.imgur.com/YqZuqEB.jpg", str_array16);
    fredboat.command.maintenance.AudioDebugCommand audioDebugCommand28 = new fredboat.command.maintenance.AudioDebugCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array16);
    fredboat.command.maintenance.PingCommand pingCommand29 = new fredboat.command.maintenance.PingCommand("", str_array16);
    fredboat.commandmeta.abs.CommandContext commandContext30 = null;
    // The following exception was thrown during execution in test generation
    try {
    pingCommand29.onInvoke(commandContext30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test425"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("qua, 31 dez 1969, 09:00 PM", "\u274C", str_array11);
    fredboat.command.admin.ReviveCommand reviveCommand16 = new fredboat.command.admin.ReviveCommand("fredboat.util.BrainfuckException: \u2705", str_array11);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.fun.RollCommand rollCommand18 = new fredboat.command.fun.RollCommand("http://i.imgur.com/NqyOqnj.gif", "fredboat.util.BrainfuckException: hi!", str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test426"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.music.info.ListCommand listCommand7 = new fredboat.command.music.info.ListCommand("Provided by OpenWeatherMap.org", str_array5);
    java.util.List<java.lang.String> list_str8 = listCommand7.aliases;
    guildPermissions1.setDjList(list_str8);
    guildPermissions0.setUserList(list_str8);
    java.util.List<java.lang.String> list_str11 = guildPermissions0.getDjList();
    java.util.List<java.lang.String> list_str12 = guildPermissions0.getDjList();
    java.util.List<java.lang.String> list_str13 = guildPermissions0.getDjList();
    java.util.List<java.lang.String> list_str14 = guildPermissions0.getAdminList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str14);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test427"); }

    java.lang.String[] str_array1 = null;
    // The following exception was thrown during execution in test generation
    try {
    fredboat.command.music.control.PauseCommand pauseCommand2 = new fredboat.command.music.control.PauseCommand("Bot Admin", str_array1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test428"); }

    java.lang.String[] str_array4 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand5 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array4);
    fredboat.command.music.control.UnpauseCommand unpauseCommand6 = new fredboat.command.music.control.UnpauseCommand("Provided by OpenWeatherMap.org", str_array4);
    fredboat.perms.PermissionLevel permissionLevel7 = unpauseCommand6.getMinimumPerms();
    int i8 = permissionLevel7.getLevel();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array4);
    org.junit.Assert.assertTrue("'" + permissionLevel7 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel7.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test429"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand11 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array10);
    fredboat.command.music.control.ShuffleCommand shuffleCommand12 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.fun.TextCommand textCommand13 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array10);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand15 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array10);
    fredboat.command.util.MathCommand mathCommand16 = new fredboat.command.util.MathCommand("", str_array10);
    fredboat.command.util.ServerInfoCommand serverInfoCommand17 = new fredboat.command.util.ServerInfoCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array10);
    fredboat.messaging.internal.Context context18 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = serverInfoCommand17.help(context18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test430"); }

    fredboat.db.entity.GuildConfig guildConfig1 = new fredboat.db.entity.GuildConfig("qua, 31 dez 1969, 09:00 PM");
    boolean b2 = guildConfig1.isAutoResume();
    guildConfig1.setLang("fredboat.util.BrainfuckException: hi!");
    java.lang.String str5 = guildConfig1.getGuildId();
    guildConfig1.setLang("DJ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str5.equals("qua, 31 dez 1969, 09:00 PM"));

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test431"); }

    fredboat.audio.queue.PlaylistInfo.Source source2 = fredboat.audio.queue.PlaylistInfo.Source.PASTESERVICE;
    fredboat.audio.queue.PlaylistInfo playlistInfo3 = new fredboat.audio.queue.PlaylistInfo((int)'4', "", source2);
    playlistInfo3.setName("fredboat.util.BrainfuckException: https://i.imgur.com/YqZuqEB.jpg");
    org.junit.Assert.assertTrue("'" + source2 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.PASTESERVICE + "'", source2.equals(fredboat.audio.queue.PlaylistInfo.Source.PASTESERVICE));

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test432"); }

    java.lang.String[] str_array16 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand17 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array16);
    fredboat.command.admin.BotRestartCommand botRestartCommand18 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array16);
    fredboat.command.maintenance.VersionCommand versionCommand19 = new fredboat.command.maintenance.VersionCommand("fredboat.util.BrainfuckException: \u2705", str_array16);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand20 = new fredboat.command.music.control.PlaySplitCommand("http://i.imgur.com/NqyOqnj.gif", str_array16);
    fredboat.command.util.MathCommand mathCommand21 = new fredboat.command.util.MathCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array16);
    fredboat.command.admin.ReviveCommand reviveCommand22 = new fredboat.command.admin.ReviveCommand("fredboat.util.BrainfuckException: \u2705", str_array16);
    fredboat.command.admin.UnblacklistCommand unblacklistCommand23 = new fredboat.command.admin.UnblacklistCommand("Bot Admin", str_array16);
    fredboat.command.util.CommandsCommand commandsCommand24 = new fredboat.command.util.CommandsCommand("", str_array16);
    fredboat.command.music.control.DestroyCommand destroyCommand25 = new fredboat.command.music.control.DestroyCommand("qua, 31 dez 1969, 09:00 PM", str_array16);
    fredboat.commandmeta.abs.CommandContext commandContext26 = null;
    // The following exception was thrown during execution in test generation
    try {
    destroyCommand25.onInvoke(commandContext26);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array16);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test433"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array10);
    fredboat.command.util.BrainfuckCommand brainfuckCommand15 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.PauseCommand pauseCommand16 = new fredboat.command.music.control.PauseCommand("Bot Admin", str_array10);
    fredboat.command.fun.RemoteFileCommand remoteFileCommand17 = new fredboat.command.fun.RemoteFileCommand("\u2757", "\u2705", str_array10);
    java.lang.String str18 = remoteFileCommand17.url;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "\u2757"+ "'", str18.equals("\u2757"));

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test434"); }

    java.lang.String[] str_array3 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand4 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array3);
    fredboat.command.music.control.RepeatCommand repeatCommand5 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array3);
    fredboat.perms.PermissionLevel permissionLevel6 = repeatCommand5.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel7 = repeatCommand5.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel8 = repeatCommand5.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel9 = repeatCommand5.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel10 = repeatCommand5.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext11 = null;
    // The following exception was thrown during execution in test generation
    try {
    repeatCommand5.onInvoke(commandContext11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array3);
    org.junit.Assert.assertTrue("'" + permissionLevel6 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel6.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel7 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel7.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel8 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel8.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel9 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel9.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel10 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel10.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test435"); }

    java.lang.String[] str_array11 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand12 = new fredboat.command.fun.HugCommand("", "\u274C", str_array11);
    fredboat.command.fun.TextCommand textCommand13 = new fredboat.command.fun.TextCommand("\uD83D\uDCDD", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.util.ServerInfoCommand serverInfoCommand14 = new fredboat.command.util.ServerInfoCommand("Bot Owner", str_array11);
    fredboat.command.maintenance.VersionCommand versionCommand15 = new fredboat.command.maintenance.VersionCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", str_array11);
    fredboat.messaging.internal.Context context16 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = versionCommand15.help(context16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test436"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand10 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.admin.ExitCommand exitCommand11 = new fredboat.command.admin.ExitCommand("hi!", str_array9);
    fredboat.command.music.info.ListCommand listCommand12 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand13 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array9);
    fredboat.command.util.BrainfuckCommand brainfuckCommand14 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.control.PauseCommand pauseCommand15 = new fredboat.command.music.control.PauseCommand("Bot Admin", str_array9);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand16 = new fredboat.command.admin.SetAvatarCommand("en_US", str_array9);
    fredboat.perms.PermissionLevel permissionLevel17 = setAvatarCommand16.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel18 = setAvatarCommand16.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);
    org.junit.Assert.assertTrue("'" + permissionLevel17 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel17.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel18 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel18.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test437"); }

    fredboat.db.entity.UConfig uConfig1 = new fredboat.db.entity.UConfig(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D");
    java.lang.String str2 = uConfig1.getUserId();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D"+ "'", str2.equals(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D"));

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test438"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    openWeatherCurrent0.setId((int)(byte)100);
    openWeatherCurrent0.setId((int)' ');
    int i5 = openWeatherCurrent0.getCode();
    int i6 = openWeatherCurrent0.getCode();
    int i7 = openWeatherCurrent0.getId();
    java.lang.String str8 = openWeatherCurrent0.getWeatherDescription();
    int i9 = openWeatherCurrent0.getVisibility();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test439"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather3 = openWeatherCurrent0.getClouds();
    java.lang.String str4 = openWeatherCurrent0.getThumbnailUrl();
    openWeatherCurrent0.setId((int)(byte)0);
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather7 = openWeatherCurrent0.getClouds();
    java.util.List<fredboat.util.rest.models.weather.WeatherOpenWeather> list_weatherOpenWeather8 = openWeatherCurrent0.getWeather();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_weatherOpenWeather8);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test440"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand14 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array13);
    fredboat.command.util.MathCommand mathCommand15 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array13);
    fredboat.command.music.control.UnpauseCommand unpauseCommand16 = new fredboat.command.music.control.UnpauseCommand("", str_array13);
    fredboat.command.admin.ExitCommand exitCommand17 = new fredboat.command.admin.ExitCommand("hi!", str_array13);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand18 = new fredboat.command.moderation.EnableCommandsCommand("hi!", str_array13);
    fredboat.command.music.control.RepeatCommand repeatCommand19 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array13);
    fredboat.command.admin.EvalCommand evalCommand20 = new fredboat.command.admin.EvalCommand("https://i.imgur.com/YqZuqEB.jpg", str_array13);
    fredboat.command.moderation.LanguageCommand languageCommand21 = new fredboat.command.moderation.LanguageCommand("\u2705", str_array13);
    fredboat.command.maintenance.PingCommand pingCommand22 = new fredboat.command.maintenance.PingCommand("fredboat.util.BrainfuckException: hi!", str_array13);
    fredboat.command.fun.FacedeskCommand facedeskCommand23 = new fredboat.command.fun.FacedeskCommand("en_US", "Bot Admin", str_array13);
    fredboat.commandmeta.abs.CommandContext commandContext24 = null;
    // The following exception was thrown during execution in test generation
    try {
    facedeskCommand23.onInvoke(commandContext24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test441"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str2 = guildPermissions1.getDjList();
    guildPermissions0.setUserList(list_str2);
    fredboat.db.entity.GuildPermissions guildPermissions4 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions5 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str6 = guildPermissions5.getDjList();
    guildPermissions4.setUserList(list_str6);
    java.lang.String[] str_array12 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand13 = new fredboat.command.music.control.RepeatCommand("", str_array12);
    fredboat.command.music.control.LeaveCommand leaveCommand14 = new fredboat.command.music.control.LeaveCommand("hi!", str_array12);
    fredboat.perms.PermissionLevel permissionLevel15 = leaveCommand14.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel16 = leaveCommand14.getMinimumPerms();
    java.util.List<java.lang.String> list_str17 = guildPermissions4.getFromEnum(permissionLevel16);
    java.util.List<java.lang.String> list_str18 = guildPermissions4.getAdminList();
    guildPermissions0.setDjList(list_str18);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand30 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array29);
    fredboat.command.music.control.ShuffleCommand shuffleCommand31 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array29);
    fredboat.command.fun.TextCommand textCommand32 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array29);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand33 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array29);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand34 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array29);
    fredboat.command.music.control.UnpauseCommand unpauseCommand35 = new fredboat.command.music.control.UnpauseCommand("\uD83D\uDCDD", str_array29);
    fredboat.perms.PermissionLevel permissionLevel36 = unpauseCommand35.getMinimumPerms();
    java.util.List<java.lang.String> list_str37 = guildPermissions0.getFromEnum(permissionLevel36);
    java.util.List<java.lang.String> list_str38 = guildPermissions0.getUserList();
    java.util.List<java.lang.String> list_str39 = guildPermissions0.getAdminList();
    guildPermissions0.setId("fredboat.util.BrainfuckException: ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    org.junit.Assert.assertTrue("'" + permissionLevel15 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel15.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    org.junit.Assert.assertTrue("'" + permissionLevel36 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel36.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str39);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test442"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "hi!", "hi!", "Provided by OpenWeatherMap.org" };
    fredboat.command.music.control.PauseCommand pauseCommand8 = new fredboat.command.music.control.PauseCommand("\uD83D\uDCDD", str_array7);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand9 = new fredboat.command.music.control.ReshuffleCommand("fredboat.util.BrainfuckException: \u2705", str_array7);
    fredboat.command.fun.RollCommand rollCommand10 = new fredboat.command.fun.RollCommand("", "fredboat.util.rest.APILimitException: en_US", str_array7);
    fredboat.messaging.internal.Context context11 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str12 = rollCommand10.help(context11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test443"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    int i1 = weatherSystemOpenWeather0.getType();
    weatherSystemOpenWeather0.setCountry("fredboat.util.BrainfuckException: hi!");
    weatherSystemOpenWeather0.setSunset(5);
    weatherSystemOpenWeather0.setCountry("\u274C");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test444"); }

    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode0 = fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR;
    fredboat.util.rest.models.weather.WeatherError weatherError1 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    fredboat.util.rest.models.weather.WeatherError weatherError2 = new fredboat.util.rest.models.weather.WeatherError(errorCode0);
    java.lang.String str3 = weatherError2.getTemperature();
    java.lang.String str4 = weatherError2.getFormattedDate();
    java.lang.String str5 = weatherError2.getFormattedDate();
    java.lang.String str6 = weatherError2.getDataProviderIcon();
    java.lang.String str7 = weatherError2.getDataProviderString();
    org.junit.Assert.assertTrue("'" + errorCode0 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode0.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test445"); }

    java.lang.String[] str_array11 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand12 = new fredboat.command.fun.HugCommand("", "\u274C", str_array11);
    fredboat.command.fun.TextCommand textCommand13 = new fredboat.command.fun.TextCommand("\uD83D\uDCDD", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand14 = new fredboat.command.admin.SetAvatarCommand("fredboat.util.BrainfuckException: \uD83D\uDEAA", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand15 = new fredboat.command.music.info.HistoryCommand("\u274C", str_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test446"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand12 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.admin.ExitCommand exitCommand13 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.music.info.ListCommand listCommand14 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand15 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array11);
    fredboat.command.fun.PatCommand patCommand16 = new fredboat.command.fun.PatCommand("", "", str_array11);
    fredboat.command.music.info.HistoryCommand historyCommand17 = new fredboat.command.music.info.HistoryCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array11);
    fredboat.command.moderation.ConfigCommand configCommand18 = new fredboat.command.moderation.ConfigCommand("en_US", str_array11);
    fredboat.command.music.control.ReshuffleCommand reshuffleCommand19 = new fredboat.command.music.control.ReshuffleCommand("fredboat.util.BrainfuckException: ", str_array11);
    fredboat.perms.PermissionLevel permissionLevel20 = reshuffleCommand19.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    reshuffleCommand19.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    org.junit.Assert.assertTrue("'" + permissionLevel20 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel20.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test447"); }

    fredboat.util.BrainfuckException brainfuckException4 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    java.lang.Throwable[] throwable_array5 = brainfuckException4.getSuppressed();
    java.lang.String str6 = brainfuckException4.toString();
    fredboat.util.BrainfuckException brainfuckException7 = new fredboat.util.BrainfuckException("https://i.imgur.com/YqZuqEB.jpg", (java.lang.Throwable)brainfuckException4);
    fredboat.util.BrainfuckException brainfuckException11 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException12 = new fredboat.util.BrainfuckException("", (java.lang.Throwable)brainfuckException11);
    java.lang.Throwable[] throwable_array13 = brainfuckException12.getSuppressed();
    fredboat.util.BrainfuckException brainfuckException15 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    java.lang.Throwable[] throwable_array16 = brainfuckException15.getSuppressed();
    brainfuckException12.addSuppressed((java.lang.Throwable)brainfuckException15);
    fredboat.util.BrainfuckException brainfuckException22 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException23 = new fredboat.util.BrainfuckException("", (java.lang.Throwable)brainfuckException22);
    fredboat.util.BrainfuckException brainfuckException24 = new fredboat.util.BrainfuckException("\uD83D\uDEAA", (java.lang.Throwable)brainfuckException22);
    fredboat.commandmeta.MessagingException messagingException25 = new fredboat.commandmeta.MessagingException("", (java.lang.Throwable)brainfuckException24);
    brainfuckException12.addSuppressed((java.lang.Throwable)brainfuckException24);
    fredboat.util.rest.APILimitException aPILimitException28 = new fredboat.util.rest.APILimitException("qua, 31 dez 1969, 09:00 PM");
    fredboat.util.BrainfuckException brainfuckException31 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    fredboat.util.BrainfuckException brainfuckException32 = new fredboat.util.BrainfuckException("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", (java.lang.Throwable)brainfuckException31);
    aPILimitException28.addSuppressed((java.lang.Throwable)brainfuckException31);
    brainfuckException24.addSuppressed((java.lang.Throwable)brainfuckException31);
    fredboat.commandmeta.MessagingException messagingException35 = new fredboat.commandmeta.MessagingException("\uD83D\uDCDD", (java.lang.Throwable)brainfuckException24);
    brainfuckException7.addSuppressed((java.lang.Throwable)messagingException35);
    fredboat.util.BrainfuckException brainfuckException39 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    fredboat.util.BrainfuckException brainfuckException40 = new fredboat.util.BrainfuckException("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", (java.lang.Throwable)brainfuckException39);
    java.lang.Throwable[] throwable_array41 = brainfuckException39.getSuppressed();
    brainfuckException7.addSuppressed((java.lang.Throwable)brainfuckException39);
    fredboat.commandmeta.MessagingException messagingException43 = new fredboat.commandmeta.MessagingException("DJ", (java.lang.Throwable)brainfuckException7);
    fredboat.util.BrainfuckException brainfuckException44 = new fredboat.util.BrainfuckException("\u274C", (java.lang.Throwable)brainfuckException7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org"+ "'", str6.equals("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array41);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test448"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry((long)(short)10);
    blacklistEntry1.rateLimitReachedTimestamp = (byte)100;
    long long4 = blacklistEntry1.rateLimitReachedTimestamp;
    int i5 = blacklistEntry1.getLevel();
    long long6 = blacklistEntry1.id;
    blacklistEntry1.rateLimitReached = (short)10;
    int i9 = blacklistEntry1.getLevel();
    blacklistEntry1.setLevel((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long6 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == (-1));

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test449"); }

    java.util.concurrent.TimeUnit timeUnit2 = null;
    // The following exception was thrown during execution in test generation
    try {
    fredboat.agent.StatsAgent statsAgent3 = new fredboat.agent.StatsAgent("\u2757", 32, timeUnit2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test450"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode1 = fredboat.audio.queue.RepeatMode.SINGLE;
    simpleTrackProvider0.setRepeatMode(repeatMode1);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext3 = simpleTrackProvider0.getAsListOrdered();
    simpleTrackProvider0.clear();
    // The following exception was thrown during execution in test generation
    try {
    fredboat.audio.queue.AudioTrackContext audioTrackContext6 = simpleTrackProvider0.getTrack(3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + repeatMode1 + "' != '" + fredboat.audio.queue.RepeatMode.SINGLE + "'", repeatMode1.equals(fredboat.audio.queue.RepeatMode.SINGLE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext3);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test451"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand10 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.admin.ExitCommand exitCommand11 = new fredboat.command.admin.ExitCommand("hi!", str_array9);
    fredboat.command.music.info.ListCommand listCommand12 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand13 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array9);
    fredboat.command.util.BrainfuckCommand brainfuckCommand14 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.seeking.RestartCommand restartCommand15 = new fredboat.command.music.seeking.RestartCommand("hi!", str_array9);
    fredboat.command.moderation.LanguageCommand languageCommand16 = new fredboat.command.moderation.LanguageCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.messaging.internal.Context context17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = languageCommand16.help(context17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test452"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    weatherMainOpenWeather0.setTempMax((double)0);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.admin.ExitCommand exitCommand17 = new fredboat.command.admin.ExitCommand("hi!", str_array15);
    fredboat.command.music.info.ListCommand listCommand18 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array15);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand19 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array15);
    fredboat.command.util.BrainfuckCommand brainfuckCommand20 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.music.seeking.RestartCommand restartCommand21 = new fredboat.command.music.seeking.RestartCommand("hi!", str_array15);
    fredboat.command.maintenance.GetIdCommand getIdCommand22 = new fredboat.command.maintenance.GetIdCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.command.music.control.StopCommand stopCommand23 = new fredboat.command.music.control.StopCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.perms.PermissionLevel permissionLevel24 = stopCommand23.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel25 = stopCommand23.getMinimumPerms();
    fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherMainOpenWeather,fredboat.commandmeta.abs.IMusicCommand> tuple2_weatherMainOpenWeather_iMusicCommand26 = new fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherMainOpenWeather,fredboat.commandmeta.abs.IMusicCommand>(weatherMainOpenWeather0, (fredboat.commandmeta.abs.IMusicCommand)stopCommand23);
    fredboat.perms.PermissionLevel permissionLevel27 = stopCommand23.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel28 = stopCommand23.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    org.junit.Assert.assertTrue("'" + permissionLevel24 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel24.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel25 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel25.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel27 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel27.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel28 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel28.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test453"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode errorCode2 = openWeatherCurrent0.errorType();
    int i3 = openWeatherCurrent0.getId();
    java.lang.String str4 = openWeatherCurrent0.getThumbnailUrl();
    java.lang.String str5 = openWeatherCurrent0.getFormattedDate();
    java.lang.String str6 = openWeatherCurrent0.getDataProviderString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    org.junit.Assert.assertTrue("'" + errorCode2 + "' != '" + fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR + "'", errorCode2.equals(fredboat.util.rest.models.weather.RetrievedWeather.ErrorCode.NO_ERROR));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str5.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str6.equals("Provided by OpenWeatherMap.org"));

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test454"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array10);
    fredboat.command.fun.PatCommand patCommand15 = new fredboat.command.fun.PatCommand("", "", str_array10);
    fredboat.command.util.BrainfuckCommand brainfuckCommand16 = new fredboat.command.util.BrainfuckCommand("http://i.imgur.com/NqyOqnj.gif", str_array10);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand17 = new fredboat.command.moderation.EnableCommandsCommand("fredboat.util.BrainfuckException: ", str_array10);
    fredboat.commandmeta.abs.CommandContext commandContext18 = null;
    // The following exception was thrown during execution in test generation
    try {
    enableCommandsCommand17.onInvoke(commandContext18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test455"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand13 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array12);
    fredboat.command.admin.BotRestartCommand botRestartCommand14 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.fun.FacedeskCommand facedeskCommand15 = new fredboat.command.fun.FacedeskCommand("fredboat.util.BrainfuckException: :\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "\u2757", str_array12);
    fredboat.command.music.seeking.ForwardCommand forwardCommand16 = new fredboat.command.music.seeking.ForwardCommand("DJ", str_array12);
    fredboat.commandmeta.abs.CommandContext commandContext17 = null;
    // The following exception was thrown during execution in test generation
    try {
    forwardCommand16.onInvoke(commandContext17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test456"); }

    java.lang.String[] str_array14 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand15 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array14);
    fredboat.command.music.control.ShuffleCommand shuffleCommand16 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array14);
    fredboat.command.fun.TextCommand textCommand17 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array14);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand18 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array14);
    fredboat.command.music.seeking.RewindCommand rewindCommand19 = new fredboat.command.music.seeking.RewindCommand("", str_array14);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand20 = new fredboat.command.admin.NodeAdminCommand("\u2705", str_array14);
    fredboat.command.admin.ReviveCommand reviveCommand21 = new fredboat.command.admin.ReviveCommand("\u274C", str_array14);
    fredboat.command.fun.RandomImageCommand randomImageCommand22 = new fredboat.command.fun.RandomImageCommand("\uD83D\uDCDD", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array14);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand23 = new fredboat.command.moderation.EnableCommandsCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array14);
    fredboat.command.music.control.DestroyCommand destroyCommand24 = new fredboat.command.music.control.DestroyCommand("DJ", str_array14);
    fredboat.commandmeta.abs.CommandContext commandContext25 = null;
    // The following exception was thrown during execution in test generation
    try {
    destroyCommand24.onInvoke(commandContext25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array14);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test457"); }

    fredboat.agent.StatsAgent statsAgent1 = new fredboat.agent.StatsAgent("\u2705");
    statsAgent1.run();
    fredboat.agent.StatsAgent.Action action3 = null;
    statsAgent1.addAction(action3);
    statsAgent1.run();

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test458"); }

    java.lang.String[] str_array2 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand3 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array2);
    fredboat.perms.PermissionLevel permissionLevel4 = nodeAdminCommand3.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext5 = null;
    // The following exception was thrown during execution in test generation
    try {
    nodeAdminCommand3.onInvoke(commandContext5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array2);
    org.junit.Assert.assertTrue("'" + permissionLevel4 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel4.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test459"); }

    java.lang.String[] str_array11 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand12 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array11);
    fredboat.command.util.MathCommand mathCommand13 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array11);
    fredboat.command.music.control.UnpauseCommand unpauseCommand14 = new fredboat.command.music.control.UnpauseCommand("", str_array11);
    fredboat.command.admin.ExitCommand exitCommand15 = new fredboat.command.admin.ExitCommand("hi!", str_array11);
    fredboat.command.admin.BotRestartCommand botRestartCommand16 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array11);
    fredboat.command.admin.ReviveCommand reviveCommand17 = new fredboat.command.admin.ReviveCommand("", str_array11);
    fredboat.command.fun.FacedeskCommand facedeskCommand18 = new fredboat.command.fun.FacedeskCommand("\u2757", "DJ", str_array11);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand19 = new fredboat.command.moderation.EnableCommandsCommand("\uD83D\uDEAA", str_array11);
    fredboat.perms.PermissionLevel permissionLevel20 = enableCommandsCommand19.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    enableCommandsCommand19.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array11);
    org.junit.Assert.assertTrue("'" + permissionLevel20 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel20.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test460"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str2 = guildPermissions1.getDjList();
    guildPermissions0.setUserList(list_str2);
    java.lang.String[] str_array8 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("", str_array8);
    fredboat.command.music.control.LeaveCommand leaveCommand10 = new fredboat.command.music.control.LeaveCommand("hi!", str_array8);
    fredboat.perms.PermissionLevel permissionLevel11 = leaveCommand10.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel12 = leaveCommand10.getMinimumPerms();
    java.util.List<java.lang.String> list_str13 = guildPermissions0.getFromEnum(permissionLevel12);
    java.util.List<java.lang.String> list_str14 = guildPermissions0.getAdminList();
    fredboat.db.entity.GuildPermissions guildPermissions15 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions16 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str17 = guildPermissions16.getDjList();
    guildPermissions15.setUserList(list_str17);
    java.lang.String[] str_array23 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand24 = new fredboat.command.music.control.RepeatCommand("", str_array23);
    fredboat.command.music.control.LeaveCommand leaveCommand25 = new fredboat.command.music.control.LeaveCommand("hi!", str_array23);
    fredboat.perms.PermissionLevel permissionLevel26 = leaveCommand25.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel27 = leaveCommand25.getMinimumPerms();
    java.util.List<java.lang.String> list_str28 = guildPermissions15.getFromEnum(permissionLevel27);
    java.util.List<java.lang.String> list_str29 = guildPermissions15.getAdminList();
    guildPermissions0.setDjList(list_str29);
    java.util.List<java.lang.String> list_str31 = guildPermissions0.getUserList();
    java.lang.String[] str_array38 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand39 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array38);
    fredboat.command.maintenance.PingCommand pingCommand40 = new fredboat.command.maintenance.PingCommand("\u274C", str_array38);
    fredboat.command.music.control.DestroyCommand destroyCommand41 = new fredboat.command.music.control.DestroyCommand("\u2757", str_array38);
    fredboat.command.music.control.DestroyCommand destroyCommand42 = new fredboat.command.music.control.DestroyCommand("\u2757", str_array38);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand43 = new fredboat.command.moderation.DisableCommandsCommand("Bot Owner", str_array38);
    fredboat.perms.PermissionLevel permissionLevel44 = disableCommandsCommand43.getMinimumPerms();
    fredboat.db.entity.GuildPermissions guildPermissions45 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array55 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand56 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array55);
    fredboat.command.music.control.ShuffleCommand shuffleCommand57 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array55);
    fredboat.command.fun.TextCommand textCommand58 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array55);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand59 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array55);
    fredboat.command.fun.FacedeskCommand facedeskCommand60 = new fredboat.command.fun.FacedeskCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array55);
    java.util.List<java.lang.String> list_str61 = facedeskCommand60.aliases;
    guildPermissions45.setUserList(list_str61);
    java.util.List<java.lang.String> list_str63 = guildPermissions45.getDjList();
    java.util.List<java.lang.String> list_str64 = guildPermissions45.getAdminList();
    // The following exception was thrown during execution in test generation
    try {
    guildPermissions0.setFromEnum(permissionLevel44, list_str64);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel11 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel11.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array23);
    org.junit.Assert.assertTrue("'" + permissionLevel26 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel26.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel27 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel27.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array38);
    org.junit.Assert.assertTrue("'" + permissionLevel44 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel44.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str64);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test461"); }

    java.lang.String[] str_array7 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand8 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array7);
    fredboat.command.music.control.ShuffleCommand shuffleCommand9 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array7);
    fredboat.command.util.ServerInfoCommand serverInfoCommand10 = new fredboat.command.util.ServerInfoCommand("\u2757", str_array7);
    fredboat.command.util.CommandsCommand commandsCommand11 = new fredboat.command.util.CommandsCommand("qua, 31 dez 1969, 09:00 PM", str_array7);
    fredboat.command.util.MathCommand mathCommand12 = new fredboat.command.util.MathCommand("fredboat.util.rest.APILimitException: en_US", str_array7);
    fredboat.messaging.internal.Context context13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = mathCommand12.help(context13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array7);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test462"); }

    java.lang.String[] str_array15 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand17 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.fun.TextCommand textCommand18 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array15);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand19 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand20 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array15);
    fredboat.command.moderation.ConfigCommand configCommand21 = new fredboat.command.moderation.ConfigCommand("https://i.imgur.com/YqZuqEB.jpg", str_array15);
    fredboat.command.fun.HugCommand hugCommand22 = new fredboat.command.fun.HugCommand("", "\uD83D\uDEAA", str_array15);
    fredboat.command.admin.EvalCommand evalCommand23 = new fredboat.command.admin.EvalCommand("qua, 31 dez 1969, 09:00 PM", str_array15);
    fredboat.command.maintenance.VersionCommand versionCommand24 = new fredboat.command.maintenance.VersionCommand("\u2705", str_array15);
    fredboat.command.music.control.ShuffleCommand shuffleCommand25 = new fredboat.command.music.control.ShuffleCommand("fredboat.util.BrainfuckException: hi!", str_array15);
    fredboat.command.music.seeking.ForwardCommand forwardCommand26 = new fredboat.command.music.seeking.ForwardCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array15);
    fredboat.perms.PermissionLevel permissionLevel27 = forwardCommand26.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    org.junit.Assert.assertTrue("'" + permissionLevel27 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel27.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test463"); }

    fredboat.util.GitRepoState gitRepoState0 = fredboat.util.GitRepoState.getGitRepositoryState();
    java.lang.String str1 = gitRepoState0.commitMessageShort;
    java.lang.String str2 = gitRepoState0.commitUserName;
    java.lang.String str3 = gitRepoState0.commitMessageFull;
    java.lang.String str4 = gitRepoState0.commitTime;
    java.lang.String str5 = gitRepoState0.commitIdAbbrev;
    java.lang.String str6 = gitRepoState0.branch;
    java.lang.String str7 = gitRepoState0.commitUserEmail;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gitRepoState0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + ""+ "'", str1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test464"); }

    fredboat.audio.queue.PlaylistInfo.Source source6 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo7 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source6);
    fredboat.audio.queue.PlaylistInfo.Source source8 = playlistInfo7.getSource();
    int i9 = playlistInfo7.getTotalTracks();
    fredboat.audio.queue.PlaylistInfo.Source source10 = playlistInfo7.getSource();
    fredboat.audio.queue.PlaylistInfo playlistInfo11 = new fredboat.audio.queue.PlaylistInfo((int)(short)10, "fredboat.util.BrainfuckException: \u2705", source10);
    fredboat.audio.queue.PlaylistInfo playlistInfo12 = new fredboat.audio.queue.PlaylistInfo(5, "fredboat.commandmeta.MessagingException: DJ", source10);
    org.junit.Assert.assertTrue("'" + source6 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source6.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    org.junit.Assert.assertTrue("'" + source8 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source8.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 100);
    org.junit.Assert.assertTrue("'" + source10 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source10.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test465"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str2 = guildPermissions1.getDjList();
    guildPermissions0.setUserList(list_str2);
    java.lang.String[] str_array8 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand9 = new fredboat.command.music.control.RepeatCommand("", str_array8);
    fredboat.command.music.control.LeaveCommand leaveCommand10 = new fredboat.command.music.control.LeaveCommand("hi!", str_array8);
    fredboat.perms.PermissionLevel permissionLevel11 = leaveCommand10.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel12 = leaveCommand10.getMinimumPerms();
    java.util.List<java.lang.String> list_str13 = guildPermissions0.getFromEnum(permissionLevel12);
    java.util.List<java.lang.String> list_str14 = guildPermissions0.getAdminList();
    java.lang.String[] str_array22 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand23 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array22);
    fredboat.command.util.MathCommand mathCommand24 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array22);
    fredboat.command.music.control.UnpauseCommand unpauseCommand25 = new fredboat.command.music.control.UnpauseCommand("", str_array22);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand26 = new fredboat.command.moderation.EnableCommandsCommand("", str_array22);
    fredboat.command.music.seeking.RewindCommand rewindCommand27 = new fredboat.command.music.seeking.RewindCommand("", str_array22);
    fredboat.perms.PermissionLevel permissionLevel28 = rewindCommand27.getMinimumPerms();
    fredboat.db.entity.GuildPermissions guildPermissions29 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions30 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str31 = guildPermissions30.getDjList();
    guildPermissions29.setUserList(list_str31);
    guildPermissions0.setFromEnum(permissionLevel28, list_str31);
    java.util.List<java.lang.String> list_str34 = guildPermissions0.getDjList();
    guildPermissions0.setId("Bot Owner");
    java.lang.String[] str_array43 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand44 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array43);
    fredboat.command.music.control.RepeatCommand repeatCommand45 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array43);
    fredboat.command.util.CommandsCommand commandsCommand46 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array43);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand47 = new fredboat.command.music.control.PlaySplitCommand("\uD83D\uDCDD", str_array43);
    fredboat.command.music.control.DestroyCommand destroyCommand48 = new fredboat.command.music.control.DestroyCommand("Bot Admin", str_array43);
    fredboat.perms.PermissionLevel permissionLevel49 = destroyCommand48.getMinimumPerms();
    java.util.List<java.lang.String> list_str50 = guildPermissions0.getFromEnum(permissionLevel49);
    java.util.List<java.lang.String> list_str51 = guildPermissions0.getDjList();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array8);
    org.junit.Assert.assertTrue("'" + permissionLevel11 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel11.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array22);
    org.junit.Assert.assertTrue("'" + permissionLevel28 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel28.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array43);
    org.junit.Assert.assertTrue("'" + permissionLevel49 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel49.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str51);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test466"); }

    java.lang.String[] str_array13 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand14 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array13);
    fredboat.command.admin.BotRestartCommand botRestartCommand15 = new fredboat.command.admin.BotRestartCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand("fredboat.util.BrainfuckException: \u2705", str_array13);
    fredboat.command.music.control.PlaySplitCommand playSplitCommand17 = new fredboat.command.music.control.PlaySplitCommand("http://i.imgur.com/NqyOqnj.gif", str_array13);
    fredboat.command.util.MathCommand mathCommand18 = new fredboat.command.util.MathCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array13);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand19 = new fredboat.command.moderation.EnableCommandsCommand("Provided by OpenWeatherMap.org", str_array13);
    java.util.List<java.lang.String> list_str20 = enableCommandsCommand19.aliases;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str20);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test467"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    int i3 = openWeatherCurrent0.getCode();
    int i4 = openWeatherCurrent0.getDatetime();
    int i5 = openWeatherCurrent0.getCode();
    java.lang.String str6 = openWeatherCurrent0.getThumbnailUrl();
    int i7 = openWeatherCurrent0.getId();
    openWeatherCurrent0.setId((int)'4');
    int i10 = openWeatherCurrent0.getVisibility();
    java.lang.String str11 = openWeatherCurrent0.getDataProviderString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str11.equals("Provided by OpenWeatherMap.org"));

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test468"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand13 = new fredboat.command.admin.SetAvatarCommand("\uD83D\uDEAA", str_array10);
    fredboat.command.moderation.LanguageCommand languageCommand14 = new fredboat.command.moderation.LanguageCommand("\u2757", str_array10);
    fredboat.command.moderation.LanguageCommand languageCommand15 = new fredboat.command.moderation.LanguageCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.music.seeking.RestartCommand restartCommand16 = new fredboat.command.music.seeking.RestartCommand("\u2757", str_array10);
    fredboat.command.fun.CatgirlCommand catgirlCommand17 = new fredboat.command.fun.CatgirlCommand("", str_array10);
    fredboat.command.admin.BotRestartCommand botRestartCommand18 = new fredboat.command.admin.BotRestartCommand("", str_array10);
    fredboat.perms.PermissionLevel permissionLevel19 = botRestartCommand18.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel20 = botRestartCommand18.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext21 = null;
    // The following exception was thrown during execution in test generation
    try {
    botRestartCommand18.onInvoke(commandContext21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    org.junit.Assert.assertTrue("'" + permissionLevel19 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel19.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));
    org.junit.Assert.assertTrue("'" + permissionLevel20 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel20.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test469"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext6 = simpleTrackProvider0.getTracksInRange((int)(byte)10, 10000);
    simpleTrackProvider0.clear();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext8 = simpleTrackProvider0.getAsListOrdered();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext8);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test470"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = simpleTrackProvider0.provideAudioTrack();
    int i5 = simpleTrackProvider0.size();
    fredboat.audio.queue.RepeatMode repeatMode6 = simpleTrackProvider0.getRepeatMode();
    int i7 = simpleTrackProvider0.streamsCount();
    boolean b8 = simpleTrackProvider0.isShuffle();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    org.junit.Assert.assertTrue("'" + repeatMode6 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode6.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test471"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    int i1 = weatherOpenWeather0.getId();
    java.lang.String str2 = weatherOpenWeather0.getDescription();
    weatherOpenWeather0.setMain("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)");
    java.lang.String str5 = weatherOpenWeather0.getIcon();
    weatherOpenWeather0.setId(4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test472"); }

    fredboat.audio.queue.PlaylistInfo.Source source2 = fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY;
    fredboat.audio.queue.PlaylistInfo playlistInfo3 = new fredboat.audio.queue.PlaylistInfo(100, "\u2757", source2);
    playlistInfo3.setTotalTracks((int)(short)0);
    java.lang.String str6 = playlistInfo3.getName();
    playlistInfo3.setName("Provided by OpenWeatherMap.org");
    playlistInfo3.setTotalTracks((int)(byte)100);
    playlistInfo3.setName("fredboat.commandmeta.MessagingException: \uD83D\uDEAA");
    org.junit.Assert.assertTrue("'" + source2 + "' != '" + fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY + "'", source2.equals(fredboat.audio.queue.PlaylistInfo.Source.SPOTIFY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "\u2757"+ "'", str6.equals("\u2757"));

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test473"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array6);
    fredboat.command.music.control.ShuffleCommand shuffleCommand8 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.maintenance.GetIdCommand getIdCommand9 = new fredboat.command.maintenance.GetIdCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand10 = new fredboat.command.maintenance.GitInfoCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array6);
    fredboat.commandmeta.abs.CommandContext commandContext11 = null;
    // The following exception was thrown during execution in test generation
    try {
    gitInfoCommand10.onInvoke(commandContext11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test474"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather1 = openWeatherCurrent0.getMain();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderString();
    int i3 = openWeatherCurrent0.getId();
    java.lang.String str4 = openWeatherCurrent0.getFormattedDate();
    int i5 = openWeatherCurrent0.getDatetime();
    java.lang.String str6 = openWeatherCurrent0.getDataProviderString();
    java.lang.String str7 = openWeatherCurrent0.getThumbnailUrl();
    java.lang.String str8 = openWeatherCurrent0.getFormattedDate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherMainOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str2.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str4.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Provided by OpenWeatherMap.org"+ "'", str6.equals("Provided by OpenWeatherMap.org"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str8.equals("qua, 31 dez 1969, 09:00 PM"));

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test475"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array10);
    fredboat.command.util.BrainfuckCommand brainfuckCommand15 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.seeking.RestartCommand restartCommand16 = new fredboat.command.music.seeking.RestartCommand("hi!", str_array10);
    fredboat.command.admin.EvalCommand evalCommand17 = new fredboat.command.admin.EvalCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array10);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand18 = new fredboat.command.moderation.EnableCommandsCommand("", str_array10);
    fredboat.messaging.internal.Context context19 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = enableCommandsCommand18.help(context19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test476"); }

    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather0 = new fredboat.util.rest.models.weather.WeatherSystemOpenWeather();
    weatherSystemOpenWeather0.setId((int)(short)100);
    int i3 = weatherSystemOpenWeather0.getType();
    int i4 = weatherSystemOpenWeather0.getType();
    int i5 = weatherSystemOpenWeather0.getSunset();
    java.lang.String str6 = weatherSystemOpenWeather0.getCountry();
    weatherSystemOpenWeather0.setId((int)(byte)-1);
    int i9 = weatherSystemOpenWeather0.getType();
    weatherSystemOpenWeather0.setSunset(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test477"); }

    fredboat.util.rest.Weather weather6 = null;
    fredboat.util.rest.Weather weather9 = null;
    java.lang.String[] str_array17 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand18 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array17);
    fredboat.command.music.control.ShuffleCommand shuffleCommand19 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array17);
    fredboat.command.fun.TextCommand textCommand20 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array17);
    fredboat.command.util.WeatherCommand weatherCommand21 = new fredboat.command.util.WeatherCommand(weather9, "Bot Admin", str_array17);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand22 = new fredboat.command.admin.NodeAdminCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array17);
    fredboat.command.util.WeatherCommand weatherCommand23 = new fredboat.command.util.WeatherCommand(weather6, "Bot Owner", str_array17);
    fredboat.command.music.control.LeaveCommand leaveCommand24 = new fredboat.command.music.control.LeaveCommand("\u2705", str_array17);
    fredboat.command.music.control.JoinCommand joinCommand25 = new fredboat.command.music.control.JoinCommand("Bot Owner", str_array17);
    fredboat.command.music.control.LeaveCommand leaveCommand26 = new fredboat.command.music.control.LeaveCommand("fredboat.util.BrainfuckException: hi!", str_array17);
    fredboat.command.fun.FacedeskCommand facedeskCommand27 = new fredboat.command.fun.FacedeskCommand("\uD83D\uDEAA", "fredboat.util.BrainfuckException: ", str_array17);
    fredboat.command.moderation.LanguageCommand languageCommand28 = new fredboat.command.moderation.LanguageCommand("\uD83D\uDCDD", str_array17);
    fredboat.commandmeta.abs.CommandContext commandContext29 = null;
    // The following exception was thrown during execution in test generation
    try {
    languageCommand28.onInvoke(commandContext29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array17);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test478"); }

    fredboat.util.GitRepoState gitRepoState1 = new fredboat.util.GitRepoState("\uD83D\uDEAA");
    java.lang.String str2 = gitRepoState1.commitTime;
    java.lang.String str3 = gitRepoState1.commitTime;
    java.lang.String str4 = gitRepoState1.commitTime;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test479"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "https://i.imgur.com/YqZuqEB.jpg", "https://i.imgur.com/YqZuqEB.jpg", "fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org" };
    fredboat.command.music.control.ShuffleCommand shuffleCommand6 = new fredboat.command.music.control.ShuffleCommand("\u274C", str_array5);
    fredboat.command.maintenance.VersionCommand versionCommand7 = new fredboat.command.maintenance.VersionCommand("Base", str_array5);
    fredboat.commandmeta.abs.CommandContext commandContext8 = null;
    // The following exception was thrown during execution in test generation
    try {
    versionCommand7.onInvoke(commandContext8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test480"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    long long1 = simpleTrackProvider0.getDurationMillis();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider2 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext3 = simpleTrackProvider2.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext4 = null;
    simpleTrackProvider2.setLastTrack(audioTrackContext4);
    java.lang.Long[] long_array9 = new java.lang.Long[] { 1L, (-1L), 0L };
    java.util.ArrayList<java.lang.Long> arraylist_long10 = new java.util.ArrayList<java.lang.Long>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<java.lang.Long>)arraylist_long10, long_array9);
    simpleTrackProvider2.removeAllById((java.util.Collection<java.lang.Long>)arraylist_long10);
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider13 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext14 = simpleTrackProvider13.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext15 = null;
    simpleTrackProvider13.setLastTrack(audioTrackContext15);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext17 = simpleTrackProvider13.getAsListOrdered();
    simpleTrackProvider2.addAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext17);
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext17);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext20 = simpleTrackProvider0.getAsListOrdered();
    simpleTrackProvider0.skipped();
    simpleTrackProvider0.setShuffle(true);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext24 = simpleTrackProvider0.getAsList();
    boolean b25 = simpleTrackProvider0.isShuffle();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(long_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test481"); }

    fredboat.db.entity.GuildPermissions guildPermissions0 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions1 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str2 = guildPermissions1.getDjList();
    guildPermissions0.setUserList(list_str2);
    fredboat.db.entity.GuildPermissions guildPermissions4 = new fredboat.db.entity.GuildPermissions();
    fredboat.db.entity.GuildPermissions guildPermissions5 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str6 = guildPermissions5.getDjList();
    guildPermissions4.setUserList(list_str6);
    java.lang.String[] str_array12 = new java.lang.String[] { "Provided by OpenWeatherMap.org", "\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA..." };
    fredboat.command.music.control.RepeatCommand repeatCommand13 = new fredboat.command.music.control.RepeatCommand("", str_array12);
    fredboat.command.music.control.LeaveCommand leaveCommand14 = new fredboat.command.music.control.LeaveCommand("hi!", str_array12);
    fredboat.perms.PermissionLevel permissionLevel15 = leaveCommand14.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel16 = leaveCommand14.getMinimumPerms();
    java.util.List<java.lang.String> list_str17 = guildPermissions4.getFromEnum(permissionLevel16);
    java.util.List<java.lang.String> list_str18 = guildPermissions4.getAdminList();
    guildPermissions0.setDjList(list_str18);
    java.lang.String[] str_array29 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand30 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array29);
    fredboat.command.music.control.ShuffleCommand shuffleCommand31 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array29);
    fredboat.command.fun.TextCommand textCommand32 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array29);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand33 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array29);
    fredboat.command.moderation.DisableCommandsCommand disableCommandsCommand34 = new fredboat.command.moderation.DisableCommandsCommand("hi!", str_array29);
    fredboat.command.music.control.UnpauseCommand unpauseCommand35 = new fredboat.command.music.control.UnpauseCommand("\uD83D\uDCDD", str_array29);
    fredboat.perms.PermissionLevel permissionLevel36 = unpauseCommand35.getMinimumPerms();
    java.util.List<java.lang.String> list_str37 = guildPermissions0.getFromEnum(permissionLevel36);
    fredboat.db.entity.GuildPermissions guildPermissions38 = new fredboat.db.entity.GuildPermissions();
    java.lang.String[] str_array47 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand48 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array47);
    fredboat.command.util.MathCommand mathCommand49 = new fredboat.command.util.MathCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array47);
    fredboat.command.music.control.UnpauseCommand unpauseCommand50 = new fredboat.command.music.control.UnpauseCommand("", str_array47);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand51 = new fredboat.command.moderation.EnableCommandsCommand("", str_array47);
    fredboat.command.music.seeking.RewindCommand rewindCommand52 = new fredboat.command.music.seeking.RewindCommand("", str_array47);
    fredboat.command.music.seeking.RewindCommand rewindCommand53 = new fredboat.command.music.seeking.RewindCommand("en_US", str_array47);
    fredboat.perms.PermissionLevel permissionLevel54 = rewindCommand53.getMinimumPerms();
    java.util.List<java.lang.String> list_str55 = guildPermissions38.getFromEnum(permissionLevel54);
    fredboat.db.entity.GuildPermissions guildPermissions56 = new fredboat.db.entity.GuildPermissions();
    java.util.List<java.lang.String> list_str57 = guildPermissions56.getDjList();
    guildPermissions38.setUserList(list_str57);
    guildPermissions0.setDjList(list_str57);
    guildPermissions0.setId("https://i.imgur.com/YqZuqEB.jpg");
    java.lang.String[] str_array73 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand74 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array73);
    fredboat.command.music.control.ShuffleCommand shuffleCommand75 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array73);
    fredboat.command.fun.TextCommand textCommand76 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array73);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand77 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array73);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand78 = new fredboat.command.moderation.EnableCommandsCommand("\u2705", str_array73);
    fredboat.command.music.control.DestroyCommand destroyCommand79 = new fredboat.command.music.control.DestroyCommand("\u274C", str_array73);
    fredboat.command.music.control.RepeatCommand repeatCommand80 = new fredboat.command.music.control.RepeatCommand("\u2705", str_array73);
    fredboat.command.music.seeking.RewindCommand rewindCommand81 = new fredboat.command.music.seeking.RewindCommand("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org", str_array73);
    fredboat.perms.PermissionLevel permissionLevel82 = rewindCommand81.getMinimumPerms();
    java.util.List<java.lang.String> list_str83 = guildPermissions0.getFromEnum(permissionLevel82);
    java.lang.String str84 = permissionLevel82.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);
    org.junit.Assert.assertTrue("'" + permissionLevel15 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel15.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel16 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel16.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array29);
    org.junit.Assert.assertTrue("'" + permissionLevel36 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel36.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array47);
    org.junit.Assert.assertTrue("'" + permissionLevel54 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel54.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array73);
    org.junit.Assert.assertTrue("'" + permissionLevel82 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel82.equals(fredboat.perms.PermissionLevel.DJ));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_str83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "DJ"+ "'", str84.equals("DJ"));

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test482"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "", "hi!" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand14 = new fredboat.command.music.control.ShuffleCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.fun.TextCommand textCommand15 = new fredboat.command.fun.TextCommand("Provided by OpenWeatherMap.org", "\u274C", str_array12);
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand16 = new fredboat.command.admin.NodeAdminCommand("http://i.imgur.com/NqyOqnj.gif", str_array12);
    fredboat.command.music.seeking.RewindCommand rewindCommand17 = new fredboat.command.music.seeking.RewindCommand("", str_array12);
    fredboat.command.music.control.UnpauseCommand unpauseCommand18 = new fredboat.command.music.control.UnpauseCommand("https://i.imgur.com/YqZuqEB.jpg", str_array12);
    fredboat.command.maintenance.NodesCommand nodesCommand19 = new fredboat.command.maintenance.NodesCommand("", str_array12);
    fredboat.command.fun.PatCommand patCommand20 = new fredboat.command.fun.PatCommand("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", "fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array12);
    fredboat.messaging.internal.Context context21 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str22 = patCommand20.help(context21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test483"); }

    java.lang.String[] str_array12 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand13 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array12);
    fredboat.command.music.control.RepeatCommand repeatCommand14 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array12);
    fredboat.command.util.CommandsCommand commandsCommand15 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array12);
    fredboat.command.music.control.PauseCommand pauseCommand16 = new fredboat.command.music.control.PauseCommand("", str_array12);
    fredboat.command.admin.EvalCommand evalCommand17 = new fredboat.command.admin.EvalCommand("hi!", str_array12);
    fredboat.command.music.control.ShuffleCommand shuffleCommand18 = new fredboat.command.music.control.ShuffleCommand("fredboat.util.BrainfuckException: ", str_array12);
    fredboat.command.admin.BotRestartCommand botRestartCommand19 = new fredboat.command.admin.BotRestartCommand("qua, 31 dez 1969, 09:00 PM", str_array12);
    fredboat.command.fun.RandomImageCommand randomImageCommand20 = new fredboat.command.fun.RandomImageCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "fredboat.util.BrainfuckException: :\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array12);
    fredboat.command.fun.TextCommand textCommand21 = new fredboat.command.fun.TextCommand("https://i.imgur.com/YqZuqEB.jpg", "fredboat.util.BrainfuckException: ", str_array12);
    textCommand21.msg = "Admin";
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array12);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test484"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    long long1 = uConfig0.getBearerExpiration();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setBearer("en_US");
    long long4 = uConfig0.getBearerExpiration();
    java.lang.String str5 = uConfig0.getUserId();
    fredboat.db.entity.UConfig uConfig7 = uConfig0.setBearerExpiration(1531610355644L);
    java.lang.String str8 = uConfig7.getRefresh();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(long4 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test485"); }

    java.lang.String[] str_array9 = new java.lang.String[] { ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", "http://i.imgur.com/NqyOqnj.gif", "\uD83D\uDEAA", "\u2757", ":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D" };
    fredboat.command.fun.HugCommand hugCommand10 = new fredboat.command.fun.HugCommand("", "\u274C", str_array9);
    fredboat.command.util.ServerInfoCommand serverInfoCommand11 = new fredboat.command.util.ServerInfoCommand("qua, 31 dez 1969, 09:00 PM", str_array9);
    fredboat.command.music.control.DestroyCommand destroyCommand12 = new fredboat.command.music.control.DestroyCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.messaging.internal.Context context13 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = destroyCommand12.help(context13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test486"); }

    fredboat.util.rest.models.weather.WeatherMainOpenWeather weatherMainOpenWeather0 = new fredboat.util.rest.models.weather.WeatherMainOpenWeather();
    weatherMainOpenWeather0.setTempMin((double)(short)10);
    weatherMainOpenWeather0.setTempMax((double)0);
    java.lang.String[] str_array15 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand16 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.admin.ExitCommand exitCommand17 = new fredboat.command.admin.ExitCommand("hi!", str_array15);
    fredboat.command.music.info.ListCommand listCommand18 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array15);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand19 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array15);
    fredboat.command.util.BrainfuckCommand brainfuckCommand20 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array15);
    fredboat.command.music.seeking.RestartCommand restartCommand21 = new fredboat.command.music.seeking.RestartCommand("hi!", str_array15);
    fredboat.command.maintenance.GetIdCommand getIdCommand22 = new fredboat.command.maintenance.GetIdCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.command.music.control.StopCommand stopCommand23 = new fredboat.command.music.control.StopCommand("http://i.imgur.com/NqyOqnj.gif", str_array15);
    fredboat.perms.PermissionLevel permissionLevel24 = stopCommand23.getMinimumPerms();
    fredboat.perms.PermissionLevel permissionLevel25 = stopCommand23.getMinimumPerms();
    fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherMainOpenWeather,fredboat.commandmeta.abs.IMusicCommand> tuple2_weatherMainOpenWeather_iMusicCommand26 = new fredboat.util.Tuple2<fredboat.util.rest.models.weather.WeatherMainOpenWeather,fredboat.commandmeta.abs.IMusicCommand>(weatherMainOpenWeather0, (fredboat.commandmeta.abs.IMusicCommand)stopCommand23);
    fredboat.perms.PermissionLevel permissionLevel27 = stopCommand23.getMinimumPerms();
    fredboat.commandmeta.abs.CommandContext commandContext28 = null;
    // The following exception was thrown during execution in test generation
    try {
    stopCommand23.onInvoke(commandContext28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array15);
    org.junit.Assert.assertTrue("'" + permissionLevel24 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel24.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel25 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel25.equals(fredboat.perms.PermissionLevel.DJ));
    org.junit.Assert.assertTrue("'" + permissionLevel27 + "' != '" + fredboat.perms.PermissionLevel.DJ + "'", permissionLevel27.equals(fredboat.perms.PermissionLevel.DJ));

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test487"); }

    fredboat.util.rest.models.weather.OpenWeatherCurrent openWeatherCurrent0 = new fredboat.util.rest.models.weather.OpenWeatherCurrent();
    fredboat.util.rest.models.weather.WeatherSystemOpenWeather weatherSystemOpenWeather1 = openWeatherCurrent0.getSys();
    java.lang.String str2 = openWeatherCurrent0.getDataProviderIcon();
    fredboat.util.rest.models.weather.CloudsOpenWeather cloudsOpenWeather3 = openWeatherCurrent0.getClouds();
    boolean b4 = openWeatherCurrent0.isError();
    int i5 = openWeatherCurrent0.getCode();
    java.lang.String str6 = openWeatherCurrent0.getFormattedDate();
    java.lang.String str7 = openWeatherCurrent0.getWeatherDescription();
    int i8 = openWeatherCurrent0.getDatetime();
    java.lang.String str9 = openWeatherCurrent0.getDataProviderIcon();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(weatherSystemOpenWeather1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str2.equals("https://i.imgur.com/YqZuqEB.jpg"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(cloudsOpenWeather3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str6.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "https://i.imgur.com/YqZuqEB.jpg"+ "'", str9.equals("https://i.imgur.com/YqZuqEB.jpg"));

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test488"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    simpleTrackProvider0.setLastTrack(audioTrackContext2);
    simpleTrackProvider0.skipped();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider5 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext6 = simpleTrackProvider5.provideAudioTrack();
    int i7 = simpleTrackProvider5.size();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext8 = simpleTrackProvider5.getAsListOrdered();
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext8);
    boolean b10 = simpleTrackProvider0.isShuffle();
    // The following exception was thrown during execution in test generation
    try {
    fredboat.audio.queue.AudioTrackContext audioTrackContext12 = simpleTrackProvider0.getTrack((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test489"); }

    fredboat.db.entity.UConfig uConfig0 = new fredboat.db.entity.UConfig();
    java.lang.String str1 = uConfig0.getBearer();
    fredboat.db.entity.UConfig uConfig3 = uConfig0.setUserId("fredboat.util.BrainfuckException: \u2705");
    fredboat.db.entity.UConfig uConfig5 = uConfig0.setUserId("Provided by OpenWeatherMap.org");
    fredboat.db.entity.UConfig uConfig7 = uConfig5.setUserId("fredboat.util.rest.APILimitException: en_US");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(uConfig7);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test490"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand7 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array6);
    fredboat.command.music.control.UnpauseCommand unpauseCommand8 = new fredboat.command.music.control.UnpauseCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.music.control.ShuffleCommand shuffleCommand9 = new fredboat.command.music.control.ShuffleCommand("http://i.imgur.com/NqyOqnj.gif", str_array6);
    fredboat.command.music.seeking.ForwardCommand forwardCommand10 = new fredboat.command.music.seeking.ForwardCommand("fredboat.util.BrainfuckException: \u2705", str_array6);
    fredboat.commandmeta.abs.CommandContext commandContext11 = null;
    // The following exception was thrown during execution in test generation
    try {
    forwardCommand10.onInvoke(commandContext11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test491"); }

    java.lang.String[] str_array5 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand6 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array5);
    fredboat.command.maintenance.PingCommand pingCommand7 = new fredboat.command.maintenance.PingCommand("\u274C", str_array5);
    fredboat.command.music.control.DestroyCommand destroyCommand8 = new fredboat.command.music.control.DestroyCommand("\u2757", str_array5);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand9 = new fredboat.command.maintenance.GitInfoCommand("https://i.imgur.com/YqZuqEB.jpg", str_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array5);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test492"); }

    fredboat.util.rest.models.weather.WeatherOpenWeather weatherOpenWeather0 = new fredboat.util.rest.models.weather.WeatherOpenWeather();
    java.lang.String str1 = weatherOpenWeather0.getDescription();
    java.lang.String str2 = weatherOpenWeather0.getMain();
    weatherOpenWeather0.setMain("fredboat.util.BrainfuckException: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test493"); }

    fredboat.util.BrainfuckException brainfuckException4 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException5 = new fredboat.util.BrainfuckException("", (java.lang.Throwable)brainfuckException4);
    fredboat.commandmeta.MessagingException messagingException6 = new fredboat.commandmeta.MessagingException("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", (java.lang.Throwable)brainfuckException4);
    java.lang.Throwable[] throwable_array7 = brainfuckException4.getSuppressed();
    fredboat.util.BrainfuckException brainfuckException9 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException12 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    fredboat.util.BrainfuckException brainfuckException13 = new fredboat.util.BrainfuckException("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", (java.lang.Throwable)brainfuckException12);
    brainfuckException9.addSuppressed((java.lang.Throwable)brainfuckException12);
    fredboat.util.BrainfuckException brainfuckException17 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException18 = new fredboat.util.BrainfuckException("", (java.lang.Throwable)brainfuckException17);
    brainfuckException12.addSuppressed((java.lang.Throwable)brainfuckException17);
    brainfuckException4.addSuppressed((java.lang.Throwable)brainfuckException12);
    java.lang.Throwable[] throwable_array21 = brainfuckException4.getSuppressed();
    fredboat.commandmeta.MessagingException messagingException22 = new fredboat.commandmeta.MessagingException("fredboat.util.BrainfuckException: ", (java.lang.Throwable)brainfuckException4);
    java.lang.String str23 = messagingException22.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: "+ "'", str23.equals("fredboat.commandmeta.MessagingException: fredboat.util.BrainfuckException: "));

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test494"); }

    fredboat.db.entity.BlacklistEntry blacklistEntry1 = new fredboat.db.entity.BlacklistEntry(1531609983118L);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test495"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "hi!", "hi!" };
    fredboat.command.maintenance.VersionCommand versionCommand11 = new fredboat.command.maintenance.VersionCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.admin.ExitCommand exitCommand12 = new fredboat.command.admin.ExitCommand("hi!", str_array10);
    fredboat.command.music.info.ListCommand listCommand13 = new fredboat.command.music.info.ListCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.command.maintenance.GitInfoCommand gitInfoCommand14 = new fredboat.command.maintenance.GitInfoCommand("hi!", str_array10);
    fredboat.command.util.BrainfuckCommand brainfuckCommand15 = new fredboat.command.util.BrainfuckCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array10);
    fredboat.command.music.control.PauseCommand pauseCommand16 = new fredboat.command.music.control.PauseCommand("", str_array10);
    fredboat.command.admin.BotRestartCommand botRestartCommand17 = new fredboat.command.admin.BotRestartCommand("", str_array10);
    fredboat.command.admin.SetAvatarCommand setAvatarCommand18 = new fredboat.command.admin.SetAvatarCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array10);
    fredboat.commandmeta.abs.CommandContext commandContext19 = null;
    // The following exception was thrown during execution in test generation
    try {
    setAvatarCommand18.onInvoke(commandContext19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test496"); }

    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider0 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.AudioTrackContext audioTrackContext1 = simpleTrackProvider0.provideAudioTrack();
    fredboat.audio.queue.AudioTrackContext audioTrackContext2 = null;
    boolean b3 = simpleTrackProvider0.remove(audioTrackContext2);
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext4 = simpleTrackProvider0.getAsListOrdered();
    fredboat.audio.queue.AudioTrackContext audioTrackContext5 = simpleTrackProvider0.peek();
    fredboat.audio.queue.SimpleTrackProvider simpleTrackProvider6 = new fredboat.audio.queue.SimpleTrackProvider();
    fredboat.audio.queue.RepeatMode repeatMode7 = simpleTrackProvider6.getRepeatMode();
    java.util.List<fredboat.audio.queue.AudioTrackContext> list_audioTrackContext10 = simpleTrackProvider6.getTracksInRange(10000, (int)(short)10);
    simpleTrackProvider0.removeAll((java.util.Collection<fredboat.audio.queue.AudioTrackContext>)list_audioTrackContext10);
    int i12 = simpleTrackProvider0.size();
    int i13 = simpleTrackProvider0.streamsCount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(audioTrackContext5);
    org.junit.Assert.assertTrue("'" + repeatMode7 + "' != '" + fredboat.audio.queue.RepeatMode.OFF + "'", repeatMode7.equals(fredboat.audio.queue.RepeatMode.OFF));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_audioTrackContext10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test497"); }

    java.lang.String[] str_array9 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand10 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array9);
    fredboat.command.music.control.RepeatCommand repeatCommand11 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array9);
    fredboat.command.util.CommandsCommand commandsCommand12 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array9);
    fredboat.command.music.control.StopCommand stopCommand13 = new fredboat.command.music.control.StopCommand("hi!", str_array9);
    fredboat.command.moderation.EnableCommandsCommand enableCommandsCommand14 = new fredboat.command.moderation.EnableCommandsCommand(":\uFF1C\uFFE3\uFF40\u30FD\u3001\u3000\u3000\u3000\u3000\u3000\u3000\u3000\uFF0F\uFFE3\uFF1E\n\u3000\u309D\u3001\u3000\u3000\uFF3C\u3000\uFF0F\u2312\u30FD,\u30CE \u3000/\u00B4\n\u3000\u3000\u3000\u309D\u3001\u3000`\uFF08 ( \u0361\u00B0 \u035C\u0296 \u0361\u00B0) \uFF0F\n\u3000\u3000 \u3000\u3000>\u3000 \u3000 \u3000,\u30CE\n\u3000\u3000\u3000\u3000\u3000\u2220_,,,/\u00B4\u201D", str_array9);
    fredboat.command.music.seeking.SeekCommand seekCommand15 = new fredboat.command.music.seeking.SeekCommand("fredboat.util.BrainfuckException: \u2705", str_array9);
    fredboat.command.util.BrainfuckCommand brainfuckCommand16 = new fredboat.command.util.BrainfuckCommand("qua, 31 dez 1969, 09:00 PM", str_array9);
    fredboat.command.music.control.LeaveCommand leaveCommand17 = new fredboat.command.music.control.LeaveCommand("fredboat.commandmeta.MessagingException: \uD83D\uDEAA", str_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array9);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test498"); }

    fredboat.util.BrainfuckException brainfuckException2 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException5 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    fredboat.util.BrainfuckException brainfuckException6 = new fredboat.util.BrainfuckException("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", (java.lang.Throwable)brainfuckException5);
    brainfuckException2.addSuppressed((java.lang.Throwable)brainfuckException5);
    fredboat.util.BrainfuckException brainfuckException10 = new fredboat.util.BrainfuckException("Provided by OpenWeatherMap.org");
    java.lang.Throwable[] throwable_array11 = brainfuckException10.getSuppressed();
    fredboat.commandmeta.MessagingException messagingException12 = new fredboat.commandmeta.MessagingException("DJ", (java.lang.Throwable)brainfuckException10);
    brainfuckException5.addSuppressed((java.lang.Throwable)brainfuckException10);
    fredboat.util.BrainfuckException brainfuckException17 = new fredboat.util.BrainfuckException("hi!");
    fredboat.util.BrainfuckException brainfuckException18 = new fredboat.util.BrainfuckException("", (java.lang.Throwable)brainfuckException17);
    fredboat.util.BrainfuckException brainfuckException19 = new fredboat.util.BrainfuckException("\uD83D\uDEAA", (java.lang.Throwable)brainfuckException17);
    fredboat.commandmeta.MessagingException messagingException21 = new fredboat.commandmeta.MessagingException("fredboat.util.BrainfuckException: Provided by OpenWeatherMap.org");
    brainfuckException17.addSuppressed((java.lang.Throwable)messagingException21);
    brainfuckException5.addSuppressed((java.lang.Throwable)messagingException21);
    fredboat.util.BrainfuckException brainfuckException24 = new fredboat.util.BrainfuckException("\u2508\u2508\u2571\u258F\u2508\u2508\u2508\u2508\u2508\u2571\u2594\u2594\u2594\u2594\u2572\u2508 \n\u2508\u2508\u258F\u258F\u2508\u2508\u2508\u2508\u2508\u258F\u2572\u2595\u258B\u2595\u258B\u258F\n\u2508\u2508\u2572\u2572\u2508\u2508\u2508\u2508\u2508\u258F\u2508\u258F\u2508\u2594\u2594\u2594\u2586 ------- BORF!\n\u2508\u2508\u2508\u2572\u2594\u2594\u2594\u2594\u2594\u2572\u2571\u2508\u2570\u2533\u2533\u2533\u256F \n\u2571\u2572\u2571\u2572\u258F\u2508\u2508\u2508\u2508\u2508\u2508\u2595\u2594\u2570\u2501\u256F \n\u2594\u2572\u2572\u2571\u2571\u2594\u2571\u2594\u2594\u2572\u2572\u2572\u2572\u2508\u2508\u2508 \n\u2508\u2508\u2572\u2571\u2572\u2571\u2508\u2508\u2508\u2508\u2572\u2572\u2582\u2572\u2582\u2508 \n\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2508\u2572\u2571\u2572\u2571\u2508\nSpread him to take over Discord!(Don't spam him though!)", (java.lang.Throwable)messagingException21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array11);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test499"); }

    java.lang.String[] str_array6 = new java.lang.String[] { "" };
    fredboat.command.admin.NodeAdminCommand nodeAdminCommand7 = new fredboat.command.admin.NodeAdminCommand("\uD83D\uDCDD", str_array6);
    fredboat.command.music.control.RepeatCommand repeatCommand8 = new fredboat.command.music.control.RepeatCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", str_array6);
    fredboat.command.util.CommandsCommand commandsCommand9 = new fredboat.command.util.CommandsCommand("Provided by OpenWeatherMap.org", str_array6);
    fredboat.command.music.control.StopCommand stopCommand10 = new fredboat.command.music.control.StopCommand("hi!", str_array6);
    fredboat.command.admin.ExitCommand exitCommand11 = new fredboat.command.admin.ExitCommand("fredboat.util.BrainfuckException: hi!", str_array6);
    fredboat.perms.PermissionLevel permissionLevel12 = exitCommand11.getMinimumPerms();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array6);
    org.junit.Assert.assertTrue("'" + permissionLevel12 + "' != '" + fredboat.perms.PermissionLevel.BOT_ADMIN + "'", permissionLevel12.equals(fredboat.perms.PermissionLevel.BOT_ADMIN));

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest8.test500"); }

    java.lang.String[] str_array10 = new java.lang.String[] { "", "\u2705", "\uD83D\uDCDD", "\uD83D\uDCDD", "\uD83D\uDEAA", "" };
    fredboat.command.fun.RollCommand rollCommand11 = new fredboat.command.fun.RollCommand("\uFF08 \u0361\u00B0 \u035C\u0296 \u0361\u00B0)\u3064\u2501\u2606\u30FB\u3002\n\u2282\u3000\u3000 \u30CE \u3000\u3000\u3000\u30FB\u309C+.\n\u3000\u3057\u30FC\uFF2A\u3000\u3000\u3000\u00B0\u3002+ \u00B4\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000.\u00B7 \u00B4\u00B8.\u00B7\u00B4\u00A8) \u00B8.\u00B7*\u00A8)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u00B8.\u00B7\u00B4 (\u00B8.\u00B7' \u2606 ABRA KADABRA...", "\uD83D\uDEAA", str_array10);
    fredboat.command.fun.TextCommand textCommand12 = new fredboat.command.fun.TextCommand("qua, 31 dez 1969, 09:00 PM", "\uD83D\uDEAA", str_array10);
    java.lang.String str13 = textCommand12.msg;
    java.lang.String str14 = textCommand12.msg;
    java.lang.String str15 = textCommand12.msg;
    java.lang.String str16 = textCommand12.name;
    fredboat.messaging.internal.Context context17 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = textCommand12.help(context17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(str_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str13.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str14.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "qua, 31 dez 1969, 09:00 PM"+ "'", str15.equals("qua, 31 dez 1969, 09:00 PM"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "\uD83D\uDEAA"+ "'", str16.equals("\uD83D\uDEAA"));

  }

}
